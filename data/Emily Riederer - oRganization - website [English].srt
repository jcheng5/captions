1
00:00:06,363 --> 00:00:08,280
EMILY RIEDERER: Hi, my
name is Emily Riederer.

2
00:00:08,280 --> 00:00:10,740
And today, I'm here to
talk about how to design

3
00:00:10,740 --> 00:00:13,620
packages for your organization.

4
00:00:13,620 --> 00:00:16,990
Think about the last time that
you joined a new organization.

5
00:00:16,990 --> 00:00:19,080
There was so much you
needed to learn before you

6
00:00:19,080 --> 00:00:20,395
can start contributing.

7
00:00:20,395 --> 00:00:22,770
You remember the frustration
when you couldn't figure out

8
00:00:22,770 --> 00:00:25,290
how to access data,
the lost hours

9
00:00:25,290 --> 00:00:27,650
trying to answer the wrong
question before you built up

10
00:00:27,650 --> 00:00:30,030
to your intuition,
and the awkwardness

11
00:00:30,030 --> 00:00:33,690
of figuring out team norms
through trial and error.

12
00:00:33,690 --> 00:00:35,820
When we join a new
organization, we

13
00:00:35,820 --> 00:00:38,310
must learn these things
only once before we

14
00:00:38,310 --> 00:00:39,900
can hit the ground running.

15
00:00:39,900 --> 00:00:42,780
However, the off-the-shelves
tools that we use

16
00:00:42,780 --> 00:00:44,970
can't preserve this context.

17
00:00:44,970 --> 00:00:47,940
Every day is like their
first day at work.

18
00:00:47,940 --> 00:00:50,910
Unlike open-source
packages, internal packages

19
00:00:50,910 --> 00:00:53,040
can embrace
institutional knowledge

20
00:00:53,040 --> 00:00:55,800
more like a colleague
in two important ways.

21
00:00:55,800 --> 00:00:58,110
First and foremost,
they can aim to solve

22
00:00:58,110 --> 00:01:01,140
far more domain-specific
and concrete problems

23
00:01:01,140 --> 00:01:03,060
than open-source packages.

24
00:01:03,060 --> 00:01:05,700
Second, although narrow
versions of the scope

25
00:01:05,700 --> 00:01:09,210
of the defined problem, their
insight into our organization

26
00:01:09,210 --> 00:01:11,760
allows them to be more
holistic in the solutions

27
00:01:11,760 --> 00:01:14,460
they propose by
internalizing more steps

28
00:01:14,460 --> 00:01:17,430
of the necessary workflow
to answer that question,

29
00:01:17,430 --> 00:01:20,040
covering areas like pulling
data and communicating

30
00:01:20,040 --> 00:01:21,390
with colleagues.

31
00:01:21,390 --> 00:01:24,420
Because of these two
factors, internal packages

32
00:01:24,420 --> 00:01:28,170
can add a lot of value by
interfacing internal utilities,

33
00:01:28,170 --> 00:01:30,330
streamlining the
analysis process,

34
00:01:30,330 --> 00:01:34,320
and empowering data scientists
to create high-quality results.

35
00:01:34,320 --> 00:01:36,990
But more than the
tasks they can do,

36
00:01:36,990 --> 00:01:39,690
today, I want to talk
about how to design

37
00:01:39,690 --> 00:01:44,490
such internal packages to be
as rich in context as possible.

38
00:01:44,490 --> 00:01:47,250
To do this, I like to
think about the popular

39
00:01:47,250 --> 00:01:49,980
Jobs-To-Be-Done framework
for product development.

40
00:01:49,980 --> 00:01:52,380
This asserts that
we hire a product

41
00:01:52,380 --> 00:01:56,160
to do a job that helps us make
progress towards the goal.

42
00:01:56,160 --> 00:01:58,680
And to me, it's that
notion of progress

43
00:01:58,680 --> 00:02:02,130
and truly knowing the ins and
outs of what sort of progress

44
00:02:02,130 --> 00:02:06,300
our users need to make that
sets internal packages apart.

45
00:02:06,300 --> 00:02:09,870
Additionally, these jobs
can add functional, social,

46
00:02:09,870 --> 00:02:12,400
and emotional aspects.

47
00:02:12,400 --> 00:02:14,125
For the rest of this
discussion, I'll

48
00:02:14,125 --> 00:02:17,140
tweak this framework
just slightly.

49
00:02:17,140 --> 00:02:19,390
Let's build a team
of packages to do

50
00:02:19,390 --> 00:02:23,140
the jobs that help our org
answer impactful questions

51
00:02:23,140 --> 00:02:25,270
with efficient workflows.

52
00:02:25,270 --> 00:02:28,270
So, what sort of teammate
should our packages be?

53
00:02:28,270 --> 00:02:30,090
Let's meet a few.

54
00:02:30,090 --> 00:02:33,660
First, I'd like to
introduce you to the IT guy.

55
00:02:33,660 --> 00:02:36,420
Think of a helpful or friendly
IT or dev-ops colleague

56
00:02:36,420 --> 00:02:37,650
that you may know.

57
00:02:37,650 --> 00:02:40,710
They're fantastic at handling
the quirks of infrastructure

58
00:02:40,710 --> 00:02:42,575
and abstracting away
all the sorts of things

59
00:02:42,575 --> 00:02:44,700
that data scientists don't
want to spend their time

60
00:02:44,700 --> 00:02:48,650
thinking about, like proxies,
connections, servers, et

61
00:02:48,650 --> 00:02:49,770
cetera.

62
00:02:49,770 --> 00:02:51,870
In that extraction
process, they also

63
00:02:51,870 --> 00:02:53,910
take on additional
responsibilities

64
00:02:53,910 --> 00:02:57,300
to promote good practices, like
data security and credential

65
00:02:57,300 --> 00:02:58,590
management.

66
00:02:58,590 --> 00:03:01,410
Ideally, they can save us a
lot of time and frustration

67
00:03:01,410 --> 00:03:03,480
in navigating
organization-specific

68
00:03:03,480 --> 00:03:06,810
roadblocks that no amount of
searching on Stack Overflow

69
00:03:06,810 --> 00:03:08,530
can help.

70
00:03:08,530 --> 00:03:11,880
So, how can we encode these
characteristics in a package?

71
00:03:11,880 --> 00:03:14,460
Providing utility
functions can help achieve

72
00:03:14,460 --> 00:03:16,560
that same type of abstraction.

73
00:03:16,560 --> 00:03:19,620
And in these functions, we
can take an opinionated stance

74
00:03:19,620 --> 00:03:22,300
and craft helpful
error messages.

75
00:03:22,300 --> 00:03:24,810
Let's take a look at an example.

76
00:03:24,810 --> 00:03:27,440
Suppose we want to write a
function to connect ourselves

77
00:03:27,440 --> 00:03:29,320
to a database.

78
00:03:29,320 --> 00:03:32,250
First, we might start out with
a rather boilerplate piece

79
00:03:32,250 --> 00:03:35,220
of code using the DBI package.

80
00:03:35,220 --> 00:03:38,250
We take in the user name and
password, hard code the driver

81
00:03:38,250 --> 00:03:43,310
name, server location, port, and
return the connection object.

82
00:03:43,310 --> 00:03:45,820
Now, let's suppose
our organization has

83
00:03:45,820 --> 00:03:48,400
strict rules against
putting secure credentials

84
00:03:48,400 --> 00:03:51,130
in plain text, as
well they should.

85
00:03:51,130 --> 00:03:53,200
In an open-source
package, I wouldn't

86
00:03:53,200 --> 00:03:57,610
presume to force users hands to
use one specific system set up.

87
00:03:57,610 --> 00:04:01,120
However, in this case, we
can make strong assumptions

88
00:04:01,120 --> 00:04:05,440
based on our knowledge of an
organization's rules and norms.

89
00:04:05,440 --> 00:04:07,900
And this sort of function
can be great leverage

90
00:04:07,900 --> 00:04:10,660
to incentivize users
to do the right thing,

91
00:04:10,660 --> 00:04:13,900
like storing their credentials
in environment variables.

92
00:04:13,900 --> 00:04:17,079
Because it's the only way they
can get the function to work.

93
00:04:17,079 --> 00:04:20,290
Of course, that's only helpful
if we provide descriptive error

94
00:04:20,290 --> 00:04:22,990
messages when the user does not
have their credentials set up

95
00:04:22,990 --> 00:04:24,100
this way.

96
00:04:24,100 --> 00:04:27,760
Otherwise, they'll get an
error that DB_PSS is missing,

97
00:04:27,760 --> 00:04:30,100
find nothing useful online
to help them troubleshoot

98
00:04:30,100 --> 00:04:32,980
since this is an internal
choice that we made.

99
00:04:32,980 --> 00:04:36,130
So we can enhance this function
with an extremely custom

100
00:04:36,130 --> 00:04:38,380
and prescriptive error
message explaining

101
00:04:38,380 --> 00:04:41,680
what went wrong and
either how to fix it

102
00:04:41,680 --> 00:04:45,070
or where we can get
more information.

103
00:04:45,070 --> 00:04:47,860
Of course, even better
than explaining errors

104
00:04:47,860 --> 00:04:50,470
is preventing them
from occurring at all.

105
00:04:50,470 --> 00:04:53,470
We might also know at
specific organization

106
00:04:53,470 --> 00:04:57,580
that non-alphanumeric characters
are required in passwords

107
00:04:57,580 --> 00:05:00,910
and the DB_CONNECT doesn't
natively encode these correctly

108
00:05:00,910 --> 00:05:03,280
when passing them
to the database.

109
00:05:03,280 --> 00:05:05,410
Instead of troubling the
user and telling them

110
00:05:05,410 --> 00:05:07,540
how to put their
password, we can instead

111
00:05:07,540 --> 00:05:10,960
handle this silently
inside of the function.

112
00:05:10,960 --> 00:05:14,220
However, strong opinions
in complete independence

113
00:05:14,220 --> 00:05:16,680
don't always make
a great colleague.

114
00:05:16,680 --> 00:05:19,140
Other times, we might
want someone more

115
00:05:19,140 --> 00:05:20,640
like a junior analyst.

116
00:05:20,640 --> 00:05:22,770
They know a good bit
about the organization.

117
00:05:22,770 --> 00:05:27,180
And we can trust them to execute
calculations correctly and make

118
00:05:27,180 --> 00:05:28,650
reasonable assumptions.

119
00:05:28,650 --> 00:05:30,570
At the same time,
we want them to be

120
00:05:30,570 --> 00:05:33,480
responsive to our feedback
and willing to try things out

121
00:05:33,480 --> 00:05:35,220
in more ways than one.

122
00:05:35,220 --> 00:05:39,300
So, how can we capture these
jobs in an internal package?

123
00:05:39,300 --> 00:05:42,720
We can build interactive
yet responsive functions

124
00:05:42,720 --> 00:05:47,970
with default arguments, reserved
keywords, and the ellipsis.

125
00:05:47,970 --> 00:05:51,420
To illustrate, imagine a
basic visualization function

126
00:05:51,420 --> 00:05:54,960
that reacts ggplot to code
but allows users to input

127
00:05:54,960 --> 00:05:57,750
their preferred x, y,
and grouping variables

128
00:05:57,750 --> 00:05:59,940
to draw cohort curves.

129
00:05:59,940 --> 00:06:01,590
This function's fine.

130
00:06:01,590 --> 00:06:04,620
But we can probably draw
on institutional knowledge

131
00:06:04,620 --> 00:06:09,115
to push our junior analyst to be
a little bit more interactive.

132
00:06:09,115 --> 00:06:11,560
If we relied on the
same opinionated design

133
00:06:11,560 --> 00:06:15,190
as the IT guy, we might consider
putting some of the variables

134
00:06:15,190 --> 00:06:16,840
inside of the function.

135
00:06:16,840 --> 00:06:19,690
Here though, that
isn't a great approach,

136
00:06:19,690 --> 00:06:22,510
it isn't the junior
analyst's job to give edicts.

137
00:06:22,510 --> 00:06:26,320
We might know what the desired
x-axis will be 80% of the time,

138
00:06:26,320 --> 00:06:28,750
but hard coding here is
too strong of an assumption

139
00:06:28,750 --> 00:06:33,410
and decreases the usefulness of the
function for that other 20%.

140
00:06:33,410 --> 00:06:36,170
Instead, we can put
our best guess 80%

141
00:06:36,170 --> 00:06:39,230
right names as the default
arguments in the function

142
00:06:39,230 --> 00:06:42,140
header, ordered by decreasing
likelihood of the need

143
00:06:42,140 --> 00:06:43,580
to override.

144
00:06:43,580 --> 00:06:46,550
This means when users do
not provide their own value,

145
00:06:46,550 --> 00:06:48,180
a default is used.

146
00:06:48,180 --> 00:06:50,930
That's the junior
analyst's best guess,

147
00:06:50,930 --> 00:06:53,180
but users retain
complete control

148
00:06:53,180 --> 00:06:56,410
to change it as they see fit.

149
00:06:56,410 --> 00:06:59,700
This approach becomes even more
powerful if we can abstract out

150
00:06:59,700 --> 00:07:03,720
a small set of incredibly
common, frequently occurring,

151
00:07:03,720 --> 00:07:06,900
assumed variable
names or other values.

152
00:07:06,900 --> 00:07:08,820
We can define and
document this set

153
00:07:08,820 --> 00:07:11,250
of keywords, or
special variable names,

154
00:07:11,250 --> 00:07:14,100
that span all of our
internal packages.

155
00:07:14,100 --> 00:07:16,590
If these are well known
and well documented,

156
00:07:16,590 --> 00:07:19,640
users will get into the habit
of shaping their data so it

157
00:07:19,640 --> 00:07:22,230
plays nice with the
package ecosystem

158
00:07:22,230 --> 00:07:24,760
and saves a lot
of manual typing.

159
00:07:24,760 --> 00:07:27,550
This type of incentive
to standardize filenames

160
00:07:27,550 --> 00:07:29,620
can have other
convenient consequences

161
00:07:29,620 --> 00:07:32,230
in making data
extracts more shareable

162
00:07:32,230 --> 00:07:34,660
and code more readable.

163
00:07:34,660 --> 00:07:36,880
Finally, one other
nice trick in making

164
00:07:36,880 --> 00:07:38,860
our functions
responsive to feedback

165
00:07:38,860 --> 00:07:41,900
is the ellipsis, or
passing the dots.

166
00:07:41,900 --> 00:07:44,620
This allows users to provide
any number of arbitrary

167
00:07:44,620 --> 00:07:48,490
additional arguments beyond what
was specified by the developer

168
00:07:48,490 --> 00:07:50,680
and plugs them in
at a designated

169
00:07:50,680 --> 00:07:53,430
place in the function body.

170
00:07:53,430 --> 00:07:55,920
This way users can
extend functions

171
00:07:55,920 --> 00:07:58,110
based on needs that
the developer could not

172
00:07:58,110 --> 00:08:01,340
have anticipated, like
customizing the color, size,

173
00:08:01,340 --> 00:08:04,120
and line type.

174
00:08:04,120 --> 00:08:08,110
So far, we've mostly focused
on that first dimension,

175
00:08:08,110 --> 00:08:11,140
making our package
teammates targeted solving

176
00:08:11,140 --> 00:08:13,650
specific internal problems.

177
00:08:13,650 --> 00:08:16,440
But there's just as much value
in that second dimension,

178
00:08:16,440 --> 00:08:20,220
using internal packages as a way
to ship not just calculations,

179
00:08:20,220 --> 00:08:23,190
but workflows and to share
an understanding of how

180
00:08:23,190 --> 00:08:25,770
the broader
organization operates.

181
00:08:25,770 --> 00:08:29,370
To illustrate this, consider
our intrepid tech lead.

182
00:08:29,370 --> 00:08:31,470
We value this type of
teammate because they

183
00:08:31,470 --> 00:08:33,690
can draw from a breadth
of past experience

184
00:08:33,690 --> 00:08:36,900
and institutional knowledge
to help you weigh trade offs,

185
00:08:36,900 --> 00:08:39,120
learn from corrupted
wisdom, and inspire

186
00:08:39,120 --> 00:08:41,169
you to do your best work.

187
00:08:41,169 --> 00:08:43,950
So, that's a pretty tall
order to put in a package,

188
00:08:43,950 --> 00:08:46,890
but conscientious use of
vignettes and templates

189
00:08:46,890 --> 00:08:49,620
can help us towards this goal.

190
00:08:49,620 --> 00:08:52,470
Vignettes often help
introduce basic functionality

191
00:08:52,470 --> 00:08:57,180
of a package with a toy example,
as found in the dplyr vignette,

192
00:08:57,180 --> 00:09:00,660
or less commonly they may
discuss the statistical method

193
00:09:00,660 --> 00:09:04,480
that's implemented, as done
in the survival package.

194
00:09:04,480 --> 00:09:06,370
Vignettes of an
internal R package

195
00:09:06,370 --> 00:09:09,220
can do more diverse
numerous jobs.

196
00:09:09,220 --> 00:09:12,940
These vignettes can accumulate
the hard-won experience

197
00:09:12,940 --> 00:09:15,660
and domain knowledge like
an experienced tech lead's

198
00:09:15,660 --> 00:09:19,570
photographic memory, and they
hand deliver these insights

199
00:09:19,570 --> 00:09:23,440
to anyone currently working
on a related analysis.

200
00:09:23,440 --> 00:09:26,890
Just as a few examples,
you can consider

201
00:09:26,890 --> 00:09:30,310
having completely code free
vignettes that conceptually

202
00:09:30,310 --> 00:09:34,030
introduce you to common problem
that your package solves,

203
00:09:34,030 --> 00:09:36,490
explain the workflow
and key questions you

204
00:09:36,490 --> 00:09:38,680
should be asking
yourself along the way,

205
00:09:38,680 --> 00:09:41,920
and even potentially get
into procedural weeds--

206
00:09:41,920 --> 00:09:46,510
like what you need to do to
add features or deploy a model.

207
00:09:46,510 --> 00:09:48,610
Then, after aligning
with your users

208
00:09:48,610 --> 00:09:50,260
on a conceptual
framework, you may

209
00:09:50,260 --> 00:09:52,840
introduce the package's
functionality and explain

210
00:09:52,840 --> 00:09:54,880
how those two overlap.

211
00:09:54,880 --> 00:09:56,560
When your package
contains functions

212
00:09:56,560 --> 00:09:58,670
for many different
ways to do a task,

213
00:09:58,670 --> 00:10:00,370
you can also compare
pros and cons

214
00:10:00,370 --> 00:10:02,970
and explain different situations
where different ones have

215
00:10:02,970 --> 00:10:05,520
proven more or less effective.

216
00:10:05,520 --> 00:10:08,330
Finally, vignettes can also
include lessons learned,

217
00:10:08,330 --> 00:10:12,380
reflections from past users,
and references to past examples

218
00:10:12,380 --> 00:10:16,220
to help analysts learn
about similar projects.

219
00:10:16,220 --> 00:10:20,480
In fact, all of that context
may be so helpful even to people

220
00:10:20,480 --> 00:10:22,760
that are not direct
users of your package,

221
00:10:22,760 --> 00:10:25,220
they may want to seek
it's much mentorship.

222
00:10:25,220 --> 00:10:27,980
In this case, you can use
the pkgdown package

223
00:10:27,980 --> 00:10:30,770
to automatically create a
package website to share

224
00:10:30,770 --> 00:10:33,440
these vignettes with anyone
who needs to learn more

225
00:10:33,440 --> 00:10:35,810
about a specific problem space.

226
00:10:35,810 --> 00:10:38,120
With a single function
call, your package

227
00:10:38,120 --> 00:10:40,620
can share it's
wisdom more broadly.

228
00:10:40,620 --> 00:10:43,140
And, unlike their
human counterparts,

229
00:10:43,140 --> 00:10:47,790
the package tech lead can always
find time for another meeting.

230
00:10:47,790 --> 00:10:50,340
Similar to vignettes,
embedded templates

231
00:10:50,340 --> 00:10:52,620
take on a more important
and distinctive role

232
00:10:52,620 --> 00:10:54,610
for internal packages.

233
00:10:54,610 --> 00:10:57,490
In open source packages,
R Markdown templates

234
00:10:57,490 --> 00:11:01,240
provide a prepopulated file,
instead of the default.

235
00:11:01,240 --> 00:11:04,330
This is most commonly used to
demonstrate proper formatting

236
00:11:04,330 --> 00:11:05,390
syntax.

237
00:11:05,390 --> 00:11:07,960
For example, the
flexdashboard package

238
00:11:07,960 --> 00:11:11,410
uses a template so users how
to set up the yaml metadata

239
00:11:11,410 --> 00:11:14,230
and section headers.

240
00:11:14,230 --> 00:11:18,340
Instead, internal packages can
use templates to coach users

241
00:11:18,340 --> 00:11:20,260
through workflows
because they understand

242
00:11:20,260 --> 00:11:22,750
the problems users are
facing and the progress

243
00:11:22,750 --> 00:11:24,250
they hope to achieve.

244
00:11:24,250 --> 00:11:27,730
Internal packages can mentor
users and structure their work

245
00:11:27,730 --> 00:11:29,520
in two different ways.

246
00:11:29,520 --> 00:11:32,920
Process walkthroughs can
serve as interactive notebooks

247
00:11:32,920 --> 00:11:35,890
that coach users
through common analyses.

248
00:11:35,890 --> 00:11:38,920
As an example, if
a type of analysis

249
00:11:38,920 --> 00:11:41,470
requires manual data
cleaning and curation,

250
00:11:41,470 --> 00:11:43,660
a template notebook
can guide users

251
00:11:43,660 --> 00:11:45,640
to ask the right
questions of their data

252
00:11:45,640 --> 00:11:48,900
and generate common views
they need to analyze.

253
00:11:48,900 --> 00:11:52,320
We can also include full end-
to-end analysis outlines which

254
00:11:52,320 --> 00:11:54,840
include placeholder
text, commentary,

255
00:11:54,840 --> 00:11:57,030
and code, if the
type of analysis

256
00:11:57,030 --> 00:11:59,400
that a package supports
usually results

257
00:11:59,400 --> 00:12:02,910
in a specific type of report.

258
00:12:02,910 --> 00:12:06,600
Similarly, our package can
include a project template, not

259
00:12:06,600 --> 00:12:08,730
just an R Markdown template.

260
00:12:08,730 --> 00:12:12,090
These templates can predefine
a standard file structure

261
00:12:12,090 --> 00:12:14,970
and a boilerplate set of
files for a new project

262
00:12:14,970 --> 00:12:18,240
to give users a helping hand and
drive the kind of consistency

263
00:12:18,240 --> 00:12:20,670
across projects that
any tech lead dreams

264
00:12:20,670 --> 00:12:23,360
of when doing a code review.

265
00:12:23,360 --> 00:12:25,400
Speaking of
collaboration brings us

266
00:12:25,400 --> 00:12:28,160
to the last teammate whose
traits we want our package

267
00:12:28,160 --> 00:12:30,830
to evoke, the project manager.

268
00:12:30,830 --> 00:12:33,170
One of the biggest
differences between task-

269
00:12:33,170 --> 00:12:35,750
doing versus problem-
solving packages

270
00:12:35,750 --> 00:12:37,950
is understanding
the whole workflow

271
00:12:37,950 --> 00:12:39,680
and helping
coordinate the project

272
00:12:39,680 --> 00:12:41,960
across different components.

273
00:12:41,960 --> 00:12:43,910
When writing open
source packages,

274
00:12:43,910 --> 00:12:47,810
we rightly assume that our
intended audience is R users,

275
00:12:47,810 --> 00:12:50,690
but on a true cross-functional
internal team,

276
00:12:50,690 --> 00:12:53,270
not everyone will be,
so we can intentionally

277
00:12:53,270 --> 00:12:55,550
modularize the
workflow and think

278
00:12:55,550 --> 00:12:59,030
about how to augment
RStudio's IDE to make sure

279
00:12:59,030 --> 00:13:03,510
our tools work well with
all of our colleagues.

280
00:13:03,510 --> 00:13:06,050
One way to do this
is with modularizing

281
00:13:06,050 --> 00:13:07,680
the parts of the
workflow that really

282
00:13:07,680 --> 00:13:10,380
do or do not require R code.

283
00:13:10,380 --> 00:13:13,560
For example, in the
templates we just discussed,

284
00:13:13,560 --> 00:13:15,810
we could actually make
separate template components

285
00:13:15,810 --> 00:13:17,790
for the parts that
require R code

286
00:13:17,790 --> 00:13:22,170
and for the parts that are just
English text and commentary.

287
00:13:22,170 --> 00:13:26,400
The commentary files can be
plain vanilla Markdown files

288
00:13:26,400 --> 00:13:28,440
that any collaborator
could edit without even

289
00:13:28,440 --> 00:13:30,210
having to have R installed.

290
00:13:30,210 --> 00:13:33,120
And the main R Markdown
can pull in this plain text

291
00:13:33,120 --> 00:13:35,900
output using child documents.

292
00:13:35,900 --> 00:13:37,910
This approach is
now made even easier

293
00:13:37,910 --> 00:13:40,700
with advances in
the RStudio IDE.

294
00:13:40,700 --> 00:13:43,910
The visual Markdown editor
provides a great graphical user

295
00:13:43,910 --> 00:13:46,070
interface to support
word-processing

296
00:13:46,070 --> 00:13:49,550
in Markdown for those plain
text narrative documents

297
00:13:49,550 --> 00:13:51,350
that we just discussed.

298
00:13:51,350 --> 00:13:55,940
We can also use RStudio add-ins
to extend the RStudio interface

299
00:13:55,940 --> 00:13:59,390
and ship interactive widgets
in our internal packages.

300
00:13:59,390 --> 00:14:02,420
To illustrate, I've shown the
point and click plot coding

301
00:14:02,420 --> 00:14:06,310
assistant from the open
source esquisse package.

302
00:14:06,310 --> 00:14:08,470
Add-ins require more
investment upfront

303
00:14:08,470 --> 00:14:10,120
but they're much
easier to maintain

304
00:14:10,120 --> 00:14:11,770
than a full application.

305
00:14:11,770 --> 00:14:15,160
And they can help convert
teammates to R users.

306
00:14:15,160 --> 00:14:17,680
Besides, a good
project manager is

307
00:14:17,680 --> 00:14:21,760
willing to go that extra
mile to support their team.

308
00:14:21,760 --> 00:14:24,490
Now, speaking of
collaboration, we've

309
00:14:24,490 --> 00:14:27,010
talked about what can
make an individual package

310
00:14:27,010 --> 00:14:30,570
a good teammate, another
major opportunity when

311
00:14:30,570 --> 00:14:32,460
building a suite
of internal tools

312
00:14:32,460 --> 00:14:36,390
is that we can think about how
multiple packages on our team

313
00:14:36,390 --> 00:14:38,620
can best work together.

314
00:14:38,620 --> 00:14:41,460
We want teammates that
are clear communicators,

315
00:14:41,460 --> 00:14:46,690
have defined responsibilities,
and keep their promises.

316
00:14:46,690 --> 00:14:50,170
We can help packages be
these sorts of good teammates

317
00:14:50,170 --> 00:14:52,390
with naming conventions,
clearly defined

318
00:14:52,390 --> 00:14:58,420
scopes, and careful attention
to dependencies and testing.

319
00:14:58,420 --> 00:15:00,130
Clear function
naming conventions

320
00:15:00,130 --> 00:15:03,400
and consistent method signatures
help packages effectively

321
00:15:03,400 --> 00:15:07,920
communicate with both package
and human collaborators.

322
00:15:07,920 --> 00:15:11,340
Internally, we can give our
suite of internal packages

323
00:15:11,340 --> 00:15:15,810
a richer language by defining
a consistent set of prefixes

324
00:15:15,810 --> 00:15:17,880
through name stubs
that indicate how

325
00:15:17,880 --> 00:15:19,860
each function is to be used.

326
00:15:19,860 --> 00:15:22,950
One approach I like is
that each function prefix

327
00:15:22,950 --> 00:15:26,460
can denote the type of object
that that function will return.

328
00:15:26,460 --> 00:15:30,150
For example, using viz
prefixes for functions

329
00:15:30,150 --> 00:15:32,790
that return ggplot2 objects.

330
00:15:32,790 --> 00:15:34,950
This way, past
experience working

331
00:15:34,950 --> 00:15:36,900
with one internal
package seamlessly

332
00:15:36,900 --> 00:15:39,740
translates to the next.

333
00:15:39,740 --> 00:15:41,980
Another aspect of good
team communication

334
00:15:41,980 --> 00:15:45,370
is having clearly defined
roles and responsibilities.

335
00:15:45,370 --> 00:15:49,090
Again, since we own our whole
internal stack of packages,

336
00:15:49,090 --> 00:15:50,740
we have more freedom
in how we can

337
00:15:50,740 --> 00:15:52,690
choose to divide
up functionality

338
00:15:52,690 --> 00:15:56,450
and responsibilities
across packages.

339
00:15:56,450 --> 00:15:58,250
Take for example,
the data science

340
00:15:58,250 --> 00:16:02,100
workflow as described in
the R for Data Science book.

341
00:16:02,100 --> 00:16:05,790
Open source packages inevitably
have overlapping functionality,

342
00:16:05,790 --> 00:16:08,760
which forces users to compare
alternatives and decide

343
00:16:08,760 --> 00:16:10,440
which is best.

344
00:16:10,440 --> 00:16:13,560
Internally, we can use some
amount of central planning

345
00:16:13,560 --> 00:16:17,370
to ensure each package teammate
has a clearly defined role,

346
00:16:17,370 --> 00:16:20,070
whether that be to provide
a horizontal utility

347
00:16:20,070 --> 00:16:23,680
or to enable progress on
a specific work stream.

348
00:16:23,680 --> 00:16:26,860
And just like one team ought
to work well with another,

349
00:16:26,860 --> 00:16:30,340
that central planning can
include curation and promotion

350
00:16:30,340 --> 00:16:33,670
of open source tools along
with our internal ones.

351
00:16:33,670 --> 00:16:38,090
After all, no one team
can do it all alone.

352
00:16:38,090 --> 00:16:41,090
When assigning these roles
to our team of packages,

353
00:16:41,090 --> 00:16:45,313
we should consider how to manage
the dependencies between them

354
00:16:45,313 --> 00:16:46,730
when different
functionality needs

355
00:16:46,730 --> 00:16:49,500
to be shared across packages.

356
00:16:49,500 --> 00:16:52,170
Packages often have
direct dependencies

357
00:16:52,170 --> 00:16:55,660
where a function in one package
calls a function in another.

358
00:16:55,660 --> 00:16:58,350
This is not necessarily
bad, but especially

359
00:16:58,350 --> 00:17:00,840
with internal packages,
which might sometimes

360
00:17:00,840 --> 00:17:03,900
have a shorter shelf life
and fewer developers,

361
00:17:03,900 --> 00:17:06,510
this can sometimes
create a domino effect.

362
00:17:06,510 --> 00:17:10,170
If one package is deprecated,
or decides to retire or take

363
00:17:10,170 --> 00:17:14,670
a vacation, we don't want the
rest of our ecosystem affected.

364
00:17:14,670 --> 00:17:17,099
Alternatively, we
can use the fact

365
00:17:17,099 --> 00:17:20,400
that both packages A and
B are under our control

366
00:17:20,400 --> 00:17:23,250
to see if we can eliminate
the explicit dependency

367
00:17:23,250 --> 00:17:25,470
by promoting a clean handoff.

368
00:17:25,470 --> 00:17:28,500
We can see if a function
in A can produce an output

369
00:17:28,500 --> 00:17:33,040
that B can consume instead of
calling A's function directly.

370
00:17:33,040 --> 00:17:35,540
Additionally, because
we own the full stack,

371
00:17:35,540 --> 00:17:39,820
we may also consider if there
are shared needs in A and B

372
00:17:39,820 --> 00:17:42,610
that should be extracted
into a common building block

373
00:17:42,610 --> 00:17:46,780
package C. For instance, a
set of common visualization

374
00:17:46,780 --> 00:17:49,990
function primitives,
this way we at least have

375
00:17:49,990 --> 00:17:52,450
a clear hierarchy of
dependencies instead

376
00:17:52,450 --> 00:17:55,600
of a spiderweb and can identify
a small number of truly

377
00:17:55,600 --> 00:17:57,630
essential ones.

378
00:17:57,630 --> 00:18:00,480
Regardless of the type of
dependencies we end up with,

379
00:18:00,480 --> 00:18:03,180
we can use tests to make
sure our packages are

380
00:18:03,180 --> 00:18:07,140
reliable teammates who
do what they promised.

381
00:18:07,140 --> 00:18:10,890
Typically, if I write package
B that depends on package A,

382
00:18:10,890 --> 00:18:13,650
I can only control
package B's tests.

383
00:18:13,650 --> 00:18:16,080
So, I could write tests
to see if A continues

384
00:18:16,080 --> 00:18:18,820
to perform as B is expecting.

385
00:18:18,820 --> 00:18:21,600
This is a good safeguard but
it means that we will only

386
00:18:21,600 --> 00:18:25,350
detect problems after they've
already been introduced in A.

387
00:18:25,350 --> 00:18:27,120
There's nothing in
place to actually stop

388
00:18:27,120 --> 00:18:30,760
package A from getting
distracted in the first place.

389
00:18:30,760 --> 00:18:33,925
Instead, we prefer
that both A and B

390
00:18:33,925 --> 00:18:36,730
be conscientious of the
promises they've made

391
00:18:36,730 --> 00:18:40,360
and stay committed to working
towards their shared goal.

392
00:18:40,360 --> 00:18:43,730
We can formalize that shared
vision with integration tests,

393
00:18:43,730 --> 00:18:45,700
that is, we can
add tests to both

394
00:18:45,700 --> 00:18:48,550
the upstream and the
downstream packages

395
00:18:48,550 --> 00:18:51,720
to ensure they continue to check
in with each other and inquire

396
00:18:51,720 --> 00:18:54,850
of any of the changes they're
planning could be disruptive.

397
00:18:54,850 --> 00:18:57,730
Now, just imagine having
such rigorous and ongoing

398
00:18:57,730 --> 00:19:02,050
communication and prioritization
with your own teammates.

399
00:19:02,050 --> 00:19:06,010
In summary, we all know the joy
of working with a great team,

400
00:19:06,010 --> 00:19:08,440
and, given that you're
here right now,

401
00:19:08,440 --> 00:19:11,170
I suspect you know the pleasure
of cracking open a new R

402
00:19:11,170 --> 00:19:12,310
package.

403
00:19:12,310 --> 00:19:15,010
By taking advantage of
the unique opportunities

404
00:19:15,010 --> 00:19:17,110
of designing
internal packages we

405
00:19:17,110 --> 00:19:19,490
can achieve the
best of both worlds.

406
00:19:19,490 --> 00:19:21,820
We can share the fun of
working with good tools

407
00:19:21,820 --> 00:19:26,140
with the teammates we care about
and we can elevate those tools

408
00:19:26,140 --> 00:19:29,260
to full fledged teammates by
giving them the skills they

409
00:19:29,260 --> 00:19:30,890
need to succeed.

410
00:19:30,890 --> 00:19:32,640
Thank you.
