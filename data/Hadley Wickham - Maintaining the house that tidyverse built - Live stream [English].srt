1
00:00:07,150 --> 00:00:07,870
Hi.

2
00:00:07,870 --> 00:00:09,670
I'm Hadley Wickham,
and today, I'm

3
00:00:09,670 --> 00:00:11,680
excited to talk to you
about a topic that's near

4
00:00:11,680 --> 00:00:14,560
and dear to my heart,
code maintenance.

5
00:00:14,560 --> 00:00:17,140
This certainly isn't one
of the sexiest topics,

6
00:00:17,140 --> 00:00:19,550
but as your career in
programming advances,

7
00:00:19,550 --> 00:00:21,950
it becomes
increasingly important.

8
00:00:21,950 --> 00:00:24,430
And today I wanted to talk
about code maintenance

9
00:00:24,430 --> 00:00:26,680
through the lens of
home maintenance,

10
00:00:26,680 --> 00:00:29,680
because in many ways, I think
the tidyverse is a little bit

11
00:00:29,680 --> 00:00:31,510
like a hardware store.

12
00:00:31,510 --> 00:00:33,040
We don't build
the house for you.

13
00:00:33,040 --> 00:00:35,260
We don't do the data
analysis for you,

14
00:00:35,260 --> 00:00:38,420
but we provide you
the tools to do it.

15
00:00:38,420 --> 00:00:41,020
And like a good
hardware store, we also

16
00:00:41,020 --> 00:00:43,210
help you pick the right
tools and give you

17
00:00:43,210 --> 00:00:46,420
some education about how
to use them effectively.

18
00:00:46,420 --> 00:00:49,360
Now unlike most hardware
stores, we also develop.

19
00:00:49,360 --> 00:00:51,800
We also build many of
the tools that we sell,

20
00:00:51,800 --> 00:00:53,350
so we're also
listening to hear what

21
00:00:53,350 --> 00:00:55,120
your problems are with
the tools to learn

22
00:00:55,120 --> 00:00:58,060
how we can make them better.

23
00:00:58,060 --> 00:01:01,150
I've also been thinking about
code maintenance and home

24
00:01:01,150 --> 00:01:03,340
maintenance a little
bit more than usual

25
00:01:03,340 --> 00:01:06,100
lately because of a very
frustrating experience

26
00:01:06,100 --> 00:01:08,800
that I had recently.

27
00:01:08,800 --> 00:01:11,440
If you don't own your own
home, you might kind of

28
00:01:11,440 --> 00:01:14,590
think of houses as things
that just like exist,

29
00:01:14,590 --> 00:01:18,100
but in reality, they
generate a steady stream

30
00:01:18,100 --> 00:01:21,040
of small maintenance
tasks, and one

31
00:01:21,040 --> 00:01:22,690
that I needed to
tackle recently was

32
00:01:22,690 --> 00:01:25,367
a couple of exterior
lights stopped working.

33
00:01:25,367 --> 00:01:26,950
And so I thought,
you know, this seems

34
00:01:26,950 --> 00:01:28,040
like a pretty simple task.

35
00:01:28,040 --> 00:01:30,250
This should be something
I can tackle by myself.

36
00:01:30,250 --> 00:01:34,150
It'll take maybe an hour or
two and a trip to Home Depot.

37
00:01:34,150 --> 00:01:36,310
Four hours and three
trips to Home Depot

38
00:01:36,310 --> 00:01:40,360
later, I gave up frustrated
and extremely angry.

39
00:01:40,360 --> 00:01:42,490
And so the first
thing I want to talk

40
00:01:42,490 --> 00:01:46,480
about today is how do you deal
with that frustration that

41
00:01:46,480 --> 00:01:48,610
comes up while
doing maintenance.

42
00:01:48,610 --> 00:01:51,100
Like how do you deal with all
those negative emotions that

43
00:01:51,100 --> 00:01:55,270
this thing that should
just work doesn't?

44
00:01:55,270 --> 00:01:57,970
And when I'm tackling a home
maintenance task like this

45
00:01:57,970 --> 00:02:00,520
and it's going wrong, I
often start telling myself

46
00:02:00,520 --> 00:02:02,290
these pretty negative stories.

47
00:02:02,290 --> 00:02:04,870
Like this is a
really simple task,

48
00:02:04,870 --> 00:02:08,680
and if I can't perform it,
then I must be an idiot.

49
00:02:08,680 --> 00:02:12,280
Or you know, I'm looking at the
documentation and the box that

50
00:02:12,280 --> 00:02:14,080
describes how to
install these lights,

51
00:02:14,080 --> 00:02:16,810
looking at what's on
the outside of my house,

52
00:02:16,810 --> 00:02:18,760
and they look nothing alike.

53
00:02:18,760 --> 00:02:21,400
Like the documentation
is utterly useless,

54
00:02:21,400 --> 00:02:24,850
like it must have been
an idiot who wrote this.

55
00:02:24,850 --> 00:02:27,280
Or at the end of those
four hours, you know,

56
00:02:27,280 --> 00:02:29,860
I just tell myself that
was a total waste of time.

57
00:02:29,860 --> 00:02:31,840
You will never get
those four hours back.

58
00:02:34,840 --> 00:02:38,050
And maybe you are much better
at home maintenance than I am.

59
00:02:38,050 --> 00:02:39,940
You almost certainly
are, but you

60
00:02:39,940 --> 00:02:42,130
might have experienced
some of these thoughts

61
00:02:42,130 --> 00:02:44,470
when dealing with
code maintenance,

62
00:02:44,470 --> 00:02:49,330
when dealing with the fact
that your code that worked fine

63
00:02:49,330 --> 00:02:52,690
a couple of years ago, hasn't
changed, but it breaks today

64
00:02:52,690 --> 00:02:54,790
and now you got to do
all of this extra work

65
00:02:54,790 --> 00:02:57,600
to get it working again.

66
00:02:57,600 --> 00:02:59,910
And I think a really
useful technique

67
00:02:59,910 --> 00:03:02,520
to deal with these emotions,
with these thoughts,

68
00:03:02,520 --> 00:03:05,250
is to have some kind of
rational canned responses

69
00:03:05,250 --> 00:03:06,520
you can tell yourself.

70
00:03:06,520 --> 00:03:08,850
So for me, it's telling
myself, well, you know,

71
00:03:08,850 --> 00:03:11,070
actually, I don't do that
much home maintenance.

72
00:03:11,070 --> 00:03:13,080
It's kind of unreasonable
to expect that I'd

73
00:03:13,080 --> 00:03:16,150
be an expert at it right away.

74
00:03:16,150 --> 00:03:21,790
Or you know, like there's no way
the documentation could explain

75
00:03:21,790 --> 00:03:24,790
what every single light looks
like on every single person's

76
00:03:24,790 --> 00:03:27,910
house in the world, so I can't
expect the documentation is

77
00:03:27,910 --> 00:03:30,460
going to apply exactly
to my situation,

78
00:03:30,460 --> 00:03:35,320
but it should contain some hints
so I can read it and take away

79
00:03:35,320 --> 00:03:37,540
some important messages.

80
00:03:37,540 --> 00:03:40,160
And then sure, I didn't
succeed in the goal,

81
00:03:40,160 --> 00:03:42,040
but it's not a waste of time.

82
00:03:42,040 --> 00:03:43,510
At least I've learnt
in the future,

83
00:03:43,510 --> 00:03:46,930
I need to budget more time,
and now I know where all

84
00:03:46,930 --> 00:03:48,920
the various bits and
pieces are at Home Depot,

85
00:03:48,920 --> 00:03:52,970
so I've saved some time
for the future as well.

86
00:03:52,970 --> 00:03:56,620
Now this technique comes from
cognitive behavioral therapy.

87
00:03:56,620 --> 00:03:59,560
It's a way of responding
to these automatic thoughts

88
00:03:59,560 --> 00:04:01,880
with kind of balanced
alternatives,

89
00:04:01,880 --> 00:04:04,210
and you can apply it yourself
in lots of situations.

90
00:04:04,210 --> 00:04:05,925
The main thing is
to, when you come up

91
00:04:05,925 --> 00:04:07,300
with these balanced
alternatives,

92
00:04:07,300 --> 00:04:09,880
it's very, very difficult
to do that in the moment.

93
00:04:09,880 --> 00:04:12,250
You want to sit down when
you're in a good place

94
00:04:12,250 --> 00:04:15,160
and think about some of these
negative thoughts that come up

95
00:04:15,160 --> 00:04:17,709
and how you can
argue against them.

96
00:04:17,709 --> 00:04:19,660
I learned about this
technique a few years ago

97
00:04:19,660 --> 00:04:25,210
when I read this book called
Feeling Good by David D. Burns.

98
00:04:25,210 --> 00:04:27,790
The whole idea of cognitive
behavioral therapy, I think,

99
00:04:27,790 --> 00:04:29,860
is really powerful,
because it gives you

100
00:04:29,860 --> 00:04:33,610
this toolkit for understanding
how your thoughts

101
00:04:33,610 --> 00:04:35,560
and emotions are
connected together

102
00:04:35,560 --> 00:04:37,870
and how by changing
your thoughts, sometimes

103
00:04:37,870 --> 00:04:39,685
you can succeed in
changing your emotions.

104
00:04:42,290 --> 00:04:44,720
Now that's obviously a very
general technique for dealing

105
00:04:44,720 --> 00:04:49,260
with frustration however
it arises in your life,

106
00:04:49,260 --> 00:04:51,320
but I think it's also
worth recognizing like,

107
00:04:51,320 --> 00:04:54,200
where does
frustration come from,

108
00:04:54,200 --> 00:04:56,210
because I think at the
heart of pretty much

109
00:04:56,210 --> 00:04:58,520
every frustration
is this conflict

110
00:04:58,520 --> 00:05:04,820
between what you want to be true
and some unyielding reality.

111
00:05:04,820 --> 00:05:09,320
And I think it's easy to
think like when you write code

112
00:05:09,320 --> 00:05:11,570
that you're creating
this monolith that

113
00:05:11,570 --> 00:05:16,250
will last 1,000 years, that you
wrote some code two years ago.

114
00:05:16,250 --> 00:05:18,920
You can tell your
code hasn't changed.

115
00:05:18,920 --> 00:05:22,080
Why doesn't it work today?

116
00:05:22,080 --> 00:05:25,730
And the reason is while your
code may not have changed,

117
00:05:25,730 --> 00:05:28,220
the world has changed around it.

118
00:05:28,220 --> 00:05:30,950
And instead of thinking about
code as this kind of monolith,

119
00:05:30,950 --> 00:05:33,840
I think it's better to think
about code more like a smoke

120
00:05:33,840 --> 00:05:34,340
alarm.

121
00:05:34,340 --> 00:05:36,560
It's something that needs
regular maintenance.

122
00:05:36,560 --> 00:05:38,450
You have to change the
batteries once a year

123
00:05:38,450 --> 00:05:41,450
and replace the whole
thing every 10 years.

124
00:05:41,450 --> 00:05:45,110
Now let's start to get into some
more of the details of dealing

125
00:05:45,110 --> 00:05:47,270
with change in code.

126
00:05:47,270 --> 00:05:50,300
And this is a place where the
metaphor of the hardware store

127
00:05:50,300 --> 00:05:53,360
starts to break down a little,
because once you've purchased

128
00:05:53,360 --> 00:05:56,540
something from the hardware
store, it stays the same,

129
00:05:56,540 --> 00:05:58,910
but when you use
code from a package,

130
00:05:58,910 --> 00:06:03,642
that code might work differently
when you update the package.

131
00:06:03,642 --> 00:06:06,590
On the whole, this is
normally a good thing.

132
00:06:06,590 --> 00:06:08,240
This is like the
package developer

133
00:06:08,240 --> 00:06:10,130
can come into your
house, replace

134
00:06:10,130 --> 00:06:14,570
all of those expensive,
inefficient, incandescent bulbs

135
00:06:14,570 --> 00:06:18,470
with new LED bulbs that
are much more efficient.

136
00:06:18,470 --> 00:06:19,880
You get new features.

137
00:06:19,880 --> 00:06:20,840
You get bug fixes.

138
00:06:20,840 --> 00:06:23,210
You get performance
improvements.

139
00:06:23,210 --> 00:06:27,650
But any updates to a package
also comes with a risk

140
00:06:27,650 --> 00:06:31,580
that it might break
your code, and I

141
00:06:31,580 --> 00:06:33,380
want to talk in a
little bit more detail

142
00:06:33,380 --> 00:06:36,410
about how we think about that,
particularly in the tidyverse.

143
00:06:36,410 --> 00:06:38,390
These ideas apply
in general, but I'm

144
00:06:38,390 --> 00:06:40,190
going to talk about
the kind of framework

145
00:06:40,190 --> 00:06:42,538
that we are using
currently in the tidyverse.

146
00:06:42,538 --> 00:06:45,080
And I want to talk a little bit
about the kind of set of

147
00:06:45,080 --> 00:06:50,120
promises, the tidyverse money
back guarantee, if you will,

148
00:06:50,120 --> 00:06:53,000
that we want to provide to
you so that you can better

149
00:06:53,000 --> 00:06:56,000
understand what is
likely to break your code

150
00:06:56,000 --> 00:06:58,640
and what's likely not
to break your code.

151
00:06:58,640 --> 00:07:00,590
And to do that, we
first have to talk

152
00:07:00,590 --> 00:07:04,040
a bit about the
tidyverse lifecycle.

153
00:07:04,040 --> 00:07:05,930
So you might have
seen this before

154
00:07:05,930 --> 00:07:09,020
because the documentation
of certain functions

155
00:07:09,020 --> 00:07:11,540
contains these
badges, like lifecycle

156
00:07:11,540 --> 00:07:15,260
deprecated or
lifecycle superseded.

157
00:07:15,260 --> 00:07:19,220
So the full tidyverse lifecycle
is relatively complicated,

158
00:07:19,220 --> 00:07:21,080
but today I wanted to
talk about the four

159
00:07:21,080 --> 00:07:24,980
most important components:
experimental, deprecated,

160
00:07:24,980 --> 00:07:27,620
stable and superseded.

161
00:07:27,620 --> 00:07:30,770
And you can kind of roughly
divide these in half

162
00:07:30,770 --> 00:07:33,590
by whether their functions
in these various stages

163
00:07:33,590 --> 00:07:37,280
are kind of out of
warranty or in warranty.

164
00:07:37,280 --> 00:07:40,280
I'll talk about what that
means precisely shortly,

165
00:07:40,280 --> 00:07:43,040
but roughly, you know, if the
function is out of warranty,

166
00:07:43,040 --> 00:07:44,870
it might change at any point.

167
00:07:44,870 --> 00:07:49,670
If it's in warranty, we make
some pretty strict promises

168
00:07:49,670 --> 00:07:51,330
about how it will change.

169
00:07:51,330 --> 00:07:54,420
So out of warranty, we've got
experimental on the one hand.

170
00:07:54,420 --> 00:07:57,170
These are new
functions, new features.

171
00:07:57,170 --> 00:07:59,030
We don't know exactly
how they should work,

172
00:07:59,030 --> 00:08:00,770
but we want to get
them out in the world

173
00:08:00,770 --> 00:08:03,350
so that you can try them
out and give us feedback.

174
00:08:03,350 --> 00:08:05,060
This is the type
of code that you

175
00:08:05,060 --> 00:08:07,603
need to have a pretty
close relationship with,

176
00:08:07,603 --> 00:08:09,020
you need to be
working with it a lot,

177
00:08:09,020 --> 00:08:12,980
because it's going to change
based on your feedback.

178
00:08:12,980 --> 00:08:16,490
Now most functions are
on a stable lifecycle.

179
00:08:16,490 --> 00:08:19,790
That means the developer is
basically happy with them

180
00:08:19,790 --> 00:08:23,150
and has no major plans
to change in the future.

181
00:08:23,150 --> 00:08:28,160
There's two ways that a function
can exit that stable lifecycle

182
00:08:28,160 --> 00:08:28,670
stage.

183
00:08:28,670 --> 00:08:31,640
It can become deprecated
which means basically

184
00:08:31,640 --> 00:08:33,679
that it's a bad idea.

185
00:08:33,679 --> 00:08:34,850
You should stop using it.

186
00:08:34,850 --> 00:08:36,409
Or it can become superseded.

187
00:08:36,409 --> 00:08:38,690
We know that there's
a better alternative

188
00:08:38,690 --> 00:08:41,090
but the old function
is not going away.

189
00:08:43,710 --> 00:08:46,250
So the first thing we're
going to guarantee,

190
00:08:46,250 --> 00:08:48,350
the first promise we're
going to make you,

191
00:08:48,350 --> 00:08:50,930
is we're going to try
and avoid as much as

192
00:08:50,930 --> 00:08:53,930
possible to make breaking
changes in any stable

193
00:08:53,930 --> 00:08:55,650
functions.

194
00:08:55,650 --> 00:08:59,580
So a breaking change is
a change that we expect,

195
00:08:59,580 --> 00:09:02,090
we predict, will break the
vast majority of correctly

196
00:09:02,090 --> 00:09:04,200
written code that uses it.

197
00:09:04,200 --> 00:09:07,440
So what are some examples
of breaking changes?

198
00:09:07,440 --> 00:09:09,810
Well, firstly, if you
remove a function,

199
00:09:09,810 --> 00:09:12,570
obviously any code
that uses that function

200
00:09:12,570 --> 00:09:13,890
is going to break.

201
00:09:13,890 --> 00:09:16,140
Or if you remove an
argument to a function,

202
00:09:16,140 --> 00:09:18,210
any code that uses the argument.

203
00:09:18,210 --> 00:09:22,140
Or if you decrease the set of
allowed inputs to an argument,

204
00:09:22,140 --> 00:09:24,040
that's also going
to break some code.

205
00:09:24,040 --> 00:09:26,400
So in general,
making a function,

206
00:09:26,400 --> 00:09:28,650
the scope of a function
kind of smaller,

207
00:09:28,650 --> 00:09:33,120
is going to be a breaking change
because code that works today

208
00:09:33,120 --> 00:09:37,235
will not work after
this change happens.

209
00:09:37,235 --> 00:09:38,860
Now as well as the
input to a function,

210
00:09:38,860 --> 00:09:39,940
there's also the output.

211
00:09:39,940 --> 00:09:44,125
Changing the type of
the output of a function

212
00:09:44,125 --> 00:09:45,730
is also a breaking change.

213
00:09:45,730 --> 00:09:48,250
If a function previously
retained a numeric vector

214
00:09:48,250 --> 00:09:52,420
and now it retains a data
frame, it's likely to break.

215
00:09:52,420 --> 00:09:54,430
So what are
non-breaking changes?

216
00:09:54,430 --> 00:09:56,590
Well, of course, we
can change the output

217
00:09:56,590 --> 00:09:58,870
because we have to
be able to fix bugs,

218
00:09:58,870 --> 00:10:01,150
and this means that
technically, something

219
00:10:01,150 --> 00:10:03,400
that's a non-breaking
change can still

220
00:10:03,400 --> 00:10:05,740
actually break your code
if you've accidentally

221
00:10:05,740 --> 00:10:07,610
depended on a bug.

222
00:10:07,610 --> 00:10:09,100
So this is a really
important topic

223
00:10:09,100 --> 00:10:11,020
that I may come
back to later when

224
00:10:11,020 --> 00:10:15,340
we talk about off-label
usage of functions.

225
00:10:15,340 --> 00:10:18,160
Otherwise, non-breaking
changes are generally

226
00:10:18,160 --> 00:10:20,860
increasing the scope of
things, so increasing

227
00:10:20,860 --> 00:10:24,250
the possible set of allowed
inputs, adding new arguments

228
00:10:24,250 --> 00:10:25,380
or adding new functions.

229
00:10:25,380 --> 00:10:27,520
So anything that
grows the interface

230
00:10:27,520 --> 00:10:29,380
of a function or
a package is going

231
00:10:29,380 --> 00:10:33,040
to be a non-breaking change.

232
00:10:33,040 --> 00:10:36,280
Now sometimes, we will have
to make a breaking change

233
00:10:36,280 --> 00:10:39,670
to a function that is
stable, but we're never

234
00:10:39,670 --> 00:10:42,070
going to do that suddenly.

235
00:10:42,070 --> 00:10:46,332
We're going to do it through a
gradual process of deprecation.

236
00:10:46,332 --> 00:10:48,790
We're going to give you a chance
to find out that something

237
00:10:48,790 --> 00:10:50,950
is changing and
respond to that change

238
00:10:50,950 --> 00:10:53,243
before we take it away for good.

239
00:10:53,243 --> 00:10:54,410
So what does that look like?

240
00:10:54,410 --> 00:10:57,130
Well, let's take a function
from the tibble package called

241
00:10:57,130 --> 00:10:59,260
data_frame.

242
00:10:59,260 --> 00:11:02,980
Now we, probably I,
created this function

243
00:11:02,980 --> 00:11:06,400
when we just started working
with the idea of tibbles,

244
00:11:06,400 --> 00:11:09,310
and because tibbles are kind
of like a modern reimagining

245
00:11:09,310 --> 00:11:11,140
of a data frame,
I thought, well,

246
00:11:11,140 --> 00:11:14,485
let's give it a modern
name by taking the dot

247
00:11:14,485 --> 00:11:17,015
and replacing it
with an underscore.

248
00:11:17,015 --> 00:11:18,640
Now, pretty soon
afterwards, I realized

249
00:11:18,640 --> 00:11:22,300
that was A, kind of
cutesie, and B, misleading,

250
00:11:22,300 --> 00:11:24,880
because this function
doesn't return a data frame.

251
00:11:24,880 --> 00:11:26,140
It retains a tibble.

252
00:11:26,140 --> 00:11:29,240
So we decided to
deprecate that function.

253
00:11:29,240 --> 00:11:31,767
So what happens if you
call that function today?

254
00:11:31,767 --> 00:11:33,850
Well, you're going to get
a warning that tells you

255
00:11:33,850 --> 00:11:37,120
it's deprecated and it tells
you when it was deprecated.

256
00:11:37,120 --> 00:11:40,450
So tibble 1.1 was
actually released in 2016

257
00:11:40,450 --> 00:11:41,830
about four years ago.

258
00:11:41,830 --> 00:11:45,070
So deprecated functions
don't go away immediately.

259
00:11:45,070 --> 00:11:46,760
They're going to hang
around for a while

260
00:11:46,760 --> 00:11:49,090
so that you can find
out about the change.

261
00:11:49,090 --> 00:11:51,670
Generally, the more
important or the more

262
00:11:51,670 --> 00:11:55,330
widely used a function was, the
longer that deprecation message

263
00:11:55,330 --> 00:11:58,120
will hang around.

264
00:11:58,120 --> 00:12:01,010
Next, you're going to find out
what you should use instead,

265
00:12:01,010 --> 00:12:03,200
so here you can use a
tibble function instead.

266
00:12:03,200 --> 00:12:05,560
That does exactly what
it says on the tin.

267
00:12:05,560 --> 00:12:08,710
It creates a tibble for you.

268
00:12:08,710 --> 00:12:10,600
Now what happens
if you are looking

269
00:12:10,600 --> 00:12:15,220
at some old code that has
hundreds of data_frame calls

270
00:12:15,220 --> 00:12:15,850
under it?

271
00:12:15,850 --> 00:12:18,610
It would be super annoying
if every single one of those

272
00:12:18,610 --> 00:12:20,530
generated a message,
so we're only

273
00:12:20,530 --> 00:12:24,350
going to show you this
warning every eight hours.

274
00:12:24,350 --> 00:12:26,500
But it's also important
for you to fix

275
00:12:26,500 --> 00:12:28,360
these deprecated
functions, so we're

276
00:12:28,360 --> 00:12:31,870
going to help you find out
where they were by giving you

277
00:12:31,870 --> 00:12:34,720
this advice to call this
lifecycle::last_warnings()

278
00:12:34,720 --> 00:12:37,320
function.

279
00:12:37,320 --> 00:12:39,960
There's one important thing
that you do not see here,

280
00:12:39,960 --> 00:12:41,520
and that's an error.

281
00:12:41,520 --> 00:12:44,070
So a deprecated function
does not generate an error.

282
00:12:44,070 --> 00:12:45,000
It still works.

283
00:12:45,000 --> 00:12:47,730
It still does exactly the
same thing it used to do,

284
00:12:47,730 --> 00:12:49,770
but it is going to go
away in the future,

285
00:12:49,770 --> 00:12:55,440
and the warning message is going
to encourage you to update.

286
00:12:55,440 --> 00:12:57,780
So if you do call that
last_warnings() function,

287
00:12:57,780 --> 00:12:59,430
you'll get that
same message again

288
00:12:59,430 --> 00:13:01,500
and you'll also get a backtrace.

289
00:13:01,500 --> 00:13:04,050
And a backtrace is just the
sequence of function calls

290
00:13:04,050 --> 00:13:07,110
that eventually led to
that deprecated function.

291
00:13:07,110 --> 00:13:09,030
In this made-up example,
we've got a function

292
00:13:09,030 --> 00:13:11,970
f that calls g that calls h
that calls i that finally calls

293
00:13:11,970 --> 00:13:14,910
data_frame, and this
is quite important

294
00:13:14,910 --> 00:13:17,220
because it allows you
to narrow in exactly

295
00:13:17,220 --> 00:13:20,650
where that warning is coming
from as quickly as possible.

296
00:13:20,650 --> 00:13:23,160
We really do not want
deprecated functions

297
00:13:23,160 --> 00:13:26,280
to be that one smoke
alarm in your house that

298
00:13:26,280 --> 00:13:30,810
needs its batteries changed
and it feels like the beep is

299
00:13:30,810 --> 00:13:32,670
like perfectly calibrated.

300
00:13:32,670 --> 00:13:35,190
It's fast enough, it
happens frequently enough,

301
00:13:35,190 --> 00:13:38,193
that it drives you to the
point of insanity, but not

302
00:13:38,193 --> 00:13:40,110
frequently enough that
you can never figure out

303
00:13:40,110 --> 00:13:43,050
which of the four smoke alarms
it's actually coming from.

304
00:13:47,520 --> 00:13:50,760
Now the lifecycle stages,
I've talked about them mostly

305
00:13:50,760 --> 00:13:52,240
in the context of functions.

306
00:13:52,240 --> 00:13:55,140
They also apply to packages
in slightly different ways,

307
00:13:55,140 --> 00:13:58,320
and they also apply to
arguments of functions

308
00:13:58,320 --> 00:14:02,790
and even specific values
of arguments of functions.

309
00:14:02,790 --> 00:14:06,570
And so for example, in the
next function in tidyr 1.0,

310
00:14:06,570 --> 00:14:12,210
we wanted to update it to match
emerging consensus of function

311
00:14:12,210 --> 00:14:15,510
interface across the tidyverse,
so we deprecated one argument

312
00:14:15,510 --> 00:14:17,834
and we deprecated
another way of using ...

313
00:14:21,550 --> 00:14:23,110
So deprecated
functions are functions

314
00:14:23,110 --> 00:14:26,080
that are kind of moving,
deprecated functions, features,

315
00:14:26,080 --> 00:14:29,560
arguments, things that are
moving out of warranty.

316
00:14:29,560 --> 00:14:33,250
What about things that we
just kind of regret a little?

317
00:14:33,250 --> 00:14:36,550
They're not wrong but maybe
there's a better alternative

318
00:14:36,550 --> 00:14:38,020
available now.

319
00:14:38,020 --> 00:14:41,320
That's the idea of a superseded
lifecycle stage, which

320
00:14:41,320 --> 00:14:43,900
I'm going to talk about
with a little example,

321
00:14:43,900 --> 00:14:47,320
because a few years ago, it
sort of felt like there was

322
00:14:47,320 --> 00:14:51,580
this disturbance in
the tidyverse Force,

323
00:14:51,580 --> 00:14:56,590
that a lot of people were having
problems remembering which

324
00:14:56,590 --> 00:14:59,320
of spread() and gather() was
which and how do you actually

325
00:14:59,320 --> 00:14:59,950
use them.

326
00:14:59,950 --> 00:15:01,655
Like every time
you go to use them,

327
00:15:01,655 --> 00:15:03,280
you'd have to look
up the documentation

328
00:15:03,280 --> 00:15:06,490
or do some time
googling, and this just

329
00:15:06,490 --> 00:15:08,210
wasn't happening
to the community.

330
00:15:08,210 --> 00:15:09,580
This was also happening to me.

331
00:15:09,580 --> 00:15:12,010
Like, I forgot how to use
these functions, which

332
00:15:12,010 --> 00:15:13,870
seemed like a really
good sign it was time

333
00:15:13,870 --> 00:15:15,760
to put some work into them.

334
00:15:15,760 --> 00:15:17,290
And so last year,
we spent a bunch

335
00:15:17,290 --> 00:15:19,030
of time talking
to the community,

336
00:15:19,030 --> 00:15:22,420
looking at other approaches
taken by packages like a data

337
00:15:22,420 --> 00:15:25,520
table, and we came up
with two new functions,

338
00:15:25,520 --> 00:15:28,780
pivot_longer(), which makes your
data longer, and pivot_wider(),

339
00:15:28,780 --> 00:15:31,570
which makes your data wider.

340
00:15:31,570 --> 00:15:36,100
And overall, it seems like
that those new functions

341
00:15:36,100 --> 00:15:37,000
have been successful.

342
00:15:37,000 --> 00:15:39,130
People have found them,
or at least people

343
00:15:39,130 --> 00:15:40,990
in this cherrypicked
sequence of tweets,

344
00:15:40,990 --> 00:15:43,435
have found them much
easier to use and remember.

345
00:15:46,050 --> 00:15:48,210
But just because pivot_longer()
and pivot_wider()

346
00:15:48,210 --> 00:15:51,630
exist and are great
and easy to remember,

347
00:15:51,630 --> 00:15:56,670
it doesn't mean that spread()
and gather() are wrong or bad.

348
00:15:56,670 --> 00:15:59,520
They still do what
they say on the tin.

349
00:15:59,520 --> 00:16:03,090
They still work the same
way that they always have

350
00:16:03,090 --> 00:16:07,013
and by any means are some of the
most successful functions I've

351
00:16:07,013 --> 00:16:09,180
ever written, probably used
by hundreds of thousands

352
00:16:09,180 --> 00:16:10,630
of people.

353
00:16:10,630 --> 00:16:12,990
So spread() and gather() are
never going to go away,

354
00:16:12,990 --> 00:16:18,330
but we want to make it clear
that newer approaches are

355
00:16:18,330 --> 00:16:21,400
available, and that's the idea
of this superseded lifecycle

356
00:16:21,400 --> 00:16:21,900
badge.

357
00:16:21,900 --> 00:16:24,480
It basically says, this
function, the development

358
00:16:24,480 --> 00:16:26,070
is now complete.

359
00:16:26,070 --> 00:16:27,840
It's never going to
get any new features

360
00:16:27,840 --> 00:16:31,380
and it will only receive the
sort of critical bug fixes

361
00:16:31,380 --> 00:16:35,040
that will keep that
function alive and useful.

362
00:16:35,040 --> 00:16:38,160
And to me, the way that I think
about superseded functions

363
00:16:38,160 --> 00:16:41,280
is kind of like the
idea of building codes.

364
00:16:41,280 --> 00:16:43,800
So a building code is
a set of best practices

365
00:16:43,800 --> 00:16:48,420
that you need to apply when you
are building a new home today,

366
00:16:48,420 --> 00:16:52,320
and obviously over time,
those standards evolve.

367
00:16:52,320 --> 00:16:55,080
So what happens if you
have a 50-year-old home

368
00:16:55,080 --> 00:16:56,190
or a 100-year-old home?

369
00:16:56,190 --> 00:16:59,040
Do you have to go
and update your house

370
00:16:59,040 --> 00:17:01,890
to meet all of
today's standards?

371
00:17:01,890 --> 00:17:04,800
That would be crazy, so the
idea of building standards

372
00:17:04,800 --> 00:17:07,950
today is very important when you
are building a new house

373
00:17:07,950 --> 00:17:10,800
or whenever you touch something
in your existing house.

374
00:17:10,800 --> 00:17:12,300
So if you're
renovating your kitchen

375
00:17:12,300 --> 00:17:14,859
and discover the wiring
is no longer up to code,

376
00:17:14,859 --> 00:17:16,500
you're going to have
to replace that,

377
00:17:16,500 --> 00:17:17,957
but you don't have
to rip out all

378
00:17:17,957 --> 00:17:19,790
of the walls, all of
the wires in your house

379
00:17:19,790 --> 00:17:21,180
elsewhere in your house.

380
00:17:21,180 --> 00:17:24,180
And the same applies to
superseded functions.

381
00:17:24,180 --> 00:17:26,730
Really good idea to use
them in new projects.

382
00:17:26,730 --> 00:17:28,380
If you are touching
old projects,

383
00:17:28,380 --> 00:17:30,660
if you're renovating
old projects,

384
00:17:30,660 --> 00:17:33,810
update superseded functions
when you need them, but don't

385
00:17:33,810 --> 00:17:34,730
otherwise worry.

386
00:17:34,730 --> 00:17:36,780
It's totally fine for
the old and the new

387
00:17:36,780 --> 00:17:39,930
to coexist seamlessly.

388
00:17:39,930 --> 00:17:42,708
The other place it's worthwhile
updating is if you're teaching.

389
00:17:42,708 --> 00:17:44,250
Really important
when you're teaching

390
00:17:44,250 --> 00:17:49,770
to be teaching the latest best
practices as much as possible.

391
00:17:49,770 --> 00:17:53,370
You might wonder, well, when
are these superseded functions

392
00:17:53,370 --> 00:17:54,773
going to go away?

393
00:17:54,773 --> 00:17:56,190
And you know, I
don't want to make

394
00:17:56,190 --> 00:17:59,490
any promises I can't commit to.

395
00:17:59,490 --> 00:18:01,320
Who knows what
our priorities are

396
00:18:01,320 --> 00:18:03,030
going to be in five
years or 10 years,

397
00:18:03,030 --> 00:18:04,770
and what our resources will be.

398
00:18:04,770 --> 00:18:06,840
But I think you
can get some sense

399
00:18:06,840 --> 00:18:10,950
of how we care about
superceded functions by looking

400
00:18:10,950 --> 00:18:13,810
at some superceded
packages, like for example,

401
00:18:13,810 --> 00:18:17,190
the reshape package
which I wrote in 2005

402
00:18:17,190 --> 00:18:20,790
and was superseded
in 2010 by reshape 2.

403
00:18:20,790 --> 00:18:22,470
So because people
are still using it,

404
00:18:22,470 --> 00:18:25,350
because packages
are still using it,

405
00:18:25,350 --> 00:18:27,330
we've kept reshape
still working.

406
00:18:27,330 --> 00:18:30,030
It's not getting any features
so it's not a lot of work.

407
00:18:30,030 --> 00:18:32,890
We're going to keep that alive
on CRAN as long as possible.

408
00:18:32,890 --> 00:18:36,150
So the same story for
plyr and reshape 2, both

409
00:18:36,150 --> 00:18:37,920
created a long time ago.

410
00:18:37,920 --> 00:18:39,310
They've been superseded.

411
00:18:39,310 --> 00:18:41,520
We are going to keep
those functions,

412
00:18:41,520 --> 00:18:45,170
those packages alive and on
CRAN for the foreseeable future.

413
00:18:49,600 --> 00:18:51,960
Now so far, I've talked
about these life cycle

414
00:18:51,960 --> 00:18:55,980
stages which we as the
creators of the functions

415
00:18:55,980 --> 00:18:57,910
have control over.

416
00:18:57,910 --> 00:19:00,840
There's an important thing
that you have control over,

417
00:19:00,840 --> 00:19:03,570
which is how you
use functions, and I

418
00:19:03,570 --> 00:19:06,690
want to talk a little bit about
the kind of off-label usage

419
00:19:06,690 --> 00:19:11,760
of functions, because in
medication, off-label usage is

420
00:19:11,760 --> 00:19:13,830
basically prescribing a
medicine for something

421
00:19:13,830 --> 00:19:17,580
that it's not
formally approved for.

422
00:19:17,580 --> 00:19:20,050
This is not illegal.

423
00:19:20,050 --> 00:19:20,680
It's not wrong.

424
00:19:20,680 --> 00:19:22,380
It's useful in lots of
cases because there's

425
00:19:22,380 --> 00:19:23,880
lots of knowledge
about medication

426
00:19:23,880 --> 00:19:26,550
that hasn't been
formally approved yet,

427
00:19:26,550 --> 00:19:29,490
but it is a little riskier
than using something

428
00:19:29,490 --> 00:19:31,200
for its intended purpose.

429
00:19:31,200 --> 00:19:34,140
And particularly
for functions, it

430
00:19:34,140 --> 00:19:37,890
exposes you, I think, to a
greater risk of breakage.

431
00:19:37,890 --> 00:19:41,060
So what exactly do I
mean by off-label usage?

432
00:19:41,060 --> 00:19:42,390
So let's take a little example.

433
00:19:42,390 --> 00:19:46,560
I have got a factor
and I want to extract

434
00:19:46,560 --> 00:19:49,420
the underlying numeric
levels of the factor.

435
00:19:49,420 --> 00:19:54,150
Now one way to do this
is to use the c() function,

436
00:19:54,150 --> 00:19:57,690
because the c() function doesn't
know how to handle factors

437
00:19:57,690 --> 00:20:00,150
and so it just drops
all the levels.

438
00:20:00,150 --> 00:20:02,550
But I would say that
this is off-label usage

439
00:20:02,550 --> 00:20:06,270
because the job of the c() function
is to concatenate vectors,

440
00:20:06,270 --> 00:20:09,010
concatenate or combine
vectors together,

441
00:20:09,010 --> 00:20:11,400
and here we've only
got one vector.

442
00:20:11,400 --> 00:20:14,370
So you or someone else, you
in the future or someone else

443
00:20:14,370 --> 00:20:16,890
looking at this code, might
scratch your head a little bit

444
00:20:16,890 --> 00:20:21,750
and think, well, what does it
mean to combine one vector.

445
00:20:21,750 --> 00:20:24,330
Here you're really relying
on kind of a side effect,

446
00:20:24,330 --> 00:20:26,920
an unintended side
effect of the c() function,

447
00:20:26,920 --> 00:20:29,850
which because it doesn't know
about factors, it drops all the levels.

448
00:20:29,850 --> 00:20:32,850
You're going to be much better
off explicitly declaring

449
00:20:32,850 --> 00:20:35,080
that you want to get
the underlying integer

450
00:20:35,080 --> 00:20:39,090
levels by using something
like as.integer().

451
00:20:39,090 --> 00:20:41,400
Or maybe you've got
a data frame and you

452
00:20:41,400 --> 00:20:43,830
want to find all the
rows in this data frame

453
00:20:43,830 --> 00:20:47,850
where x equals 1, and you do
that using subsetting in R,

454
00:20:47,850 --> 00:20:51,540
and because R has this fantastic
rule that missing values don't

455
00:20:51,540 --> 00:20:54,000
go silently missing, you're
going to get a missing

456
00:20:54,000 --> 00:20:57,373
row in the output, which a lot
of times is not what you want.

457
00:20:57,373 --> 00:20:58,790
And so you might
think, well, I'll

458
00:20:58,790 --> 00:21:01,800
just use which() to
get rid of this.

459
00:21:01,800 --> 00:21:05,160
Now this certainly isn't such
an egregious off-label usage

460
00:21:05,160 --> 00:21:09,570
as the last example, but
the primary purpose of which()

461
00:21:09,570 --> 00:21:14,010
is to find the location of true
values in a logical vector.

462
00:21:14,010 --> 00:21:18,150
So this, you know, it's hard
to know what else which() would

463
00:21:18,150 --> 00:21:19,980
do with missing
values, but you're not

464
00:21:19,980 --> 00:21:22,960
really fully communicating
what you're trying to do here.

465
00:21:22,960 --> 00:21:25,380
What you're trying to do
is remove missing values.

466
00:21:25,380 --> 00:21:27,780
And so in this case, I think
you're better off switching

467
00:21:27,780 --> 00:21:30,090
to a function like
dplyr's filter() or base

468
00:21:30,090 --> 00:21:34,560
subset() explicitly designed for
subsetting rows of a data frame

469
00:21:34,560 --> 00:21:39,520
which knows that you don't
want to get those NA rows back.

470
00:21:39,520 --> 00:21:41,970
And the reason you want to
avoid this off-label usage

471
00:21:41,970 --> 00:21:44,670
is because the original
author has no way

472
00:21:44,670 --> 00:21:48,300
to anticipate what you're doing,
and so when they make changes

473
00:21:48,300 --> 00:21:51,360
to the function, it's much more
likely to negatively affect

474
00:21:51,360 --> 00:21:56,910
these off-label usages
than the documented usage.

475
00:21:56,910 --> 00:21:59,730
So another way of saying
that is off-label usage

476
00:21:59,730 --> 00:22:01,080
is going to void your warranty.

477
00:22:01,080 --> 00:22:04,170
All bets are off when you
start using a function in a way

478
00:22:04,170 --> 00:22:07,060
that the author
did not envisage.

479
00:22:07,060 --> 00:22:09,670
So how do you avoid it?

480
00:22:09,670 --> 00:22:12,190
Well, the first thing
you need to recognize

481
00:22:12,190 --> 00:22:15,280
is that recognizing,
understanding off-label usage

482
00:22:15,280 --> 00:22:18,740
and what the intended purpose
of a function is, is a skill.

483
00:22:18,740 --> 00:22:20,770
It's not something that
you're born knowing.

484
00:22:20,770 --> 00:22:22,562
It's something you're
going to develop over

485
00:22:22,562 --> 00:22:25,690
the course of your career
in R. And in particular,

486
00:22:25,690 --> 00:22:29,290
when you start out learning
R, your primary goal is

487
00:22:29,290 --> 00:22:30,970
to solve the problem
in front of you

488
00:22:30,970 --> 00:22:36,250
and get the result that you
need, and that is 100% OK,

489
00:22:36,250 --> 00:22:39,130
but as you get better, it's a
really good practice to think,

490
00:22:39,130 --> 00:22:43,390
are you using functions not just
because they do what you want

491
00:22:43,390 --> 00:22:46,420
but because they
do what they say.

492
00:22:46,420 --> 00:22:48,460
And the easiest way
to discover that

493
00:22:48,460 --> 00:22:50,840
is to read the documentation.

494
00:22:50,840 --> 00:22:53,470
If you are using a function
for a purpose that was not

495
00:22:53,470 --> 00:22:56,440
mentioned anywhere
in its documentation,

496
00:22:56,440 --> 00:23:00,460
you're likely to be
in the danger zone.

497
00:23:00,460 --> 00:23:04,600
But I think the best
technique for learning more

498
00:23:04,600 --> 00:23:08,085
about the intended usage of a
function is to do code review.

499
00:23:08,085 --> 00:23:09,460
So this is going
to help you when

500
00:23:09,460 --> 00:23:11,770
you get your code
reviewed by someone else

501
00:23:11,770 --> 00:23:13,480
because they're going
to look at that.

502
00:23:13,480 --> 00:23:15,897
They're going to look at you
concatenating a single factor

503
00:23:15,897 --> 00:23:18,430
and they're going to ask you
like, what are you doing here,

504
00:23:18,430 --> 00:23:21,940
because the chances are they
don't know all the same quirks

505
00:23:21,940 --> 00:23:23,540
of the functions that you do.

506
00:23:23,540 --> 00:23:25,960
They'll know the intended
purpose of a function

507
00:23:25,960 --> 00:23:27,760
but they're less likely
to notice some side

508
00:23:27,760 --> 00:23:30,880
effect that you're relying on.

509
00:23:30,880 --> 00:23:32,500
The code review
also helps you when

510
00:23:32,500 --> 00:23:34,122
you're reading
other people's code

511
00:23:34,122 --> 00:23:35,830
because you're going
to look at that code

512
00:23:35,830 --> 00:23:37,288
and you're going
to think about it.

513
00:23:37,288 --> 00:23:39,753
You're going to say, well,
like what is this doing.

514
00:23:39,753 --> 00:23:41,920
And maybe you'll read a
little bit of documentation,

515
00:23:41,920 --> 00:23:45,580
you'll learn some new
functions, and that process

516
00:23:45,580 --> 00:23:47,440
of reflecting on
other people's code

517
00:23:47,440 --> 00:23:50,950
is really going to help
you understand and improve

518
00:23:50,950 --> 00:23:53,470
your ability to write good code.

519
00:23:53,470 --> 00:23:56,770
Personally, one of the biggest
improvements to my coding

520
00:23:56,770 --> 00:24:00,110
style, I think, happened
when I started grading code,

521
00:24:00,110 --> 00:24:03,220
when I started teaching data
analysis at Rice University.

522
00:24:03,220 --> 00:24:06,250
That process of having to
read other people's code

523
00:24:06,250 --> 00:24:10,780
and think about like why was
this hard to understand really

524
00:24:10,780 --> 00:24:17,060
made my own code much
more elegant and clearer.

525
00:24:17,060 --> 00:24:19,370
Now while off-label
usage of a function

526
00:24:19,370 --> 00:24:23,760
will void your warranty, we
as maintainer of the package

527
00:24:23,760 --> 00:24:26,720
still want to avoid
unforeseen consequences

528
00:24:26,720 --> 00:24:29,270
as much as possible,
and I think there's

529
00:24:29,270 --> 00:24:32,240
a really interesting
unforseen consequence

530
00:24:32,240 --> 00:24:36,200
of this transition from
incandescent light bulbs to LED

531
00:24:36,200 --> 00:24:37,490
light bulbs.

532
00:24:37,490 --> 00:24:40,400
And that is a few
years back, cities

533
00:24:40,400 --> 00:24:43,580
started converting the traffic
lights from incandescent to LED

534
00:24:43,580 --> 00:24:45,718
because it saved
a bunch of time,

535
00:24:45,718 --> 00:24:47,760
and they don't need to be
replaced as frequently,

536
00:24:47,760 --> 00:24:50,750
and they used much,
much less power.

537
00:24:50,750 --> 00:24:53,210
But unfortunately,
the first winter

538
00:24:53,210 --> 00:24:56,300
after this happened,
they discovered

539
00:24:56,300 --> 00:24:59,120
a problem, that snow was
accumulating in the traffic

540
00:24:59,120 --> 00:25:01,700
lights and blocking them so
people couldn't see them,

541
00:25:01,700 --> 00:25:03,830
and this was because
one of the reasons

542
00:25:03,830 --> 00:25:08,900
that incandescent bulbs
was so inefficient

543
00:25:08,900 --> 00:25:12,300
was that they also
produced a bunch of heat.

544
00:25:12,300 --> 00:25:17,130
And so now, previously they
would have melted the snow,

545
00:25:17,130 --> 00:25:20,210
and now with these new
LED bulbs, they didn't.

546
00:25:20,210 --> 00:25:23,280
Snow accumulated and there
were a bunch of car crashes.

547
00:25:23,280 --> 00:25:25,610
So in the tidyverse,
we want to avoid that

548
00:25:25,610 --> 00:25:28,310
as much as possible by
trying, particularly

549
00:25:28,310 --> 00:25:30,530
when we make big
changes, to making sure

550
00:25:30,530 --> 00:25:32,750
that there aren't
common off-label usages

551
00:25:32,750 --> 00:25:34,550
that we need to support.

552
00:25:34,550 --> 00:25:38,150
And I want to talk about this in
the context of a recent change

553
00:25:38,150 --> 00:25:40,640
to magrittr, a
set of big changes

554
00:25:40,640 --> 00:25:44,300
that improved backtraces, so
when you get an error message,

555
00:25:44,300 --> 00:25:46,250
it's much easier to see
where in the pipeline

556
00:25:46,250 --> 00:25:48,120
it actually happened.

557
00:25:48,120 --> 00:25:50,930
There's much less
overhead, so it's faster,

558
00:25:50,930 --> 00:25:55,770
and it is much closer to
the upcoming base pipe.

559
00:25:55,770 --> 00:25:57,980
So I think these are three
really big and important

560
00:25:57,980 --> 00:26:00,470
improvements, but
to get them, we

561
00:26:00,470 --> 00:26:04,250
had to fundamentally
reengineer how the pipe works,

562
00:26:04,250 --> 00:26:06,620
and our analysis
suggested that it

563
00:26:06,620 --> 00:26:10,040
should be fine for any correct
usage of the pipe or any way

564
00:26:10,040 --> 00:26:12,980
that we use the
pipe, but we wanted

565
00:26:12,980 --> 00:26:16,910
to make sure there
weren't a bunch of uses

566
00:26:16,910 --> 00:26:20,000
that we hadn't imagined that
we still needed to support.

567
00:26:20,000 --> 00:26:22,190
So we did three
things, and you can

568
00:26:22,190 --> 00:26:24,360
learn from those three things.

569
00:26:24,360 --> 00:26:26,390
So the first thing
we always do is

570
00:26:26,390 --> 00:26:31,040
we always run our command check
on all of the packages that

571
00:26:31,040 --> 00:26:33,470
use our package on CRAN.

572
00:26:33,470 --> 00:26:37,130
Now code in CRAN packages is
not exactly the same as data

573
00:26:37,130 --> 00:26:40,070
analysis code, but it
is a very large body

574
00:26:40,070 --> 00:26:42,860
of our code that is very
easy for us to rerun,

575
00:26:42,860 --> 00:26:44,840
so this is a great
first pass to pick

576
00:26:44,840 --> 00:26:47,180
if there's any major
problems with a new version

577
00:26:47,180 --> 00:26:48,770
of our package.

578
00:26:48,770 --> 00:26:51,620
And this is also, if you can
go to the effort of putting

579
00:26:51,620 --> 00:26:53,810
a package on CRAN,
this also gives you

580
00:26:53,810 --> 00:26:55,100
some extra protection.

581
00:26:55,100 --> 00:26:58,730
Before any package in
the tidyverse changes,

582
00:26:58,730 --> 00:27:01,100
all of your tests will be
rerun and we'll tell you

583
00:27:01,100 --> 00:27:03,800
if we've broken something.

584
00:27:03,800 --> 00:27:05,030
We also tweeted about it.

585
00:27:05,030 --> 00:27:06,980
We tweet about pretty
much everything we do.

586
00:27:06,980 --> 00:27:09,230
Following us on
Twitter is a great way

587
00:27:09,230 --> 00:27:11,330
to keep up with the latest
and greatest changes

588
00:27:11,330 --> 00:27:13,370
in the tidyverse.

589
00:27:13,370 --> 00:27:15,060
But for changes
of this magnitude,

590
00:27:15,060 --> 00:27:17,600
we also blog about it,
and so in this case,

591
00:27:17,600 --> 00:27:19,860
me and Al wrote a
blog post saying,

592
00:27:19,860 --> 00:27:22,950
hey, there's a big new version
of magrittr coming along.

593
00:27:22,950 --> 00:27:26,540
Please try it out and let
us know what you think.

594
00:27:26,540 --> 00:27:30,650
Does it break
anything in your code?

595
00:27:30,650 --> 00:27:33,212
And in the process of
coming up with this slide,

596
00:27:33,212 --> 00:27:34,670
I realized if you
don't use Twitter

597
00:27:34,670 --> 00:27:36,170
and you don't use
blogs, how are you

598
00:27:36,170 --> 00:27:38,267
supposed to keep up
with these things,

599
00:27:38,267 --> 00:27:40,850
so we're going to add a mailing
list so you can easily sign up

600
00:27:40,850 --> 00:27:45,602
for updates over email in
the not too distant future.

601
00:27:45,602 --> 00:27:47,060
Now, when we did
this for magrittr,

602
00:27:47,060 --> 00:27:50,540
we actually uncovered a bunch of
small and not so small things,

603
00:27:50,540 --> 00:27:53,240
so we either fixed
magrittr to make this work,

604
00:27:53,240 --> 00:27:56,630
or if we couldn't do that,
at least make it give

605
00:27:56,630 --> 00:27:58,910
an informative error message.

606
00:27:58,910 --> 00:28:02,060
But there were still a
few things, the trade-off

607
00:28:02,060 --> 00:28:05,630
between the amount of time it
would take to fix them versus

608
00:28:05,630 --> 00:28:08,700
the frequency of the
usage in the community,

609
00:28:08,700 --> 00:28:10,190
and at the end of
the day, we have

610
00:28:10,190 --> 00:28:11,600
to kind of make this balance.

611
00:28:11,600 --> 00:28:13,970
That we are going
to pick these large,

612
00:28:13,970 --> 00:28:17,510
positive improvements for
the vast majority of people

613
00:28:17,510 --> 00:28:20,450
is an OK trade-off
for a few new problems

614
00:28:20,450 --> 00:28:23,120
for a very small
amount of people.

615
00:28:23,120 --> 00:28:27,530
Now, even after learning
about the tidyverse lifecycle

616
00:28:27,530 --> 00:28:30,020
and the various promises
that we make to you,

617
00:28:30,020 --> 00:28:33,530
you might still feel nervous
that for particularly critical

618
00:28:33,530 --> 00:28:38,000
projects, you might be worried
that an otherwise innocuous

619
00:28:38,000 --> 00:28:40,910
package update might
break your code,

620
00:28:40,910 --> 00:28:42,440
and so you have
a fallback, which

621
00:28:42,440 --> 00:28:46,250
is to opt out of the
hurly-burly of package updates.

622
00:28:46,250 --> 00:28:48,740
Now this is generally
not a good idea

623
00:28:48,740 --> 00:28:50,720
because you're not
just opting out

624
00:28:50,720 --> 00:28:54,170
of changes that might
break your code.

625
00:28:54,170 --> 00:28:56,990
You're also opting out of
bug fixes and improvements

626
00:28:56,990 --> 00:28:58,470
and new features.

627
00:28:58,470 --> 00:29:01,040
But for some types of code,
particularly code that

628
00:29:01,040 --> 00:29:05,360
is run unattended like
code in production,

629
00:29:05,360 --> 00:29:08,760
it can be a good idea to
use one of these techniques

630
00:29:08,760 --> 00:29:12,020
so that your code is 100%
isolated and protected

631
00:29:12,020 --> 00:29:15,000
from changes to other packages.

632
00:29:15,000 --> 00:29:17,562
So the first thing you can
do is use the renv package.

633
00:29:17,562 --> 00:29:19,020
Basically, what
this is going to do

634
00:29:19,020 --> 00:29:21,780
is isolate each
project you work on,

635
00:29:21,780 --> 00:29:24,480
give it its own
library of R packages.

636
00:29:24,480 --> 00:29:27,600
So it doesn't matter what
you install elsewhere.

637
00:29:27,600 --> 00:29:31,710
This project will always use
the same set of packages.

638
00:29:31,710 --> 00:29:33,420
It also comes with
a pair of functions

639
00:29:33,420 --> 00:29:36,450
that let you save those
packaged versions to disk

640
00:29:36,450 --> 00:29:38,400
and then restore
them elsewhere so you

641
00:29:38,400 --> 00:29:40,590
can run your code
on another computer,

642
00:29:40,590 --> 00:29:42,900
and it will hopefully give
you exactly the same results

643
00:29:42,900 --> 00:29:46,920
because you've installed exactly
the same versions of packages.

644
00:29:46,920 --> 00:29:48,810
Now, because renv
works by giving you

645
00:29:48,810 --> 00:29:52,350
a custom library of packages,
an isolated library of packages,

646
00:29:52,350 --> 00:29:54,612
it works with any
packages, and it

647
00:29:54,612 --> 00:29:56,070
doesn't matter
where it comes from,

648
00:29:56,070 --> 00:30:00,090
whether it's CRAN or GitHub or
your company's internal package

649
00:30:00,090 --> 00:30:01,980
repository.

650
00:30:01,980 --> 00:30:04,172
But renv is quite a
lot of work to set up.

651
00:30:04,172 --> 00:30:05,880
It's not a huge amount
of work, but there

652
00:30:05,880 --> 00:30:08,970
is a simpler alternative if you
only care about CRAN packages,

653
00:30:08,970 --> 00:30:11,170
and that's to use a
CRAN time machine.

654
00:30:11,170 --> 00:30:12,900
So there are two
alternatives here.

655
00:30:12,900 --> 00:30:16,050
You can use the public version
of RStudios Package Manager

656
00:30:16,050 --> 00:30:18,570
or you can use Microsoft MRAN.

657
00:30:18,570 --> 00:30:20,970
Both of these basically
work the same way.

658
00:30:20,970 --> 00:30:24,600
They take a regular, roughly
daily snapshot of CRAN,

659
00:30:24,600 --> 00:30:27,510
and so you can choose to
pick a day in the past

660
00:30:27,510 --> 00:30:33,700
and install packages that
were on CRAN on that day.

661
00:30:33,700 --> 00:30:36,580
Now this is obviously
much simpler to set up.

662
00:30:36,580 --> 00:30:39,315
You just have to change the
repos option in your R profile

663
00:30:39,315 --> 00:30:42,770
with R Configuration, but it
has the limitation that it only

664
00:30:42,770 --> 00:30:43,770
works for CRAN packages.

665
00:30:48,910 --> 00:30:50,770
So to sum up, you
know, I've told you

666
00:30:50,770 --> 00:30:54,520
about some of my frustrations
with home maintenance which

667
00:30:54,520 --> 00:30:58,120
also I think apply very
much to code maintenance,

668
00:30:58,120 --> 00:31:02,750
particularly accepting that the
reason that you're frustrated,

669
00:31:02,750 --> 00:31:05,020
that the reason that these
maintenance tasks can cause

670
00:31:05,020 --> 00:31:08,980
frustration, is this collision
between what you want to be

671
00:31:08,980 --> 00:31:11,710
true and what really is true.

672
00:31:11,710 --> 00:31:13,570
And personally,
I found the ideas

673
00:31:13,570 --> 00:31:16,900
of cognitive behavioral therapy
really useful for this, helping

674
00:31:16,900 --> 00:31:19,060
me to identify my
automatic thoughts

675
00:31:19,060 --> 00:31:21,790
and come up with more
balanced, rational alternatives

676
00:31:21,790 --> 00:31:25,960
that help me think about
things more productively.

677
00:31:25,960 --> 00:31:29,740
We also talked about the
four most important stages

678
00:31:29,740 --> 00:31:33,070
of the tidyverse lifecycle:
experimental, deprecated,

679
00:31:33,070 --> 00:31:35,830
stable and superseded,
and talked about some

680
00:31:35,830 --> 00:31:40,060
of the guarantees that
we in the tidyverse team

681
00:31:40,060 --> 00:31:41,860
do our best to provide.

682
00:31:41,860 --> 00:31:43,810
So firstly, we're
going to try our best

683
00:31:43,810 --> 00:31:46,720
to avoid breaking changes
in stable functions,

684
00:31:46,720 --> 00:31:49,960
and if they are ever
any breaking changes,

685
00:31:49,960 --> 00:31:53,090
we're going to do this gradually
through a deprecation cycle

686
00:31:53,090 --> 00:31:54,940
so you have time to
discover that there's

687
00:31:54,940 --> 00:31:57,830
a change and respond to it.

688
00:31:57,830 --> 00:32:00,310
But remember if you're going
to use a function off-label

689
00:32:00,310 --> 00:32:04,160
that voids the warranty,
because we don't know

690
00:32:04,160 --> 00:32:05,410
how you're using the function.

691
00:32:05,410 --> 00:32:06,940
It's much, much,
much more difficult

692
00:32:06,940 --> 00:32:09,670
for us to make sure it keeps
working in the same way

693
00:32:09,670 --> 00:32:12,850
that you're relying on it today.

694
00:32:12,850 --> 00:32:15,190
Finally, if the hurly-burly
of package updates

695
00:32:15,190 --> 00:32:18,070
is just too much and you want
to opt out, particularly if you

696
00:32:18,070 --> 00:32:20,740
have a package is running
unattended in production,

697
00:32:20,740 --> 00:32:25,120
you can use tools like renv
or the CRAN time machines

698
00:32:25,120 --> 00:32:30,310
to isolate or pick a date in
time so that the packages you

699
00:32:30,310 --> 00:32:31,960
installed do not change, ever.

700
00:32:35,060 --> 00:32:39,520
So I hope you've enjoyed this
journey of code maintenance

701
00:32:39,520 --> 00:32:43,360
and home maintenance with me,
and I'm really looking forward

702
00:32:43,360 --> 00:32:46,510
to taking your questions in
just a couple of minutes.

703
00:32:46,510 --> 00:32:48,420
Thank you.
