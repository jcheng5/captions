1
00:00:02,420 --> 00:00:03,388
[MUSIC PLAYING]

2
00:00:06,300 --> 00:00:08,820
IRENE STEVES: About two years
ago, I started at Riskified,

3
00:00:08,820 --> 00:00:10,590
an e-commerce fraud-
prevention company

4
00:00:10,590 --> 00:00:12,990
based in Tel Aviv, Israel.

5
00:00:12,990 --> 00:00:15,960
Previously I'd worked with
ecological and environmental

6
00:00:15,960 --> 00:00:17,700
scientist data.

7
00:00:17,700 --> 00:00:20,250
I'd worked with a lot of
different kinds of files,

8
00:00:20,250 --> 00:00:26,737
Shapefiles, XML, CSVs of course,
sometimes thousands at a time.

9
00:00:26,737 --> 00:00:28,320
But I hadn't really
gotten the chance

10
00:00:28,320 --> 00:00:30,880
to work so much with databases.

11
00:00:30,880 --> 00:00:32,880
So I was really excited
to enter a world

12
00:00:32,880 --> 00:00:36,180
where there were millions of
orders coming in each day,

13
00:00:36,180 --> 00:00:39,450
there were teams dedicated
to setting up ETLs

14
00:00:39,450 --> 00:00:42,180
to process that incoming
data and to get it neat

15
00:00:42,180 --> 00:00:44,970
and tidy to databases for me.

16
00:00:44,970 --> 00:00:46,610
And all I had to do
is query that data

17
00:00:46,610 --> 00:00:49,970
into R and start playing.

18
00:00:49,970 --> 00:00:54,380
And I was excited because
I had R under my belt.

19
00:00:54,380 --> 00:00:57,290
And R was super multitool.

20
00:00:57,290 --> 00:00:59,600
It seemed to be able
to do almost anything.

21
00:00:59,600 --> 00:01:02,120
I used it to create
slides and websites.

22
00:01:02,120 --> 00:01:07,190
I'd used it for querying
APIs and even building APIs.

23
00:01:07,190 --> 00:01:09,500
It did a lot for
what was supposedly

24
00:01:09,500 --> 00:01:12,470
just this statistical tool.

25
00:01:12,470 --> 00:01:14,540
SQL on the other hand
was a little bit more

26
00:01:14,540 --> 00:01:16,700
like a screwdriver.

27
00:01:16,700 --> 00:01:19,550
It's a perfectly
fine tool, but it

28
00:01:19,550 --> 00:01:22,490
seems to be only really
good at one thing, which

29
00:01:22,490 --> 00:01:26,010
is to query databases.

30
00:01:26,010 --> 00:01:29,070
As I was going to
Riskified, in my mind

31
00:01:29,070 --> 00:01:31,920
was a little bit of
this feeling of why

32
00:01:31,920 --> 00:01:36,990
bother to learn SQL if I can
just use R for everything.

33
00:01:36,990 --> 00:01:39,090
And one reason that I
was fairly confident

34
00:01:39,090 --> 00:01:41,610
is because I knew about
this package called

35
00:01:41,610 --> 00:01:46,590
dbplyr, which is an extension
of dplyr that runs on databases.

36
00:01:46,590 --> 00:01:50,490
So instead of running something
on a data frame in your R

37
00:01:50,490 --> 00:01:54,780
session, you're actually running
it on a table in a database,

38
00:01:54,780 --> 00:01:58,140
but it feels like it's
just a data frame.

39
00:01:58,140 --> 00:02:01,050
And what it's doing is it's
taking your tidyverse code,

40
00:02:01,050 --> 00:02:04,620
translating it into SQL,
sending it off to the database,

41
00:02:04,620 --> 00:02:07,800
bringing it back,
and then giving you

42
00:02:07,800 --> 00:02:10,380
this tibble output
like you're used to

43
00:02:10,380 --> 00:02:12,505
as if everything all
happened locally.

44
00:02:15,700 --> 00:02:18,930
And so if we look
at how this works,

45
00:02:18,930 --> 00:02:21,060
let's just take a
simple R example

46
00:02:21,060 --> 00:02:23,850
where I have now mtcars table

47
00:02:23,850 --> 00:02:27,870
in this database, I take some
variable, miles per gallon,

48
00:02:27,870 --> 00:02:29,940
round it, create
this new variable,

49
00:02:29,940 --> 00:02:33,700
and then I select two other
variables, this rounded miles

50
00:02:33,700 --> 00:02:37,930
per gallon and then horsepower.

51
00:02:37,930 --> 00:02:41,260
If I look at the translation,
it also looks fairly good.

52
00:02:41,260 --> 00:02:44,470
It looks somewhat
similar to the R code.

53
00:02:44,470 --> 00:02:45,310
I'm rounding it.

54
00:02:45,310 --> 00:02:49,420
I get the horsepower
from mtcars the table.

55
00:02:49,420 --> 00:02:52,210
If I were to have
written this out by hand,

56
00:02:52,210 --> 00:02:54,610
I probably wouldn't
write in the backticks.

57
00:02:54,610 --> 00:02:59,060
But otherwise, it
looks almost the same.

58
00:02:59,060 --> 00:03:01,400
And sometimes
using dbplyr really

59
00:03:01,400 --> 00:03:04,210
saves you a lot of tedious work.

60
00:03:04,210 --> 00:03:08,120
For example, if I want all
columns except for horsepower,

61
00:03:08,120 --> 00:03:12,230
I can use this simple
expression in dplyr,

62
00:03:12,230 --> 00:03:14,090
and then it generates
the SQL code

63
00:03:14,090 --> 00:03:17,270
where I literally have to
write out every single column

64
00:03:17,270 --> 00:03:18,983
except for horsepower.

65
00:03:22,370 --> 00:03:25,520
If I want to now take
the maximum across all

66
00:03:25,520 --> 00:03:27,950
of the different
columns, I can also

67
00:03:27,950 --> 00:03:29,930
do it very easily in dbplyr.

68
00:03:29,930 --> 00:03:32,840
It's just one line of code.

69
00:03:32,840 --> 00:03:36,080
And then it's able to generate
this really long and very

70
00:03:36,080 --> 00:03:37,730
repetitive query for me.

71
00:03:37,730 --> 00:03:42,680
It's not a hard query to write,
but it does take some effort,

72
00:03:42,680 --> 00:03:44,622
and it is very repetitive.

73
00:03:47,280 --> 00:03:49,350
But the thing is,
over time you also

74
00:03:49,350 --> 00:03:54,330
realize that what you're used
to doing in just regular dplyr

75
00:03:54,330 --> 00:03:58,350
isn't always going to work when
you're connected to a database.

76
00:03:58,350 --> 00:04:00,330
For example, if I
now want to look

77
00:04:00,330 --> 00:04:06,120
at the number of NAs or nulls
across every single column,

78
00:04:06,120 --> 00:04:11,460
I can use this one
liner in R. If I

79
00:04:11,460 --> 00:04:17,490
try to do the same on a table,
will say no such column dot x.

80
00:04:17,490 --> 00:04:19,050
It's angry at me
because I'm trying

81
00:04:19,050 --> 00:04:21,180
to use an anonymous
function, and it

82
00:04:21,180 --> 00:04:24,275
doesn't know how to translate
the anonymous function.

83
00:04:24,275 --> 00:04:25,650
So what I have
to do is I have

84
00:04:25,650 --> 00:04:28,170
to fix this set of commands.

85
00:04:28,170 --> 00:04:31,090
I have to break it up into
the individual steps, which

86
00:04:31,090 --> 00:04:36,950
is is.na first and then the
sum, and now it will work.

87
00:04:36,950 --> 00:04:41,300
Well, now it will work
for some databases.

88
00:04:41,300 --> 00:04:46,610
And this is where it becomes
complicated a little bit.

89
00:04:46,610 --> 00:04:51,530
On the one hand dbplyr saves
you the mental load of learning

90
00:04:51,530 --> 00:04:53,245
SQL, this whole new language.

91
00:04:53,245 --> 00:04:55,370
On the other hand, you
start to realize that you're

92
00:04:55,370 --> 00:04:57,500
working with databases.

93
00:04:57,500 --> 00:04:59,720
It does a lot of
the translations

94
00:04:59,720 --> 00:05:01,310
to dialects for
you, but you have

95
00:05:01,310 --> 00:05:03,620
to know what is specific
to your database.

96
00:05:03,620 --> 00:05:08,300
In some databases, for example,
is.na becomes a Boolean.

97
00:05:08,300 --> 00:05:13,070
In other databases,
is.na becomes an integer.

98
00:05:13,070 --> 00:05:14,897
And depending on
what you're using,

99
00:05:14,897 --> 00:05:16,730
you might have to convert
it into an integer

100
00:05:16,730 --> 00:05:20,870
in order to sum it up because
it can't sum up Booleans.

101
00:05:20,870 --> 00:05:23,690
And so you have to make
sure to still juggle

102
00:05:23,690 --> 00:05:26,660
that information in your
mind as you're using dplyr.

103
00:05:26,660 --> 00:05:29,390
So it's you are using
something you're used to,

104
00:05:29,390 --> 00:05:36,150
but you can't use exactly in
the way that you normally would.

105
00:05:36,150 --> 00:05:38,420
And so over time
I did really start

106
00:05:38,420 --> 00:05:41,588
to appreciate SQL,
the screwdriver,

107
00:05:41,588 --> 00:05:43,130
because even they
have their moments.

108
00:05:43,130 --> 00:05:46,280
And sometimes it is
easier to just switch over

109
00:05:46,280 --> 00:05:47,930
to a different
language rather than

110
00:05:47,930 --> 00:05:54,410
to try to juggle how regular
dplyr is different from dbplyr

111
00:05:54,410 --> 00:05:57,920
code on this specific database.

112
00:06:01,590 --> 00:06:04,680
And so for example, if I
take what I had from before,

113
00:06:04,680 --> 00:06:07,440
I switch off the ending,
now I have a group_by

114
00:06:07,440 --> 00:06:09,970
and summarize instead.

115
00:06:09,970 --> 00:06:11,650
If I were to write
this out by hand,

116
00:06:11,650 --> 00:06:13,920
it's also fairly
simple SQL query.

117
00:06:13,920 --> 00:06:15,840
The ordering is a
little bit different,

118
00:06:15,840 --> 00:06:18,760
but otherwise it has
all the same components.

119
00:06:18,760 --> 00:06:22,710
If I now take the machine
translation of this,

120
00:06:22,710 --> 00:06:25,490
it looks a little
bit scary at first.

121
00:06:25,490 --> 00:06:27,390
It's going to run just fine.

122
00:06:27,390 --> 00:06:29,100
It's just as efficient.

123
00:06:29,100 --> 00:06:30,840
It's not going to
have any problems.

124
00:06:30,840 --> 00:06:32,820
But you can see that
it's not as readable.

125
00:06:32,820 --> 00:06:36,640
It's harder to distinguish
what here is really important,

126
00:06:36,640 --> 00:06:42,990
what is just extra code that
is used to generate this--

127
00:06:42,990 --> 00:06:46,260
to automatically
generate this query.

128
00:06:46,260 --> 00:06:50,340
And so at some point, once
you have to hand SQL code off

129
00:06:50,340 --> 00:06:54,150
to someone else, or if you need
to really optimize for speed,

130
00:06:54,150 --> 00:06:58,170
and you need to input some of
these little database tricks

131
00:06:58,170 --> 00:07:01,840
that you know about, you
have to dig into the SQL.

132
00:07:01,840 --> 00:07:04,760
There's just no way around it.

133
00:07:04,760 --> 00:07:07,720
And for me, it's kind of
like using Google Translate.

134
00:07:07,720 --> 00:07:08,740
I live in Israel.

135
00:07:08,740 --> 00:07:11,710
I did not grow up
speaking Hebrew.

136
00:07:11,710 --> 00:07:15,850
I learned the alphabet
just a few years ago.

137
00:07:15,850 --> 00:07:19,720
And I can get around
with just Google Translate.

138
00:07:19,720 --> 00:07:21,250
I can survive.

139
00:07:21,250 --> 00:07:27,020
But you also really quickly
realize that it doesn't--

140
00:07:27,020 --> 00:07:30,310
you can't express yourself
exactly in the way

141
00:07:30,310 --> 00:07:31,270
that you want to.

142
00:07:31,270 --> 00:07:34,420
You lose out on a lot of
the nuances of the language.

143
00:07:34,420 --> 00:07:36,220
And sometimes you
even have to alter

144
00:07:36,220 --> 00:07:39,940
the way you input your
English sentence in order

145
00:07:39,940 --> 00:07:44,610
for the translation to come
out OK on the other side.

146
00:07:44,610 --> 00:07:49,120
Speaking of language, that's
one other really amazing thing

147
00:07:49,120 --> 00:07:50,200
about SQL.

148
00:07:50,200 --> 00:07:55,870
It's kind of this lingua franca
among the technical folks

149
00:07:55,870 --> 00:07:57,820
in a company.

150
00:07:57,820 --> 00:07:59,740
Of course the database
administrators

151
00:07:59,740 --> 00:08:00,740
are familiar with it.

152
00:08:00,740 --> 00:08:04,450
But also business analysts, data
scientists, software developers,

153
00:08:04,450 --> 00:08:08,030
everyone has at least
that core level of SQL

154
00:08:08,030 --> 00:08:10,660
So if you need to communicate
some actions you want

155
00:08:10,660 --> 00:08:13,450
to do to data, this
is a really good way

156
00:08:13,450 --> 00:08:15,340
to communicate
that through code.

157
00:08:18,510 --> 00:08:20,310
And so with time
I realized really

158
00:08:20,310 --> 00:08:23,580
that R and SQL belong
in the same toolkit.

159
00:08:23,580 --> 00:08:27,390
And you can survive on
just one or the other,

160
00:08:27,390 --> 00:08:29,460
but over time it's
really nice to be

161
00:08:29,460 --> 00:08:31,710
able to use both
very well, especially

162
00:08:31,710 --> 00:08:38,049
if you're in this intersection
of using R and databases.

163
00:08:38,049 --> 00:08:39,840
The nice thing is
if you know one,

164
00:08:39,840 --> 00:08:43,020
it's fairly easy to
become bilingual.

165
00:08:43,020 --> 00:08:45,570
If you look at just the
main verbs, for example,

166
00:08:45,570 --> 00:08:48,270
in each of the
two languages, you

167
00:08:48,270 --> 00:08:50,730
see there's a lot of overlap.

168
00:08:50,730 --> 00:08:55,153
select is SELECT,
group_by is GROUP BY.

169
00:08:55,153 --> 00:08:56,820
There are some things
you have to learn,

170
00:08:56,820 --> 00:09:01,480
you have to realize filter,
now WHERE or HAVING in SQL.

171
00:09:01,480 --> 00:09:03,400
arrange is ORDER BY,
and so on and so forth.

172
00:09:03,400 --> 00:09:05,790
So there is a little bit of
translation you have to do,

173
00:09:05,790 --> 00:09:09,600
but it's not too big of a leap.

174
00:09:09,600 --> 00:09:12,450
And the other thing is
if you're used to R,

175
00:09:12,450 --> 00:09:18,040
then you write things out in
the order that they happen.

176
00:09:18,040 --> 00:09:21,270
So let's say I have a table,
I filter by some condition.

177
00:09:21,270 --> 00:09:24,060
OK, now I group by
some column and get

178
00:09:24,060 --> 00:09:27,510
a summarized aggregate column.

179
00:09:27,510 --> 00:09:30,330
And then I filter by
that column, for example,

180
00:09:30,330 --> 00:09:34,630
and then I can arrange by something.

181
00:09:34,630 --> 00:09:38,410
If I were to write this out
in SQL, I would have to--

182
00:09:38,410 --> 00:09:41,920
I would start with the table,
the condition, group by.

183
00:09:41,920 --> 00:09:45,190
Now, the select or the
summarize jumps all the way up

184
00:09:45,190 --> 00:09:47,470
to the top.

185
00:09:47,470 --> 00:09:52,520
HAVING is at the bottom again,
ORDER BY is also at the bottom.

186
00:09:52,520 --> 00:09:55,410
And so you have to remember that
the ordering is a little bit

187
00:09:55,410 --> 00:09:55,910
different.

188
00:09:55,910 --> 00:09:58,120
You don't necessarily
write things in the order

189
00:09:58,120 --> 00:10:00,350
that you would do them.

190
00:10:00,350 --> 00:10:01,930
But other than that--

191
00:10:01,930 --> 00:10:06,690
but it's something that you
get used to fairly quickly.

192
00:10:06,690 --> 00:10:10,430
And if you're like me and you
spend a lot of time in RStudio,

193
00:10:10,430 --> 00:10:13,280
the nice thing is there
are a lot of SQL things

194
00:10:13,280 --> 00:10:15,920
you can do from within
that familiar environment

195
00:10:15,920 --> 00:10:21,230
of RStudio, and especially
with the newer versions of IDE.

196
00:10:21,230 --> 00:10:23,690
For example, if you
open up a SQL file,

197
00:10:23,690 --> 00:10:27,240
you have your nice color
syntax highlighting,

198
00:10:27,240 --> 00:10:33,770
so you can see what the verbs
are, what the table names are.

199
00:10:33,770 --> 00:10:35,570
What I didn't realize
for the longest time

200
00:10:35,570 --> 00:10:37,070
is there's this
line at the top that

201
00:10:37,070 --> 00:10:40,940
says exclamation Preview
with some stuff after that.

202
00:10:40,940 --> 00:10:43,110
This is where you can
actually set connection.

203
00:10:43,110 --> 00:10:44,960
So if you set connection
to the database,

204
00:10:44,960 --> 00:10:49,340
you can get the SQL preview pane
where you can preview that SQL

205
00:10:49,340 --> 00:10:51,392
query within RStudio.

206
00:10:51,392 --> 00:10:52,850
This took me a
while to figure out,

207
00:10:52,850 --> 00:10:56,720
but it's a really nice feature.

208
00:10:56,720 --> 00:10:59,060
RMarkdown is this kind
of magical document

209
00:10:59,060 --> 00:11:01,640
where you can mix all kinds
of different languages,

210
00:11:01,640 --> 00:11:04,700
and R and SQL is no exception.

211
00:11:04,700 --> 00:11:08,390
You'll start probably with some
kind of YAML header like usual.

212
00:11:08,390 --> 00:11:12,890
You might have an R set-up
chunk where you have packages,

213
00:11:12,890 --> 00:11:14,780
the database
connection, maybe you'll

214
00:11:14,780 --> 00:11:18,050
set up a table like
I did here, and then

215
00:11:18,050 --> 00:11:19,320
you can have your SQL query.

216
00:11:19,320 --> 00:11:22,850
And if you have this
inline mood enabled,

217
00:11:22,850 --> 00:11:26,690
you can actually see those
previews within RMarkdown

218
00:11:26,690 --> 00:11:29,810
And work with both R
and SQL interactively

219
00:11:29,810 --> 00:11:33,270
within this one document.

220
00:11:33,270 --> 00:11:36,260
And finally, you can navigate
through your database

221
00:11:36,260 --> 00:11:39,770
from within R. You can see
what databases you have,

222
00:11:39,770 --> 00:11:43,940
schemas, tables,
columns within tables,

223
00:11:43,940 --> 00:11:46,880
all within that
RStudio interface.

224
00:11:50,100 --> 00:11:52,860
And so I've talked a lot
about all these cool things

225
00:11:52,860 --> 00:11:55,050
about R and SQL together.

226
00:11:55,050 --> 00:11:57,450
But what does that
look like in real life?

227
00:11:57,450 --> 00:12:00,120
I wish I knew more
about what people

228
00:12:00,120 --> 00:12:04,120
are doing in the wider world,
out in the wild, so to speak.

229
00:12:04,120 --> 00:12:07,680
But I can only really speak to
my experience and experience

230
00:12:07,680 --> 00:12:09,660
of my colleagues at Riskified.

231
00:12:09,660 --> 00:12:11,970
On a regular day,
I'm often switching

232
00:12:11,970 --> 00:12:15,660
between a SQL IDE and RStudio.

233
00:12:15,660 --> 00:12:17,640
I did just talk
about all these SQL

234
00:12:17,640 --> 00:12:20,370
things you can do with
RStudio, but some are still not

235
00:12:20,370 --> 00:12:22,510
quite that mature.

236
00:12:22,510 --> 00:12:24,870
And so I really like
using the SQL IDE

237
00:12:24,870 --> 00:12:27,840
for all of the extra
autoformatting,

238
00:12:27,840 --> 00:12:30,370
highlighted code and
field suggestions

239
00:12:30,370 --> 00:12:33,510
so I don't have to remember
those long table names just

240
00:12:33,510 --> 00:12:35,430
from memory.

241
00:12:35,430 --> 00:12:38,280
One other thing is that
it's really easy to stop

242
00:12:38,280 --> 00:12:42,030
bad queries in a dedicated IDE.

243
00:12:42,030 --> 00:12:44,190
Sometimes RStudio
get stuck, and I

244
00:12:44,190 --> 00:12:46,920
press on that red button
for ages, and in the end

245
00:12:46,920 --> 00:12:52,110
I have to just force quit my
RStudio and just start over.

246
00:12:54,810 --> 00:12:58,320
On the RStudio side, there
are a lot of nice R features

247
00:12:58,320 --> 00:13:01,620
obviously,
visualizations, reporting

248
00:13:01,620 --> 00:13:03,690
being able to mix languages
in the same document

249
00:13:03,690 --> 00:13:05,190
as we mentioned earlier.

250
00:13:05,190 --> 00:13:07,630
But I think maybe
most importantly,

251
00:13:07,630 --> 00:13:10,830
you have this ability to
organize your analysis project,

252
00:13:10,830 --> 00:13:13,500
and on top of that
have version control.

253
00:13:13,500 --> 00:13:17,130
That means you have
your SQL files,

254
00:13:17,130 --> 00:13:19,770
your data files, your
R file, maybe RMarkdown

255
00:13:19,770 --> 00:13:23,460
files all together in one space.

256
00:13:23,460 --> 00:13:26,460
It's a project that you can
now easily give to someone else

257
00:13:26,460 --> 00:13:29,760
and have them work on it
and have everything worked.

258
00:13:29,760 --> 00:13:32,370
And on top of that everything
is version controlled

259
00:13:32,370 --> 00:13:35,310
so you can connect directly
to GitHub and have it

260
00:13:35,310 --> 00:13:38,670
all set there as well.

261
00:13:38,670 --> 00:13:41,630
And so speaking of
project structure,

262
00:13:41,630 --> 00:13:45,920
if you were to take a walk
through the GitHub repositories

263
00:13:45,920 --> 00:13:49,940
at Riskified, you would
often encounter some kind

264
00:13:49,940 --> 00:13:52,760
of folder structure
like this where

265
00:13:52,760 --> 00:13:56,110
you have SQL files where
you're reading in relevant data

266
00:13:56,110 --> 00:13:58,500
doing some initial
data processing,

267
00:13:58,500 --> 00:14:03,170
getting that initial sample
population ready for analysis.

268
00:14:03,170 --> 00:14:04,670
Then you have your
R files where you

269
00:14:04,670 --> 00:14:09,500
do that all the complex steps,
the stats, visualizations,

270
00:14:09,500 --> 00:14:10,170
et cetera.

271
00:14:10,170 --> 00:14:13,160
Sometimes you're bringing extra
information from the database

272
00:14:13,160 --> 00:14:17,020
in between with smaller queries.

273
00:14:17,020 --> 00:14:19,615
And then finally, you
have this RMarkdown report

274
00:14:19,615 --> 00:14:22,240
where you share your results and
conclusions with stakeholders.

275
00:14:22,240 --> 00:14:24,310
And this is where
both of those pieces

276
00:14:24,310 --> 00:14:27,700
really come together into
this one final product.

277
00:14:27,700 --> 00:14:31,310
And because we're using R and
SQL so much within Riskified,

278
00:14:31,310 --> 00:14:34,510
we actually have a
dedicated package

279
00:14:34,510 --> 00:14:36,880
to handle those
database connections

280
00:14:36,880 --> 00:14:40,780
and also just add little
helpers that help us

281
00:14:40,780 --> 00:14:44,020
with our day-to-day flow.

282
00:14:44,020 --> 00:14:46,000
For example, we keep
all configurations

283
00:14:46,000 --> 00:14:47,260
within this package.

284
00:14:47,260 --> 00:14:49,330
Anything that's
not too sensitive,

285
00:14:49,330 --> 00:14:53,830
like host name, port, et cetera,
we just stick into the package.

286
00:14:53,830 --> 00:14:57,140
If we need to update it, we just
update it in that one place.

287
00:14:57,140 --> 00:15:00,010
And as long as people
reinstall the package,

288
00:15:00,010 --> 00:15:04,640
it gets updated across
all the computers.

289
00:15:04,640 --> 00:15:07,280
The other thing is that
we basically just use

290
00:15:07,280 --> 00:15:10,910
one database, at least
among the analytical teams,

291
00:15:10,910 --> 00:15:16,580
and so, unless you explicitly
provide a database connection,

292
00:15:16,580 --> 00:15:20,340
we assume we know what you want.

293
00:15:20,340 --> 00:15:24,080
And so that's built into our
very own get_query function.

294
00:15:26,750 --> 00:15:29,840
There was one point
recently where we actually

295
00:15:29,840 --> 00:15:33,320
had to migrate from one
database to another.

296
00:15:33,320 --> 00:15:36,590
It was a bit of a
slog, but one thing

297
00:15:36,590 --> 00:15:38,990
that did help smooth
it over a little bit

298
00:15:38,990 --> 00:15:42,410
was this option we added to
switch between the old database

299
00:15:42,410 --> 00:15:44,210
or the new database.

300
00:15:44,210 --> 00:15:46,790
You just had to do it once
at the beginning of your R

301
00:15:46,790 --> 00:15:50,090
session, and it would last
for all of your get queries.

302
00:15:50,090 --> 00:15:52,970
So you didn't have to go in and
out to start changing your code

303
00:15:52,970 --> 00:15:55,790
to specify the
database connection

304
00:15:55,790 --> 00:15:57,950
for every single
query in your code.

305
00:16:01,710 --> 00:16:07,800
One small thing that we do a lot
also is caching query results.

306
00:16:07,800 --> 00:16:10,800
The first time you ask
the database directly,

307
00:16:10,800 --> 00:16:13,470
the second time it will
store the results--

308
00:16:13,470 --> 00:16:17,430
it will have stored the
result in some temporary file,

309
00:16:17,430 --> 00:16:22,830
it's cached, ready for
reading, and unless you

310
00:16:22,830 --> 00:16:25,200
force it to connect
to the database again,

311
00:16:25,200 --> 00:16:28,470
you have a much quicker
response the second time around.

312
00:16:28,470 --> 00:16:30,840
And that saves on a lot of
time as you're iterating

313
00:16:30,840 --> 00:16:31,830
through your analysis.

314
00:16:34,390 --> 00:16:37,450
And finally, we also have other
little helpers like access

315
00:16:37,450 --> 00:16:40,000
to pipelines for bringing
large amounts of data

316
00:16:40,000 --> 00:16:43,870
from R to the database
or the other way around.

317
00:16:43,870 --> 00:16:47,000
Sometimes insert statements
just don't cut it.

318
00:16:47,000 --> 00:16:49,240
And you need for
us what is easier

319
00:16:49,240 --> 00:16:52,390
is to dump the data
into some Cloud storage

320
00:16:52,390 --> 00:16:55,625
and then bring it directly
into the database or going

321
00:16:55,625 --> 00:16:56,500
the other way around.

322
00:16:59,460 --> 00:17:03,920
And so to conclude, R and SQL,
they both have their strengths.

323
00:17:03,920 --> 00:17:07,069
R is great for
summarization across columns

324
00:17:07,069 --> 00:17:10,440
especially in selecting
specific columns,

325
00:17:10,440 --> 00:17:12,829
translations to
multiple dialects

326
00:17:12,829 --> 00:17:15,619
if you're working with
several databases.

327
00:17:15,619 --> 00:17:19,970
SQL on the other
hand, is great for--

328
00:17:19,970 --> 00:17:21,480
like is really
needed when you need

329
00:17:21,480 --> 00:17:23,540
to optimize for
speed or readability

330
00:17:23,540 --> 00:17:25,760
because you're handing
it off to another team

331
00:17:25,760 --> 00:17:29,240
to review that code.

332
00:17:29,240 --> 00:17:31,880
And there's still
a lot to learn.

333
00:17:31,880 --> 00:17:35,150
I'm sure I'm still on this
journey of learning how

334
00:17:35,150 --> 00:17:38,850
to use R and SQL well together.

335
00:17:38,850 --> 00:17:40,950
But I would love to
also hear from you.

336
00:17:40,950 --> 00:17:44,720
Is your story similar,
different from mine?

337
00:17:44,720 --> 00:17:46,670
My contact details are here.

338
00:17:46,670 --> 00:17:48,470
And thank you so much
for listening today.

339
00:17:52,970 --> 00:17:55,120
[MUSIC PLAYING]
