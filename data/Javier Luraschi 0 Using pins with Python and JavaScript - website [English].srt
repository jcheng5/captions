1
00:00:06,292 --> 00:00:07,600
Hi, everyone.

2
00:00:07,600 --> 00:00:08,880
I'm Javier Luraschi.

3
00:00:08,880 --> 00:00:12,930
And today I'm super excited to
talk to you about using pins

4
00:00:12,930 --> 00:00:15,090
with JavaScript and Python.

5
00:00:15,090 --> 00:00:16,620
But why?

6
00:00:16,620 --> 00:00:18,780
You're probably
already aware that R

7
00:00:18,780 --> 00:00:21,790
is a pretty great programming
language for data science.

8
00:00:21,790 --> 00:00:24,420
So why should we care?

9
00:00:24,420 --> 00:00:26,570
Well, let me show you something.

10
00:00:26,570 --> 00:00:29,600
There was a survey created
by Stack Overflow that

11
00:00:29,600 --> 00:00:32,930
shows that the top five
programming languages that

12
00:00:32,930 --> 00:00:37,850
are the most popular are
JavaScript, HTML with CSS, SQL,

13
00:00:37,850 --> 00:00:39,470
Python, and Java.

14
00:00:39,470 --> 00:00:41,600
These happen to be the
programming languages that

15
00:00:41,600 --> 00:00:44,000
basically run the
software in the world.

16
00:00:44,000 --> 00:00:46,020
Now R is not there.

17
00:00:46,020 --> 00:00:53,120
It has 5.7% awareness compared to
67.7% awareness of JavaScript.

18
00:00:53,120 --> 00:00:57,620
So the likelihood of you having
to interoperate with JavaScript

19
00:00:57,620 --> 00:01:01,070
or having to collaborate with
someone that loves JavaScript

20
00:01:01,070 --> 00:01:04,950
or Python or SQL is quite high.

21
00:01:04,950 --> 00:01:08,300
So how can we get
R to interoperate

22
00:01:08,300 --> 00:01:11,870
with these programming languages
and for us as R data scientists

23
00:01:11,870 --> 00:01:13,580
to collaborate with others?

24
00:01:13,580 --> 00:01:16,160
And that's what I want
to explore on this talk.

25
00:01:16,160 --> 00:01:18,620
But let me give you
some more context.

26
00:01:18,620 --> 00:01:20,660
Rather than talking
about technologies,

27
00:01:20,660 --> 00:01:23,300
let's talk about
a fictional team

28
00:01:23,300 --> 00:01:24,950
that is working on something.

29
00:01:24,950 --> 00:01:27,090
And this team is composed
by three members.

30
00:01:27,090 --> 00:01:29,630
The first one is
data scientist Darla.

31
00:01:29,630 --> 00:01:32,990
Many of you will feel
familiar with her

32
00:01:32,990 --> 00:01:36,080
because she happens to love
R. R is her main programming

33
00:01:36,080 --> 00:01:37,460
language.

34
00:01:37,460 --> 00:01:39,170
She's very into data science.

35
00:01:39,170 --> 00:01:41,270
And she's very, very
competent with the tools

36
00:01:41,270 --> 00:01:45,710
she knows and loves, like the
tidyverse or tidymodels or even

37
00:01:45,710 --> 00:01:50,150
Base R, or other packages
from the R community.

38
00:01:50,150 --> 00:01:52,880
There's one more character
that we'll introduce,

39
00:01:52,880 --> 00:01:55,700
which is graphics Greg.

40
00:01:55,700 --> 00:01:59,120
Now graphics Greg comes
from a background on design,

41
00:01:59,120 --> 00:02:00,890
and he loves using JavaScript.

42
00:02:00,890 --> 00:02:06,380
There's no way that Greg is
going to learn how to use R.

43
00:02:06,380 --> 00:02:07,920
And that's not necessarily bad.

44
00:02:07,920 --> 00:02:09,259
R is great for data science.

45
00:02:09,259 --> 00:02:12,860
But Greg loves doing
static websites

46
00:02:12,860 --> 00:02:15,392
and helping people
with their design.

47
00:02:15,392 --> 00:02:16,850
So really, the
skills that he needs

48
00:02:16,850 --> 00:02:18,890
are CSS, HTML, and JavaScript.

49
00:02:18,890 --> 00:02:20,930
And he's very
competent with that.

50
00:02:20,930 --> 00:02:25,070
And there's one more person that
perhaps exemplifies the Python

51
00:02:25,070 --> 00:02:25,640
community.

52
00:02:25,640 --> 00:02:28,460
And this would be
machine learning Monica.

53
00:02:28,460 --> 00:02:30,560
Monica likes to do
machine learning

54
00:02:30,560 --> 00:02:33,290
with things like network
analysis and deep learning.

55
00:02:33,290 --> 00:02:35,090
And she happens to love Python.

56
00:02:35,090 --> 00:02:38,390
She might be familiar
with R, but really, she's

57
00:02:38,390 --> 00:02:39,200
really into Python.

58
00:02:39,200 --> 00:02:42,632
And it's really hard to
convince her to do otherwise.

59
00:02:42,632 --> 00:02:44,090
So the problem that
we have at hand

60
00:02:44,090 --> 00:02:48,170
is a pretty common problem
which is we live in a world

61
00:02:48,170 --> 00:02:50,150
where not everyone
speaks the same language.

62
00:02:50,150 --> 00:02:52,640
Not everyone speaks
R. So let's try

63
00:02:52,640 --> 00:02:55,970
to solve this problem from
the perspective of Darla which

64
00:02:55,970 --> 00:02:58,340
is our data scientist
who loves R.

65
00:02:58,340 --> 00:03:01,640
What can Darla do to get
us closer to collaborating

66
00:03:01,640 --> 00:03:03,350
with Greg and Monica?

67
00:03:03,350 --> 00:03:06,890
So a lot of the times what
Darla does on her day to day

68
00:03:06,890 --> 00:03:08,960
is analyzing files.

69
00:03:08,960 --> 00:03:10,630
And she has them
in front of her.

70
00:03:10,630 --> 00:03:11,840
She has different files.

71
00:03:11,840 --> 00:03:14,030
Perhaps, we can call
them data frames.

72
00:03:14,030 --> 00:03:19,760
And she usually tidies them,
analyzes them, shares them

73
00:03:19,760 --> 00:03:23,450
and creates shiny applications
and R Markdown out of them.

74
00:03:23,450 --> 00:03:26,570
And you know, it
would be-- it wouldn't

75
00:03:26,570 --> 00:03:30,350
be really acceptable for Darla
to ask Greg or Monica to have

76
00:03:30,350 --> 00:03:34,520
to learn R or to install R and
RStudio to really collaborate

77
00:03:34,520 --> 00:03:35,300
with her.

78
00:03:35,300 --> 00:03:37,340
So in her mind what
she's thinking is, well,

79
00:03:37,340 --> 00:03:40,340
if I can share the basic
building block, which

80
00:03:40,340 --> 00:03:42,830
is the dataset, right,
that she's working on,

81
00:03:42,830 --> 00:03:45,680
if I could share that
with Greg and Monica,

82
00:03:45,680 --> 00:03:47,870
I have a better chance
of convincing her--

83
00:03:47,870 --> 00:03:50,750
convincing them of
collaborating with me.

84
00:03:50,750 --> 00:03:53,430
So what she's going on her
mind is thinking, well,

85
00:03:53,430 --> 00:03:55,400
how can I share
these data frames

86
00:03:55,400 --> 00:04:00,050
in technologies like GitHub,
or Kaggle, or RStudio Connect

87
00:04:00,050 --> 00:04:05,270
to help Greg and Monica
reuse my datasets

88
00:04:05,270 --> 00:04:07,640
without having to install R?

89
00:04:07,640 --> 00:04:11,300
And you know, there's actually
great news for many of you

90
00:04:11,300 --> 00:04:14,810
that are already familiar with
this particular problem which

91
00:04:14,810 --> 00:04:19,130
is Darla, knowing that she's
a competent data scientist,

92
00:04:19,130 --> 00:04:22,730
knows that there is a package
called pins, which we've been

93
00:04:22,730 --> 00:04:26,270
developing in the R community
for the last year and a half,

94
00:04:26,270 --> 00:04:28,370
and allows her to
do tasks like this,

95
00:04:28,370 --> 00:04:32,450
allows her to retrieve data
and upload data into the cloud.

96
00:04:32,450 --> 00:04:35,210
So what is the pins
package as a quick recap?

97
00:04:35,210 --> 00:04:36,740
Well, first of all,
the pins package

98
00:04:36,740 --> 00:04:39,470
allows you to get
a remote resource

99
00:04:39,470 --> 00:04:41,220
into your local machine.

100
00:04:41,220 --> 00:04:44,420
So say, if you have a remote
URL, you have CSV file,

101
00:04:44,420 --> 00:04:48,570
you can create a local cache
on your machine very easily.

102
00:04:48,570 --> 00:04:51,080
Also once you're connected
to those remote services

103
00:04:51,080 --> 00:04:54,180
like Kaggle, or GitHub,
or RStudio Connect,

104
00:04:54,180 --> 00:04:56,750
you can also search
those services

105
00:04:56,750 --> 00:04:59,270
for datasets that
are interesting to you

106
00:04:59,270 --> 00:05:01,340
all within the pins package.

107
00:05:01,340 --> 00:05:03,560
And last but not
least and especially

108
00:05:03,560 --> 00:05:06,020
important for this
particular problem that we're

109
00:05:06,020 --> 00:05:08,330
trying to solve, is
the pins package

110
00:05:08,330 --> 00:05:11,780
allows you to share datasets
in different cloud providers

111
00:05:11,780 --> 00:05:15,620
like Google, Kaggle,
Azure, and RStudio Connect.

112
00:05:15,620 --> 00:05:17,930
And you can do
that quite easily.

113
00:05:17,930 --> 00:05:20,480
And this is something that
Darla is already familiar with.

114
00:05:20,480 --> 00:05:23,030
She knows that she
can share datasets

115
00:05:23,030 --> 00:05:28,580
with other colleagues that
also use R and the pins package.

116
00:05:28,580 --> 00:05:29,910
Now how does this work?

117
00:05:29,910 --> 00:05:32,698
Well, the pins package
is actually quite simple.

118
00:05:32,698 --> 00:05:33,740
You install it from CRAN.

119
00:05:33,740 --> 00:05:35,030
You load the library.

120
00:05:35,030 --> 00:05:38,750
And then you can
ask it to pin data

121
00:05:38,750 --> 00:05:42,170
set, either an R object
or a remote resource

122
00:05:42,170 --> 00:05:44,570
or a local file, into
your local board, which

123
00:05:44,570 --> 00:05:47,000
is what we're doing in
this particular example.

124
00:05:47,000 --> 00:05:49,400
And then after you Pin
that resource locally,

125
00:05:49,400 --> 00:05:51,800
you can use your favorite
tools to process it.

126
00:05:51,800 --> 00:05:55,220
In this case, we're just
reading a remote JSON file,

127
00:05:55,220 --> 00:05:58,760
saving it locally, and then
using jsonlite to read it.

128
00:05:58,760 --> 00:06:01,100
Now that's the simple use
case of the pins package

129
00:06:01,100 --> 00:06:03,410
to bring things into
your local machine.

130
00:06:03,410 --> 00:06:06,530
But you can also use the pins
package to push things out

131
00:06:06,530 --> 00:06:08,060
of your local machine.

132
00:06:08,060 --> 00:06:10,640
And what Darla could
do here, potentially,

133
00:06:10,640 --> 00:06:16,120
is register a board, which is a
concept from the pins package.

134
00:06:16,120 --> 00:06:20,570
The board that she registers
could be GitHub, DigitalOcean,

135
00:06:20,570 --> 00:06:26,330
Google Cloud, RStudio,
Kaggle, Azure, or AWS S3.

136
00:06:26,330 --> 00:06:29,630
And she can basically push
the dataset from something

137
00:06:29,630 --> 00:06:35,300
as simple of an array of 10
numbers by saying pin 1 to 10,

138
00:06:35,300 --> 00:06:38,210
name equals numbers, and
then board equals say,

139
00:06:38,210 --> 00:06:40,190
Google Cloud, whatever.

140
00:06:40,190 --> 00:06:43,370
And the dataset
that she has locally

141
00:06:43,370 --> 00:06:47,060
can be pushed to be shared
to those particular services.

142
00:06:47,060 --> 00:06:49,310
And if she needs to get it
back at any point in time,

143
00:06:49,310 --> 00:06:51,290
she can just say pin
get, and the dataset

144
00:06:51,290 --> 00:06:54,260
will come back from those
services into her local machine

145
00:06:54,260 --> 00:06:55,730
again.

146
00:06:55,730 --> 00:06:57,890
You can do a little
bit more complex stuff.

147
00:06:57,890 --> 00:07:02,090
You can say-- suppose that
you're collaborating in a image

148
00:07:02,090 --> 00:07:04,640
processing project,
and you have ImageNet

149
00:07:04,640 --> 00:07:07,140
You can retrieve a smaller
version of ImageNet called Tiny

150
00:07:07,140 --> 00:07:10,850
ImageNet by saying, pin
these remote resource locally

151
00:07:10,850 --> 00:07:12,800
into my local machine.

152
00:07:12,800 --> 00:07:14,493
And we'll call it ImageNet.

153
00:07:14,493 --> 00:07:16,160
And then what you can
do is you can also

154
00:07:16,160 --> 00:07:18,470
say, oh, give me back ImageNet.

155
00:07:18,470 --> 00:07:21,500
And now I want to push
it to, perhaps, Kaggle.

156
00:07:21,500 --> 00:07:23,630
Because maybe you
did some cleaning

157
00:07:23,630 --> 00:07:25,370
of the data or some processing.

158
00:07:25,370 --> 00:07:28,580
So all of these are tasks that
the pins package supports,

159
00:07:28,580 --> 00:07:29,630
including finding.

160
00:07:29,630 --> 00:07:31,550
You can just say
pin_find, and it

161
00:07:31,550 --> 00:07:34,820
will find the
different datasets

162
00:07:34,820 --> 00:07:37,340
that are available in
the different boards.

163
00:07:37,340 --> 00:07:38,880
So this is quite great.

164
00:07:38,880 --> 00:07:42,290
And if we think about it
from Darla's point of view,

165
00:07:42,290 --> 00:07:46,550
we're pretty close to the
space that Greg and Monica

166
00:07:46,550 --> 00:07:47,600
are interested.

167
00:07:47,600 --> 00:07:51,320
We've moved our datasets from
our local machine to the Cloud.

168
00:07:51,320 --> 00:07:55,430
But then again, then we have
the question that in this case

169
00:07:55,430 --> 00:07:58,770
Nelson Bighetti is asking, and
he's saying, he's thinking,

170
00:07:58,770 --> 00:08:01,760
wait, this is a pretty great
package for the R community.

171
00:08:01,760 --> 00:08:05,420
Why can't we just do the same
from JavaScript or Python?

172
00:08:05,420 --> 00:08:08,090
Rather than having to be
downloading random JSON files

173
00:08:08,090 --> 00:08:11,870
or CSV files and figuring out
authentication and permissions,

174
00:08:11,870 --> 00:08:13,730
why can't we just have
the same code being

175
00:08:13,730 --> 00:08:16,430
used in Python or JavaScript?

176
00:08:16,430 --> 00:08:18,650
And sure enough, the
whole point of this talk

177
00:08:18,650 --> 00:08:22,580
is for me to introduce you
to a new project, pins.js,

178
00:08:22,580 --> 00:08:24,980
which is a reimplementation
of the pins R

179
00:08:24,980 --> 00:08:29,370
package into JavaScript that
supports Python as well.

180
00:08:29,370 --> 00:08:33,409
This enables you to use
pins from technologies

181
00:08:33,409 --> 00:08:38,090
like web browser with HTML,
or web applications running

182
00:08:38,090 --> 00:08:40,610
Node.js or even Python.

183
00:08:40,610 --> 00:08:43,039
And the way that
we accomplish this

184
00:08:43,039 --> 00:08:46,190
is basically by reimplementing
the functionality available on

185
00:08:46,190 --> 00:08:47,900
R in JavaScript.

186
00:08:47,900 --> 00:08:50,840
And this allows you to
interoperate with R.

187
00:08:50,840 --> 00:08:53,510
So if someone shares
a dataset from R,

188
00:08:53,510 --> 00:08:56,480
you can then quite easily get
the dataset from JavaScript

189
00:08:56,480 --> 00:08:58,910
or Python, which is
quite great, and even

190
00:08:58,910 --> 00:09:01,940
push datasets from
Python and JavaScript

191
00:09:01,940 --> 00:09:04,530
back into cloud
service providers.

192
00:09:04,530 --> 00:09:06,420
So how does this look like?

193
00:09:06,420 --> 00:09:08,960
Well, here we have
some HTML code.

194
00:09:08,960 --> 00:09:09,930
It's quite simple.

195
00:09:09,930 --> 00:09:13,340
It's declaring that
this particular HTML

196
00:09:13,340 --> 00:09:17,090
file needs the pins
library and also is running

197
00:09:17,090 --> 00:09:19,500
within the browser environment.

198
00:09:19,500 --> 00:09:22,310
And then we're basically
just defining some JavaScript

199
00:09:22,310 --> 00:09:24,530
callbacks to use pins.

200
00:09:24,530 --> 00:09:27,530
In this particular case, we
are saying Board Register

201
00:09:27,530 --> 00:09:29,510
to register a local board.

202
00:09:29,510 --> 00:09:32,380
And then we're creating a
dataset, which the dataset is just

203
00:09:32,380 --> 00:09:33,590
the number 42.

204
00:09:33,590 --> 00:09:35,870
And we're saving it
in a local board.

205
00:09:35,870 --> 00:09:37,400
And then we're
retrieving the value,

206
00:09:37,400 --> 00:09:44,420
and then we're printing it
into the web page inside a div,

207
00:09:44,420 --> 00:09:46,470
which is our result.

208
00:09:46,470 --> 00:09:48,733
And we can complicate
this a little bit more.

209
00:09:48,733 --> 00:09:50,150
Rather than just
creating one dataset

210
00:09:50,150 --> 00:09:52,970
we can create multiple
datasets in JavaScript,

211
00:09:52,970 --> 00:09:55,340
say, using a For
Loop from 1 to 10,

212
00:09:55,340 --> 00:09:59,610
we'll push those datasets
into the local board.

213
00:09:59,610 --> 00:10:01,940
And then we can search
them and create perhaps

214
00:10:01,940 --> 00:10:06,320
a page table and JavaScript that
shows us all the different pins

215
00:10:06,320 --> 00:10:10,670
that we have stored, which
you can see on the top right.

216
00:10:10,670 --> 00:10:13,650
And we can even go a
little bit step further.

217
00:10:13,650 --> 00:10:17,090
And if you're really into
state-of-the-art JavaScript

218
00:10:17,090 --> 00:10:19,280
applications, you
can use a library

219
00:10:19,280 --> 00:10:23,290
called Babel which allows you
to transpile modern JavaScript

220
00:10:23,290 --> 00:10:26,020
into compatible JavaScript.

221
00:10:26,020 --> 00:10:29,530
And you can make use of,
perhaps, the new pipe operator

222
00:10:29,530 --> 00:10:33,970
to get the Iris JSON
file using pins and then

223
00:10:33,970 --> 00:10:40,180
pipe it into the function that
basically reads this dataset

224
00:10:40,180 --> 00:10:43,390
from JSON and then creating a
data table with the entire Iris

225
00:10:43,390 --> 00:10:44,063
dataset.

226
00:10:44,063 --> 00:10:45,730
And that's what we
see on the top right.

227
00:10:45,730 --> 00:10:48,310
So again, you're
just using JavaScript

228
00:10:48,310 --> 00:10:51,070
to different degrees,
using pins in the way

229
00:10:51,070 --> 00:10:54,150
that you would expect
to use JavaScript.

230
00:10:54,150 --> 00:10:57,720
And similar for Python, if you
want to use pins from Python,

231
00:10:57,720 --> 00:11:00,765
all you have to do
is run a pip install

232
00:11:00,765 --> 00:11:06,780
with the URL that is hosting
the pins.js Python library.

233
00:11:06,780 --> 00:11:08,970
And then you import a
library with import pins.

234
00:11:08,970 --> 00:11:12,570
And then you create pins
with pins.pin number 42.

235
00:11:12,570 --> 00:11:15,700
And then the board where
you're storing these data into.

236
00:11:15,700 --> 00:11:18,810
You can also do things like
retrieving a pin, obviously,

237
00:11:18,810 --> 00:11:21,360
from either the local
board or a remote board.

238
00:11:21,360 --> 00:11:23,910
And then you can also
find and to figure out

239
00:11:23,910 --> 00:11:26,250
which are the pins that
are available to you, which

240
00:11:26,250 --> 00:11:28,950
in this case is just the
number that we just pinned

241
00:11:28,950 --> 00:11:30,860
and the Iris dataset.

242
00:11:30,860 --> 00:11:31,360
All right.

243
00:11:31,360 --> 00:11:34,200
So this gives us a
pretty broad overview

244
00:11:34,200 --> 00:11:37,170
of how the pins package works.

245
00:11:37,170 --> 00:11:40,630
Well, we want to see it in
action on a real use case.

246
00:11:40,630 --> 00:11:42,300
So let's think about this.

247
00:11:42,300 --> 00:11:45,787
Darla, Greg, and Monica
get together over a lunch.

248
00:11:45,787 --> 00:11:47,370
And they're trying
to figure out which

249
00:11:47,370 --> 00:11:51,090
is the most important character
of the last book in Game

250
00:11:51,090 --> 00:11:52,190
of Thrones.

251
00:11:52,190 --> 00:11:56,490
So they have some
insight that perhaps,

252
00:11:56,490 --> 00:11:59,460
either Daenerys or
maybe Tyrion, are

253
00:11:59,460 --> 00:12:00,840
the most important characters.

254
00:12:00,840 --> 00:12:03,390
But they can't really
figure out exactly which one

255
00:12:03,390 --> 00:12:04,930
is the most important one.

256
00:12:04,930 --> 00:12:07,710
So Darla, being the
competent data scientist

257
00:12:07,710 --> 00:12:10,350
that we know she is,
she just, after lunch,

258
00:12:10,350 --> 00:12:16,800
she gets back to her office
and launches the R instance

259
00:12:16,800 --> 00:12:20,700
and runs the pins
library to find out

260
00:12:20,700 --> 00:12:24,600
if there's any interesting
datasets on the Kaggle service.

261
00:12:24,600 --> 00:12:28,120
And sure enough, she finds that
Kaggle has at least three data

262
00:12:28,120 --> 00:12:28,620
sets.

263
00:12:28,620 --> 00:12:31,500
One containing all the
scripts from the HBO series,

264
00:12:31,500 --> 00:12:34,260
the other one the subtitles,
and the third dataset

265
00:12:34,260 --> 00:12:36,660
contains the actual books from--

266
00:12:36,660 --> 00:12:38,970
with all the dialogues
and content--

267
00:12:38,970 --> 00:12:40,620
from Game of Thrones.

268
00:12:40,620 --> 00:12:42,540
So sure enough, this
looks interesting.

269
00:12:42,540 --> 00:12:46,320
She uses pin_get to get this
particular dataset and finds

270
00:12:46,320 --> 00:12:50,610
out that there's five books,
five files, one for each book.

271
00:12:50,610 --> 00:12:53,610
She loads the first book
using pin_get and the head

272
00:12:53,610 --> 00:12:55,170
of that particular file.

273
00:12:55,170 --> 00:12:57,300
And she finds that
sure enough, the file

274
00:12:57,300 --> 00:13:00,510
starts with a Game of Thrones
book one, A Song of Ice

275
00:13:00,510 --> 00:13:01,290
and Fire.

276
00:13:01,290 --> 00:13:01,960
Great.

277
00:13:01,960 --> 00:13:03,310
She has the data.

278
00:13:03,310 --> 00:13:05,430
So what she can do
next is something

279
00:13:05,430 --> 00:13:06,990
that you're pretty
familiar with.

280
00:13:06,990 --> 00:13:12,060
She can use tools like dplyr
or tidytext or even stringr

281
00:13:12,060 --> 00:13:13,680
with regular expressions.

282
00:13:13,680 --> 00:13:16,410
Whatever skills you
already know and that you

283
00:13:16,410 --> 00:13:19,020
are learning about
during this conference,

284
00:13:19,020 --> 00:13:22,560
basically, Darla makes
use of those skills

285
00:13:22,560 --> 00:13:24,840
to transform the dataset
from raw text

286
00:13:24,840 --> 00:13:28,530
into a tidy table that contains
the proper relationships

287
00:13:28,530 --> 00:13:29,850
between characters.

288
00:13:29,850 --> 00:13:31,650
She finds out, for
instance, that one

289
00:13:31,650 --> 00:13:34,530
of the first interactions
is Addam Marbrand with Jaime

290
00:13:34,530 --> 00:13:37,320
Lannister, and that
with a weight of three.

291
00:13:37,320 --> 00:13:39,120
And maybe the way that
Darla accomplished

292
00:13:39,120 --> 00:13:41,790
this was by parsing
each sentence

293
00:13:41,790 --> 00:13:44,940
and extracting the
characters from each sentence

294
00:13:44,940 --> 00:13:47,500
and figuring out just
how they are connected.

295
00:13:47,500 --> 00:13:51,000
So yeah, sure enough, she
creates a beautiful dataset

296
00:13:51,000 --> 00:13:52,950
which contains most
of the interactions.

297
00:13:52,950 --> 00:13:56,778
And she reports back and
tells Greg and Monica, hey,

298
00:13:56,778 --> 00:13:58,320
I think that on the
fifth book, there

299
00:13:58,320 --> 00:14:02,340
is a lot of relationships
between Jon Snow

300
00:14:02,340 --> 00:14:05,570
and also Tyrion and
other characters.

301
00:14:05,570 --> 00:14:06,630
So check it out.

302
00:14:06,630 --> 00:14:09,480
And what she does is
she shares the dataset

303
00:14:09,480 --> 00:14:15,930
using pins by registering a
board in the S3 AWS service.

304
00:14:15,930 --> 00:14:20,430
And she shares these cleaned up
dataset with Greg and Monica.

305
00:14:20,430 --> 00:14:25,050
And what is great is that
when Greg hears the news,

306
00:14:25,050 --> 00:14:26,310
he's super excited.

307
00:14:26,310 --> 00:14:30,540
Because Greg is not that much
interested into doing data

308
00:14:30,540 --> 00:14:33,060
science, but he's very
interested in creating

309
00:14:33,060 --> 00:14:35,760
intuitive visualizations
that can really help

310
00:14:35,760 --> 00:14:38,590
us understand how data behaves.

311
00:14:38,590 --> 00:14:42,270
So she looks at Darla's
dataset and just runs

312
00:14:42,270 --> 00:14:46,170
to boot his Sublime editor
or Visual Studio Code

313
00:14:46,170 --> 00:14:50,460
or whatever he uses and
loads the pins package

314
00:14:50,460 --> 00:14:52,780
and then retrieves
the dataset from S3.

315
00:14:52,780 --> 00:14:54,840
And as you can see,
he's accomplishing this

316
00:14:54,840 --> 00:14:56,430
with just two lines of code.

317
00:14:56,430 --> 00:14:57,450
He gets the data.

318
00:14:57,450 --> 00:14:58,380
And then he loads it.

319
00:14:58,380 --> 00:15:00,970
And he's good to go.

320
00:15:00,970 --> 00:15:02,970
So then he thinks about
it, and he's like, well,

321
00:15:02,970 --> 00:15:07,350
maybe I can use D3, which
is modern data visualization

322
00:15:07,350 --> 00:15:13,110
library available in JavaScript,
to like create a network

323
00:15:13,110 --> 00:15:16,410
visualization of how
all the relationships

324
00:15:16,410 --> 00:15:18,520
of these characters looks like.

325
00:15:18,520 --> 00:15:20,400
And sure enough,
he uses his skill

326
00:15:20,400 --> 00:15:25,980
to create this particular
graph which looks actually

327
00:15:25,980 --> 00:15:28,705
quite compelling
and interesting.

328
00:15:28,705 --> 00:15:30,330
As you can see on
the graph, this graph

329
00:15:30,330 --> 00:15:34,120
that graphic Greg created,
there's two major components.

330
00:15:34,120 --> 00:15:36,630
There's one component
on the top surrounding

331
00:15:36,630 --> 00:15:40,500
Jon Snow with other
characters like Theon Greyjoy,

332
00:15:40,500 --> 00:15:43,020
and also Stannis
Baratheon. But there's also

333
00:15:43,020 --> 00:15:46,620
another component of
characters surrounding

334
00:15:46,620 --> 00:15:50,940
Daenerys Targaryen, like
Tyrion Lannister and Cersei.

335
00:15:50,940 --> 00:15:53,580
And you know it's interesting
because this is just

336
00:15:53,580 --> 00:15:58,450
a different type of skills
that is super great looking,

337
00:15:58,450 --> 00:16:01,480
intuitive, that
anyone can understand.

338
00:16:01,480 --> 00:16:02,710
Perhaps, it's interactive.

339
00:16:02,710 --> 00:16:04,150
And it really
prompts other people

340
00:16:04,150 --> 00:16:07,450
to understand this data
set with the scripts on--

341
00:16:07,450 --> 00:16:11,710
with the skills from
Greg and Darla combined.

342
00:16:11,710 --> 00:16:14,730
And sure enough, Monica is
also super excited about this.

343
00:16:14,730 --> 00:16:17,462
She looks at the dataset,
and she's like, wow, I

344
00:16:17,462 --> 00:16:18,670
really need to get into this.

345
00:16:18,670 --> 00:16:21,910
But what goes in her
mind is, I really

346
00:16:21,910 --> 00:16:25,990
want to know exactly who's
the most important character?

347
00:16:25,990 --> 00:16:28,630
Is it Jon Snow,
or is it Daenerys?

348
00:16:28,630 --> 00:16:30,610
I want to know with a numeric--

349
00:16:30,610 --> 00:16:34,300
with a numeric value, which is
the most important character.

350
00:16:34,300 --> 00:16:38,530
And sure enough, with pins, she
can now load the pins library

351
00:16:38,530 --> 00:16:41,620
and retrieve this dataset
that Darla carefully created

352
00:16:41,620 --> 00:16:45,070
and load it into
her Python session

353
00:16:45,070 --> 00:16:46,130
and load the characters.

354
00:16:46,130 --> 00:16:48,700
And again with three lines
of code, she's ready to go.

355
00:16:48,700 --> 00:16:51,640
She can do some more analysis.

356
00:16:51,640 --> 00:16:56,590
And taking the dataset from
Darla and the inspiration

357
00:16:56,590 --> 00:16:58,480
from Greg, it really
pops on her head,

358
00:16:58,480 --> 00:17:00,820
and she figures out that maybe
she should use some graph

359
00:17:00,820 --> 00:17:01,990
processing.

360
00:17:01,990 --> 00:17:04,270
So she loads the
Networkx library

361
00:17:04,270 --> 00:17:10,089
which can allow her to do graph
processing of her graph data

362
00:17:10,089 --> 00:17:10,900
sets.

363
00:17:10,900 --> 00:17:15,160
And she basically uses a concept
called degree of centrality,

364
00:17:15,160 --> 00:17:17,920
to which, the way
that she interpreted--

365
00:17:17,920 --> 00:17:19,630
interprets this
concept is if she

366
00:17:19,630 --> 00:17:22,000
can find the degree
of centrality

367
00:17:22,000 --> 00:17:25,089
of this particular graph of
Game of Thrones characters,

368
00:17:25,089 --> 00:17:29,140
that could also imply which
is the most central character

369
00:17:29,140 --> 00:17:33,460
in the roles of the different
books that are available.

370
00:17:33,460 --> 00:17:35,560
And sure enough, after
running her script

371
00:17:35,560 --> 00:17:39,280
and doing some magic, she finds
out that on the first book,

372
00:17:39,280 --> 00:17:42,280
King Stark is the most
important character.

373
00:17:42,280 --> 00:17:45,670
But on the fifth book, the race
between Jon Snow and Daenerys

374
00:17:45,670 --> 00:17:46,990
are pretty close.

375
00:17:46,990 --> 00:17:49,270
Jon Snow seems to
be a bit of more

376
00:17:49,270 --> 00:17:52,600
of a central character
with a score of 0.19,

377
00:17:52,600 --> 00:17:56,140
while Daenerys Targayen
has a score of 0.18.

378
00:17:56,140 --> 00:18:00,340
So again, she find out that
perhaps, objectively, Jon Snow

379
00:18:00,340 --> 00:18:03,220
is the most important
character in the entire season

380
00:18:03,220 --> 00:18:07,000
and the series, or at
least on the last book.

381
00:18:07,000 --> 00:18:10,690
But honestly, more importantly,
what we just realized here

382
00:18:10,690 --> 00:18:13,840
is that we found out
a way for three people

383
00:18:13,840 --> 00:18:16,240
with three different
technologies and three very

384
00:18:16,240 --> 00:18:19,300
different set of skills
to collaborate together

385
00:18:19,300 --> 00:18:21,100
using technologies
that they all love

386
00:18:21,100 --> 00:18:26,590
and common libraries that they
can reuse to better collaborate

387
00:18:26,590 --> 00:18:31,120
and tackle bigger, more
complex data science problems.

388
00:18:31,120 --> 00:18:33,070
So I'm really
excited to see what

389
00:18:33,070 --> 00:18:35,770
you do with this new library.

390
00:18:35,770 --> 00:18:41,500
If you need more information,
please visit pinsjs.github.io.

391
00:18:41,500 --> 00:18:45,700
I want to say that this is a
community library that we've

392
00:18:45,700 --> 00:18:47,200
been developing.

393
00:18:47,200 --> 00:18:49,540
And it definitely needs
the help of the community

394
00:18:49,540 --> 00:18:52,330
to extend support
for more boards

395
00:18:52,330 --> 00:18:57,370
beyond S3, local boards,
and RStudio Connect, boards

396
00:18:57,370 --> 00:18:59,080
like Kaggle and GitHub.

397
00:18:59,080 --> 00:19:01,780
And I also want to
say thanks to people

398
00:19:01,780 --> 00:19:04,390
that have been involved in
this project like Nataliya

399
00:19:04,390 --> 00:19:07,270
Stepanova and Michael Kalygin.

400
00:19:07,270 --> 00:19:09,230
Thank you so much for
listening to this talk.

401
00:19:09,230 --> 00:19:13,410
And I hope that you are ready
to start sharing your datasets.
