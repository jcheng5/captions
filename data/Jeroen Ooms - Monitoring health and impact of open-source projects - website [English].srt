1
00:00:07,568 --> 00:00:08,830
Good morning.

2
00:00:08,830 --> 00:00:10,490
Let me start with a question.

3
00:00:10,490 --> 00:00:13,300
What do you think is the most
important aspect of using R

4
00:00:13,300 --> 00:00:15,040
successfully?

5
00:00:15,040 --> 00:00:17,380
Is it being able to write
high performance code,

6
00:00:17,380 --> 00:00:19,750
or making beautiful
graphics, or perhaps learning

7
00:00:19,750 --> 00:00:21,910
how to write R packages?

8
00:00:21,910 --> 00:00:23,200
Here's my take on it.

9
00:00:23,200 --> 00:00:26,800
I think the most important
aspect of using R successfully

10
00:00:26,800 --> 00:00:30,280
is being able to find and choose
the right tools for the job

11
00:00:30,280 --> 00:00:32,090
that you're working on.

12
00:00:32,090 --> 00:00:34,600
I think a lot of data science
projects, they got stuck,

13
00:00:34,600 --> 00:00:36,700
or they're not as
successful as they

14
00:00:36,700 --> 00:00:40,750
could be because they chose
the wrong tools in the project

15
00:00:40,750 --> 00:00:42,610
to build on.

16
00:00:42,610 --> 00:00:44,630
And once you've gone
with a certain tool,

17
00:00:44,630 --> 00:00:47,510
it can be very hard to
go back and fix that.

18
00:00:47,510 --> 00:00:48,940
My name is Jeroen Ooms.

19
00:00:48,940 --> 00:00:51,280
I've written quite a few
R packages, some of which

20
00:00:51,280 --> 00:00:52,450
you may have used.

21
00:00:52,450 --> 00:00:54,700
I'm also the maintainer
of the compilers

22
00:00:54,700 --> 00:00:57,790
and the build infrastructure
for R on Windows.

23
00:00:57,790 --> 00:01:01,840
And I'm a staff member of the
rOpenSci group at UC Berkeley.

24
00:01:01,840 --> 00:01:03,550
And within rOpenSci,
we're working

25
00:01:03,550 --> 00:01:07,030
on a big ambitious new
project called R-universe.

26
00:01:07,030 --> 00:01:10,240
And in essence, r-universe
is an open platform

27
00:01:10,240 --> 00:01:13,090
based on Git for managing
personal R package

28
00:01:13,090 --> 00:01:14,440
repositories.

29
00:01:14,440 --> 00:01:16,750
So that means that once the
packages are registered,

30
00:01:16,750 --> 00:01:18,850
the system will
automatically build binaries

31
00:01:18,850 --> 00:01:22,600
and documentation and so on,
directly from Git every time

32
00:01:22,600 --> 00:01:26,380
the package author
pushes an update.

33
00:01:26,380 --> 00:01:28,640
And these can be R
packages that are also

34
00:01:28,640 --> 00:01:31,960
on CRAN or Bioconductor or
just your personal R packages.

35
00:01:31,960 --> 00:01:34,210
And that really doesn't
matter as long as the source

36
00:01:34,210 --> 00:01:37,690
code is available from Git.

37
00:01:37,690 --> 00:01:40,240
However, publishing
packages is actually

38
00:01:40,240 --> 00:01:42,460
not the goal of this project.

39
00:01:42,460 --> 00:01:45,520
More importantly, it is
a starting point for us

40
00:01:45,520 --> 00:01:50,110
to experiment with calculating
metrics and showing

41
00:01:50,110 --> 00:01:53,470
other background information
about a package that

42
00:01:53,470 --> 00:01:57,160
may tell us something about
the health and the role

43
00:01:57,160 --> 00:02:00,050
and the impact of a
particular project.

44
00:02:00,050 --> 00:02:01,500
So towards the end
of this talk, I

45
00:02:01,500 --> 00:02:04,660
will briefly explain
what R-universe does

46
00:02:04,660 --> 00:02:06,460
and where this is coming from.

47
00:02:06,460 --> 00:02:09,940
But mostly today, I
want to talk about why

48
00:02:09,940 --> 00:02:12,700
we believe it is important
to have better tool

49
00:02:12,700 --> 00:02:15,340
and to actively monitor
the status and the health

50
00:02:15,340 --> 00:02:17,350
of research software.

51
00:02:17,350 --> 00:02:19,990
Because I think there are
some important differences

52
00:02:19,990 --> 00:02:21,850
between using open
source software

53
00:02:21,850 --> 00:02:26,260
and commercial software that are
not always immediately obvious.

54
00:02:26,260 --> 00:02:28,840
In particular, when it
comes to expectations

55
00:02:28,840 --> 00:02:31,900
about the quality
and the lifecycle

56
00:02:31,900 --> 00:02:36,260
and the participation
in open source projects.

57
00:02:36,260 --> 00:02:39,880
So I hope to make you think
a little bit about things

58
00:02:39,880 --> 00:02:42,670
you may want to consider when
you're going to use open source

59
00:02:42,670 --> 00:02:46,270
software and some indicators
that you may want to look

60
00:02:46,270 --> 00:02:48,740
for in a healthy project.

61
00:02:48,740 --> 00:02:52,225
So how do we discover and
choose the best R packages?

62
00:02:52,225 --> 00:02:54,610
Because R is amazing, and you
can do so many cool things

63
00:02:54,610 --> 00:02:55,300
with it.

64
00:02:55,300 --> 00:02:57,850
And there's very few
rules or limitations.

65
00:02:57,850 --> 00:03:00,400
But this also makes the
R ecosystem sometimes

66
00:03:00,400 --> 00:03:03,460
feel a bit like the Wild West
of research software, where

67
00:03:03,460 --> 00:03:05,860
it can be very hard to
find the good stuff,

68
00:03:05,860 --> 00:03:08,920
hard to judge if
something is trustworthy.

69
00:03:08,920 --> 00:03:10,660
And suppose you're
a data scientist,

70
00:03:10,660 --> 00:03:12,400
and you need to do a
particular analysis,

71
00:03:12,400 --> 00:03:15,130
or you need to read a
particular file format,

72
00:03:15,130 --> 00:03:19,270
or you need an HTTP client to
interface to some open data web

73
00:03:19,270 --> 00:03:22,690
servers, how do you
know what's out there?

74
00:03:22,690 --> 00:03:24,760
And how do if it's any good?

75
00:03:24,760 --> 00:03:27,040
Or maybe you find an
article or a blog post that

76
00:03:27,040 --> 00:03:29,158
mentioned interesting package.

77
00:03:29,158 --> 00:03:30,325
So you read the description.

78
00:03:30,325 --> 00:03:32,542
You maybe run an example.

79
00:03:32,542 --> 00:03:33,250
It seems to work.

80
00:03:33,250 --> 00:03:35,860
So problem solved, right?

81
00:03:35,860 --> 00:03:38,620
As you probably know, anyone
can create an R package.

82
00:03:38,620 --> 00:03:40,515
You just put your code
into the right format.

83
00:03:40,515 --> 00:03:41,890
And then you pull
it up on GitHub

84
00:03:41,890 --> 00:03:43,410
or you submit it to CRAN.

85
00:03:43,410 --> 00:03:45,910
And CRAN will actually check
if the package can be installed

86
00:03:45,910 --> 00:03:48,640
on Windows and Mac and
Linux and if it does not

87
00:03:48,640 --> 00:03:50,230
violate any policies.

88
00:03:50,230 --> 00:03:51,770
But that's about it.

89
00:03:51,770 --> 00:03:54,790
There is no
gatekeeping or judgment

90
00:03:54,790 --> 00:03:57,453
on the contents
of the R package.

91
00:03:57,453 --> 00:03:59,620
And this is what makes open
source software so great

92
00:03:59,620 --> 00:04:01,930
because anyone can participate.

93
00:04:01,930 --> 00:04:07,090
But obviously, the quality of
these contributions can vary.

94
00:04:07,090 --> 00:04:10,240
And what is, perhaps,
less obvious at first

95
00:04:10,240 --> 00:04:12,670
is that different
package authors

96
00:04:12,670 --> 00:04:14,890
have very different
ideas on what

97
00:04:14,890 --> 00:04:18,430
you can expect from them
in terms of maintenance

98
00:04:18,430 --> 00:04:20,899
and support and participation.

99
00:04:20,899 --> 00:04:22,930
And these things
become more relevant

100
00:04:22,930 --> 00:04:25,300
as you start using
R more seriously.

101
00:04:25,300 --> 00:04:27,520
Now, of course, when
you're just toying around

102
00:04:27,520 --> 00:04:29,830
for a homework assignment
or a one off problem,

103
00:04:29,830 --> 00:04:32,840
you just do whatever
works and move on.

104
00:04:32,840 --> 00:04:36,010
But if you start to really
depend on a package,

105
00:04:36,010 --> 00:04:38,120
I think the dynamic
changes a bit.

106
00:04:38,120 --> 00:04:40,060
Now suppose you're really
going to build an R

107
00:04:40,060 --> 00:04:43,060
package in your dissertation
research or your company's data

108
00:04:43,060 --> 00:04:43,683
pipeline.

109
00:04:43,683 --> 00:04:45,100
At some point, you
should probably

110
00:04:45,100 --> 00:04:48,850
ask yourself some questions
like who made this package?

111
00:04:48,850 --> 00:04:50,140
What's their background?

112
00:04:50,140 --> 00:04:51,550
Is this an expert?

113
00:04:51,550 --> 00:04:53,440
What other things
have they made?

114
00:04:53,440 --> 00:04:55,760
And how can you trust
the results are correct?

115
00:04:55,760 --> 00:04:58,450
Has there been any peer review
or scientific publication

116
00:04:58,450 --> 00:05:00,580
to accompany this package?

117
00:05:00,580 --> 00:05:01,690
Is it reliable?

118
00:05:01,690 --> 00:05:03,430
Does it get tested a lot?

119
00:05:03,430 --> 00:05:05,020
Because if it works
for one example,

120
00:05:05,020 --> 00:05:08,240
that doesn't always mean it's
going to work for any data.

121
00:05:08,240 --> 00:05:10,520
And what if you have a
question about the software,

122
00:05:10,520 --> 00:05:12,050
or you find a bug?

123
00:05:12,050 --> 00:05:15,140
Is the maintainer going to
be available to help you?

124
00:05:15,140 --> 00:05:17,660
Is the product still
actively developed?

125
00:05:17,660 --> 00:05:20,480
And what are the
maintenance expectations?

126
00:05:20,480 --> 00:05:23,270
Is the package even going to
be around three years from now

127
00:05:23,270 --> 00:05:25,730
when you plan to finish
your dissertation?

128
00:05:25,730 --> 00:05:27,800
And who else is
using this software?

129
00:05:27,800 --> 00:05:30,260
Is this an established project?

130
00:05:30,260 --> 00:05:31,940
Is there a large
user community where

131
00:05:31,940 --> 00:05:35,070
you can maybe ask questions?

132
00:05:35,070 --> 00:05:36,800
So what you do not
want is that you

133
00:05:36,800 --> 00:05:39,050
become fully dependent
on a piece of software

134
00:05:39,050 --> 00:05:41,420
in your research or
in your business.

135
00:05:41,420 --> 00:05:43,850
And then at some point,
a problem arises.

136
00:05:43,850 --> 00:05:45,830
You run into a really bad bug.

137
00:05:45,830 --> 00:05:47,240
Or the thing is crashing.

138
00:05:47,240 --> 00:05:51,050
Or it's depending on some other
thing that has been retired.

139
00:05:51,050 --> 00:05:53,120
Or it just doesn't work
anymore in the latest

140
00:05:53,120 --> 00:05:55,160
version of Windows or Mac.

141
00:05:55,160 --> 00:05:58,130
And then it turns out
there is no issue tracker.

142
00:05:58,130 --> 00:06:00,050
And then you contact
the maintainer,

143
00:06:00,050 --> 00:06:01,970
but you get no response.

144
00:06:01,970 --> 00:06:04,880
Or worse, you get a response
like, well, this package

145
00:06:04,880 --> 00:06:08,120
is part of a research
project that no longer exist.

146
00:06:08,120 --> 00:06:11,030
And I've since then transferred
to another university.

147
00:06:11,030 --> 00:06:13,450
And I don't have time
to work on this anymore.

148
00:06:13,450 --> 00:06:15,090
And this happens a lot.

149
00:06:15,090 --> 00:06:16,760
I've certainly been there.

150
00:06:16,760 --> 00:06:19,550
And it's good to remember
that the package author really

151
00:06:19,550 --> 00:06:21,150
doesn't owe you anything.

152
00:06:21,150 --> 00:06:24,710
Like, most maintainers are
very nice and very friendly.

153
00:06:24,710 --> 00:06:26,940
And they are very
interested in helping you

154
00:06:26,940 --> 00:06:30,350
while also using your feedback
to improve their package.

155
00:06:30,350 --> 00:06:32,930
That is what open source
software is all about.

156
00:06:32,930 --> 00:06:35,420
But sometimes you find
out that some software

157
00:06:35,420 --> 00:06:39,690
that you were using may actually
not be in very good shape.

158
00:06:39,690 --> 00:06:41,330
I think a lot of
this also comes down

159
00:06:41,330 --> 00:06:44,120
to the unique lifecycle
of research software.

160
00:06:44,120 --> 00:06:46,130
All software has a lifecycle.

161
00:06:46,130 --> 00:06:48,050
But for open source
projects, this

162
00:06:48,050 --> 00:06:51,740
is often somewhat unclear
and unpredictable.

163
00:06:51,740 --> 00:06:54,290
Most projects start
out as an experiment.

164
00:06:54,290 --> 00:06:57,020
And then a small fraction
of those projects,

165
00:06:57,020 --> 00:06:59,450
if it works well and the
maintainer has enough time

166
00:06:59,450 --> 00:07:02,060
to put into it, he
may gradually develop

167
00:07:02,060 --> 00:07:05,510
into a mature established
piece of software.

168
00:07:05,510 --> 00:07:10,070
But eventually, one day, all
software becomes obsolete.

169
00:07:10,070 --> 00:07:13,330
And it gets retired, or
replaced with something better.

170
00:07:13,330 --> 00:07:14,930
And in commercial
projects, there's

171
00:07:14,930 --> 00:07:18,560
usually a license that states
that this product is officially

172
00:07:18,560 --> 00:07:20,240
supported until
at least one year.

173
00:07:20,240 --> 00:07:21,230
Blah, blah, blah, blah.

174
00:07:21,230 --> 00:07:24,200
But in open source projects,
there's no such thing.

175
00:07:24,200 --> 00:07:29,990
Things are supported, basically,
for the extent and the duration

176
00:07:29,990 --> 00:07:34,050
that the author has an interest
in maintaining that thing.

177
00:07:34,050 --> 00:07:35,870
For example, a lot
of research software

178
00:07:35,870 --> 00:07:37,820
only exists as a
proof of concept

179
00:07:37,820 --> 00:07:40,707
to a company, a
scientific paper.

180
00:07:40,707 --> 00:07:42,290
And once the thing
has been published,

181
00:07:42,290 --> 00:07:44,180
the author has
really no intention

182
00:07:44,180 --> 00:07:46,020
of ever touching
the software again.

183
00:07:46,020 --> 00:07:48,620
So if you want to actually
build on that software,

184
00:07:48,620 --> 00:07:51,320
then you're basically
on your own.

185
00:07:51,320 --> 00:07:54,680
But many R packages these days
they are the exact opposite.

186
00:07:54,680 --> 00:07:57,680
And they are not published
for their scientific merit.

187
00:07:57,680 --> 00:07:59,570
But they do something
very useful.

188
00:07:59,570 --> 00:08:02,540
And it is in the interest
of the package author

189
00:08:02,540 --> 00:08:04,400
to get as many
people as possible

190
00:08:04,400 --> 00:08:08,850
to use the thing to maximize
the impact of the work.

191
00:08:08,850 --> 00:08:11,420
So when we're using a piece
of open source software,

192
00:08:11,420 --> 00:08:15,350
it can be helpful to think
for a second about where

193
00:08:15,350 --> 00:08:17,870
in the lifecycle
this project is.

194
00:08:17,870 --> 00:08:20,960
Is this an experiment
or a mature project?

195
00:08:20,960 --> 00:08:23,090
Like, is it still
actively being developed.

196
00:08:23,090 --> 00:08:25,350
Or is it something of the past?

197
00:08:25,350 --> 00:08:27,388
So how should we handle this?

198
00:08:27,388 --> 00:08:29,180
What are the things
you could look for when

199
00:08:29,180 --> 00:08:31,370
you're shopping for R packages?

200
00:08:31,370 --> 00:08:34,669
And what are indicators
that reveal something

201
00:08:34,669 --> 00:08:37,760
about the health of a
project, or that may give you

202
00:08:37,760 --> 00:08:40,250
a sense of what to expect?

203
00:08:40,250 --> 00:08:43,650
And what are red flags to
avoid, common pitfalls?

204
00:08:43,650 --> 00:08:45,470
I think we can
roughly distinguish

205
00:08:45,470 --> 00:08:47,990
three categories of indicators.

206
00:08:47,990 --> 00:08:51,230
The first category of indicators
are technical indicators.

207
00:08:51,230 --> 00:08:56,270
And those are things that we can
measure relatively objectively.

208
00:08:56,270 --> 00:08:59,120
So for example, we can look
at the dependency network.

209
00:08:59,120 --> 00:09:00,920
And the CRAN
homepage of a package

210
00:09:00,920 --> 00:09:03,715
already shows you the reverse
dependencies of a package.

211
00:09:03,715 --> 00:09:05,090
And so those are
all the packages

212
00:09:05,090 --> 00:09:06,990
that depend on that package.

213
00:09:06,990 --> 00:09:09,830
So that gives you a
sense of, if the package

214
00:09:09,830 --> 00:09:12,200
is trusted by other developers.

215
00:09:12,200 --> 00:09:15,153
But just counting the number
of reverse dependencies

216
00:09:15,153 --> 00:09:16,820
doesn't always tell
you the whole story.

217
00:09:16,820 --> 00:09:19,070
Because some of these
reverse dependencies

218
00:09:19,070 --> 00:09:20,900
are way more
important than others.

219
00:09:20,900 --> 00:09:22,910
Or sometimes you
find a package that

220
00:09:22,910 --> 00:09:26,870
is used by 10 other packages
all by the same author,

221
00:09:26,870 --> 00:09:29,360
just like with
scientific citations.

222
00:09:29,360 --> 00:09:32,000
So an alternative metric
that you could look at

223
00:09:32,000 --> 00:09:36,290
are to count the recursive
reverse dependencies.

224
00:09:36,290 --> 00:09:38,900
Or you could weigh the
reverse dependencies

225
00:09:38,900 --> 00:09:41,220
by their own
relative importance.

226
00:09:41,220 --> 00:09:44,270
So you get something of
a page rank statistic.

227
00:09:44,270 --> 00:09:47,300
And besides
dependency relations,

228
00:09:47,300 --> 00:09:49,550
other technical indicators
that you could look at

229
00:09:49,550 --> 00:09:53,870
are download statistics or
project activity in terms

230
00:09:53,870 --> 00:09:57,320
of releases or commit activity.

231
00:09:57,320 --> 00:09:59,930
And I think it's
especially interesting

232
00:09:59,930 --> 00:10:03,540
to look at how these
numbers change over time.

233
00:10:03,540 --> 00:10:06,260
So that you get a sense of
the lifecycle of a project

234
00:10:06,260 --> 00:10:10,040
to see if the product is gaining
traction, or if it's on its way

235
00:10:10,040 --> 00:10:13,400
out, or if it has found
like a stable role

236
00:10:13,400 --> 00:10:15,590
within the ecosystem.

237
00:10:15,590 --> 00:10:17,170
Let's actually
look at an example

238
00:10:17,170 --> 00:10:18,260
that's close to my heart.

239
00:10:18,260 --> 00:10:19,920
And it's in the curl package.

240
00:10:19,920 --> 00:10:21,380
So if you need a
web client in R,

241
00:10:21,380 --> 00:10:23,690
you probably need something
with Curl bindings.

242
00:10:23,690 --> 00:10:26,100
But there's actually two CRAN
packages that can do this.

243
00:10:26,100 --> 00:10:29,090
One is called RCurl, and the
other one used is called curl.

244
00:10:29,090 --> 00:10:31,220
So which one should you use?

245
00:10:31,220 --> 00:10:32,690
If you look at
the CRAN homepage,

246
00:10:32,690 --> 00:10:34,560
you'll find a very
similar description

247
00:10:34,560 --> 00:10:38,010
and even a similar number
of reverse dependencies.

248
00:10:38,010 --> 00:10:40,570
And you can confirm
this in R as well.

249
00:10:40,570 --> 00:10:43,920
But if we start looking at the
recursive reverse dependencies,

250
00:10:43,920 --> 00:10:46,200
we can see a much
bigger difference.

251
00:10:46,200 --> 00:10:48,600
And the reason for this
is that the curl package

252
00:10:48,600 --> 00:10:52,590
is used as the foundation for
some important web framework

253
00:10:52,590 --> 00:10:54,900
scenarios such as
the httr package.

254
00:10:54,900 --> 00:10:58,290
And also if we look at the
reverse dependencies over time,

255
00:10:58,290 --> 00:11:01,320
we can see that the use of
curl has been steadily rising

256
00:11:01,320 --> 00:11:05,040
over the past few years, whereas
the number of packages that you

257
00:11:05,040 --> 00:11:07,950
RCurl has been pretty still.

258
00:11:07,950 --> 00:11:10,020
And we can see a
similar trend if we

259
00:11:10,020 --> 00:11:12,360
look at the download
statistics for these packages

260
00:11:12,360 --> 00:11:13,770
over the years.

261
00:11:13,770 --> 00:11:17,730
And the story here is that
the RCurl package is very old.

262
00:11:17,730 --> 00:11:21,000
It has been on CRAN since
2004 and has a paper about it

263
00:11:21,000 --> 00:11:22,590
from 2006.

264
00:11:22,590 --> 00:11:25,750
And it was some very
pioneering work at the time.

265
00:11:25,750 --> 00:11:27,990
However, a lot has
changed since then.

266
00:11:27,990 --> 00:11:31,080
And the package has some
very fundamental problems.

267
00:11:31,080 --> 00:11:34,830
And the maintainer of RCurl
is not very active anymore.

268
00:11:34,830 --> 00:11:37,560
So we wrote the curl
package, specifically,

269
00:11:37,560 --> 00:11:40,680
as a replacement for
RCurl with a modern design

270
00:11:40,680 --> 00:11:42,930
to be simpler and more robust.

271
00:11:42,930 --> 00:11:44,405
And it works very well.

272
00:11:44,405 --> 00:11:45,780
And most users
have switched over

273
00:11:45,780 --> 00:11:48,420
to this new package since then.

274
00:11:48,420 --> 00:11:51,300
But the old RCurl
package is still around.

275
00:11:51,300 --> 00:11:53,100
However, it's not
in very good shape.

276
00:11:53,100 --> 00:11:55,050
And if you use it
today, you quickly

277
00:11:55,050 --> 00:11:57,580
start running into
some of these problems.

278
00:11:57,580 --> 00:12:00,570
And so I think this is
one example where metrics

279
00:12:00,570 --> 00:12:03,660
can help you make a
more informed decision

280
00:12:03,660 --> 00:12:07,200
and potentially save you a
lot of problems down the line.

281
00:12:07,200 --> 00:12:11,760
But of course, these technical
metrics don't always work.

282
00:12:11,760 --> 00:12:14,250
I have, for example, many
R packages are very niche.

283
00:12:14,250 --> 00:12:17,460
And they're useful only
to a very particular,

284
00:12:17,460 --> 00:12:19,120
specialized group of people.

285
00:12:19,120 --> 00:12:21,810
And so the package may
not have many downloads

286
00:12:21,810 --> 00:12:23,470
or reverse dependencies.

287
00:12:23,470 --> 00:12:25,120
But if this is
something in your field,

288
00:12:25,120 --> 00:12:27,300
it may be exactly what you need.

289
00:12:27,300 --> 00:12:30,210
And the second category of
indicators I want to talk about

290
00:12:30,210 --> 00:12:31,750
are social indicators.

291
00:12:31,750 --> 00:12:33,900
I consider this to be
all the things that

292
00:12:33,900 --> 00:12:37,410
have to do something with
the people behind the project

293
00:12:37,410 --> 00:12:39,300
and the way in which
the development

294
00:12:39,300 --> 00:12:41,730
and the participation
gets organized.

295
00:12:41,730 --> 00:12:44,070
And in my experience,
these are, by far,

296
00:12:44,070 --> 00:12:45,540
the most important
things to look

297
00:12:45,540 --> 00:12:48,580
for in a healthy,
open source project.

298
00:12:48,580 --> 00:12:50,550
But these are not
easy to quantify.

299
00:12:50,550 --> 00:12:52,440
A lot of it just
comes down to getting

300
00:12:52,440 --> 00:12:54,840
to know the community
a little bit.

301
00:12:54,840 --> 00:12:59,880
So open source projects
are, for better or worse,

302
00:12:59,880 --> 00:13:02,670
most of the time, maintained
by one or two people.

303
00:13:02,670 --> 00:13:06,630
And there's this fantastic
book by Nadia Eghbal

304
00:13:06,630 --> 00:13:08,700
from earlier this year
that I really like,

305
00:13:08,700 --> 00:13:12,570
that talks about the reality
behind open source development

306
00:13:12,570 --> 00:13:15,510
and why this is the case and
the consequences that this has.

307
00:13:15,510 --> 00:13:17,820
And this is, again, one
of those big differences

308
00:13:17,820 --> 00:13:19,090
with commercial software.

309
00:13:19,090 --> 00:13:22,680
A lot of people are used
to thinking of software

310
00:13:22,680 --> 00:13:26,400
as written by anonymous
engineers from a big company.

311
00:13:26,400 --> 00:13:29,310
And that is just not
how it works for us.

312
00:13:29,310 --> 00:13:32,850
Open source software is written
by people like you and me.

313
00:13:32,850 --> 00:13:35,550
And you should
think of R packages

314
00:13:35,550 --> 00:13:38,970
more like a scientific
publication or a piece of work

315
00:13:38,970 --> 00:13:41,910
by a local artist or a musician.

316
00:13:41,910 --> 00:13:45,390
It really matters who
is making that thing.

317
00:13:45,390 --> 00:13:48,810
So the most important
social indicator

318
00:13:48,810 --> 00:13:51,450
is basically, who is the author?

319
00:13:51,450 --> 00:13:54,330
Like, what organizations
they are part of?

320
00:13:54,330 --> 00:13:58,500
What people they
collaborate with a lot?

321
00:13:58,500 --> 00:14:00,420
If they're still active
or not, then what

322
00:14:00,420 --> 00:14:01,950
they're currently working on?

323
00:14:01,950 --> 00:14:03,480
And based on the
type of package,

324
00:14:03,480 --> 00:14:06,480
you may care about their
formal qualifications.

325
00:14:06,480 --> 00:14:08,040
And if they have
an online presence

326
00:14:08,040 --> 00:14:10,210
like a blog or a social media.

327
00:14:10,210 --> 00:14:12,360
Another social
indicator is, basically,

328
00:14:12,360 --> 00:14:14,100
how is the product managed?

329
00:14:14,100 --> 00:14:16,650
Is there a public place
for reporting bugs?

330
00:14:16,650 --> 00:14:18,510
And do these typically
get resolved?

331
00:14:18,510 --> 00:14:20,790
And if the product is
open to contributions

332
00:14:20,790 --> 00:14:24,750
from external people, and
what that process looks like?

333
00:14:24,750 --> 00:14:26,280
To me, this is very important.

334
00:14:26,280 --> 00:14:27,930
I believe every R
package should have

335
00:14:27,930 --> 00:14:31,740
a public place where everybody
can post their issues.

336
00:14:31,740 --> 00:14:34,860
So you can see what problems
other users are running into.

337
00:14:34,860 --> 00:14:37,255
And people can help
each other out.

338
00:14:37,255 --> 00:14:38,880
But let me be clear
that you should not

339
00:14:38,880 --> 00:14:42,240
expect every R package author
to be a full time tech support

340
00:14:42,240 --> 00:14:43,080
person.

341
00:14:43,080 --> 00:14:46,200
Answering all of these questions
and reviewing suggestions

342
00:14:46,200 --> 00:14:47,520
can be very exhausting.

343
00:14:47,520 --> 00:14:49,560
And sometimes, you
just don't have time

344
00:14:49,560 --> 00:14:51,510
to work on a project
for a few days

345
00:14:51,510 --> 00:14:53,760
or a few weeks or a few months.

346
00:14:53,760 --> 00:14:57,540
But for me, the important
thing is transparency.

347
00:14:57,540 --> 00:15:01,560
If I have no way of seeing
what are the common problems

348
00:15:01,560 --> 00:15:06,480
or questions with a
package, that is a red flag.

349
00:15:06,480 --> 00:15:09,040
There may be some exceptions.

350
00:15:09,040 --> 00:15:11,070
If the packages are
relatively small

351
00:15:11,070 --> 00:15:13,350
and is maintained by
a professor that's

352
00:15:13,350 --> 00:15:17,010
really the expert in
the field, it may be OK.

353
00:15:17,010 --> 00:15:20,850
But generally speaking, I think
a functional issue tracker

354
00:15:20,850 --> 00:15:24,000
is really a minimal requirement
for a healthy open source

355
00:15:24,000 --> 00:15:25,350
project.

356
00:15:25,350 --> 00:15:28,230
And finally, other social
indicators you could think of

357
00:15:28,230 --> 00:15:31,860
are available resources for
learning about the package.

358
00:15:31,860 --> 00:15:34,560
For example, if there's
good documentation

359
00:15:34,560 --> 00:15:36,900
either by the package
author themselves

360
00:15:36,900 --> 00:15:39,720
or by users writing blog post.

361
00:15:39,720 --> 00:15:42,810
But for example also, if
there's many questions answered

362
00:15:42,810 --> 00:15:45,690
on Stack Overflow, that
may be a great source

363
00:15:45,690 --> 00:15:48,090
of information and a
sign that other people

364
00:15:48,090 --> 00:15:50,580
are using this package.

365
00:15:50,580 --> 00:15:52,830
And then there's a third
category of indicators.

366
00:15:52,830 --> 00:15:54,818
And these are perhaps
more specific to R

367
00:15:54,818 --> 00:15:56,610
because we have a little
research software.

368
00:15:56,610 --> 00:15:59,860
And these are
scientific indicators.

369
00:15:59,860 --> 00:16:02,820
So for packages that are
specifically implementing

370
00:16:02,820 --> 00:16:05,430
some scientific method,
you are probably

371
00:16:05,430 --> 00:16:08,430
interested in the
validity of those results.

372
00:16:08,430 --> 00:16:10,710
And for example, if the
package is fitting some model,

373
00:16:10,710 --> 00:16:14,250
you want to be sure that
the estimates are accurate

374
00:16:14,250 --> 00:16:18,880
and that the package is handling
all edge cases properly.

375
00:16:18,880 --> 00:16:21,750
And this is, of course,
very difficult to judge.

376
00:16:21,750 --> 00:16:23,710
But there are some
things we can look at.

377
00:16:23,710 --> 00:16:27,210
For example, some packages
have gone through a peer review

378
00:16:27,210 --> 00:16:27,930
process.

379
00:16:27,930 --> 00:16:32,100
For example, in the Journal of
Cisco Software or in rOpenSci,

380
00:16:32,100 --> 00:16:33,110
that's a good sign.

381
00:16:33,110 --> 00:16:34,860
It's not a guarantee
that the package will

382
00:16:34,860 --> 00:16:36,610
be in good standing forever.

383
00:16:36,610 --> 00:16:39,000
But at least, the
author has gone

384
00:16:39,000 --> 00:16:42,210
through an effort at some
point to have a colleague have

385
00:16:42,210 --> 00:16:44,190
a critical look at the code.

386
00:16:44,190 --> 00:16:48,750
And of course, we can look
at citations of packages

387
00:16:48,750 --> 00:16:51,060
in scientific publications.

388
00:16:51,060 --> 00:16:53,280
This is very tricky
because many researchers

389
00:16:53,280 --> 00:16:54,660
don't cite software.

390
00:16:54,660 --> 00:16:56,790
And if they cite they
probably just cite

391
00:16:56,790 --> 00:17:01,110
R or Tidyverse and not
the individual packages.

392
00:17:01,110 --> 00:17:05,220
But what is interesting is
that many journals these days

393
00:17:05,220 --> 00:17:09,060
are starting to require
researchers to include

394
00:17:09,060 --> 00:17:11,730
the analysis code
with their publication

395
00:17:11,730 --> 00:17:13,800
for reproducibility purposes.

396
00:17:13,800 --> 00:17:16,170
And so you can imagine
if a lot of code

397
00:17:16,170 --> 00:17:17,880
becomes available
this way, we can

398
00:17:17,880 --> 00:17:20,730
start to analyze
some of this code

399
00:17:20,730 --> 00:17:23,369
to see which R
packages are commonly

400
00:17:23,369 --> 00:17:26,319
used in scientific research.

401
00:17:26,319 --> 00:17:30,270
So I think the scientific
quality of R packages

402
00:17:30,270 --> 00:17:35,930
is by far the most difficult
to judge but is very important.

403
00:17:35,930 --> 00:17:36,430
All right.

404
00:17:36,430 --> 00:17:38,535
So why am I talking
about all of this?

405
00:17:38,535 --> 00:17:42,300
So in rOpenSci, we want to help
researchers to get the most out

406
00:17:42,300 --> 00:17:45,750
of R. So we do curation,
and we reorganize

407
00:17:45,750 --> 00:17:47,760
peer review of R packages.

408
00:17:47,760 --> 00:17:50,340
And we provide some
development infrastructure.

409
00:17:50,340 --> 00:17:53,670
And recently, we've been
increasingly feeling

410
00:17:53,670 --> 00:17:57,150
the need for better
tools to actively monitor

411
00:17:57,150 --> 00:18:00,240
the quality of R packages.

412
00:18:00,240 --> 00:18:03,520
And this is both for
our internal projects,

413
00:18:03,520 --> 00:18:07,080
but also for the R
ecosystem as a whole

414
00:18:07,080 --> 00:18:11,320
to be able to better advise
researchers on what to use.

415
00:18:11,320 --> 00:18:14,580
So we've started working on this
new project called R-universe.

416
00:18:14,580 --> 00:18:16,560
And on the one
hand, R-universe is

417
00:18:16,560 --> 00:18:19,270
an extension of our internal
built infrastructure.

418
00:18:19,270 --> 00:18:22,020
So in rOpenSci, we
have a doc server

419
00:18:22,020 --> 00:18:24,540
which automatically builds
packaging and documentation

420
00:18:24,540 --> 00:18:26,160
for all of R packages.

421
00:18:26,160 --> 00:18:28,020
And we have a
CRAN-like server which

422
00:18:28,020 --> 00:18:29,910
automatically builds
the binaries for all

423
00:18:29,910 --> 00:18:31,050
of our packages.

424
00:18:31,050 --> 00:18:32,470
And this works very well.

425
00:18:32,470 --> 00:18:35,070
And with R-universe, we
basically want to enable other

426
00:18:35,070 --> 00:18:38,970
organizations to take advantage
of these same tooling.

427
00:18:38,970 --> 00:18:41,820
But we want R-universe
to not become

428
00:18:41,820 --> 00:18:44,700
just a build system
but also a place

429
00:18:44,700 --> 00:18:47,290
where you can learn more
about these packages.

430
00:18:47,290 --> 00:18:50,070
So we're going to try to
combine some of these hard data

431
00:18:50,070 --> 00:18:52,170
that you get from
the build system

432
00:18:52,170 --> 00:18:55,410
with other source of
information about the authors

433
00:18:55,410 --> 00:18:58,740
and activity in the lifecycle
and all these things

434
00:18:58,740 --> 00:19:00,323
that we've talked about.

435
00:19:00,323 --> 00:19:01,740
And then we have
someone else that

436
00:19:01,740 --> 00:19:03,480
work on the scientific metrics.

437
00:19:03,480 --> 00:19:05,490
So they are
developing tools that

438
00:19:05,490 --> 00:19:09,810
can help us find citations
and mentions of packages

439
00:19:09,810 --> 00:19:12,300
in scientific publications.

440
00:19:12,300 --> 00:19:15,190
And besides showing information
about a single project,

441
00:19:15,190 --> 00:19:18,510
we also want to help with the
discovery of other software.

442
00:19:18,510 --> 00:19:24,040
And so by cross-referencing
similar packages or other work

443
00:19:24,040 --> 00:19:27,180
by the same author or the
same organization, maybe

444
00:19:27,180 --> 00:19:30,190
we can build something
of a recommender system.

445
00:19:30,190 --> 00:19:34,950
And finally, we want this to
be a place that says something

446
00:19:34,950 --> 00:19:39,120
about the impact and the
importance of an R project

447
00:19:39,120 --> 00:19:43,680
in order to help package
authors get credit

448
00:19:43,680 --> 00:19:46,200
for research software
in the same way

449
00:19:46,200 --> 00:19:48,750
as this happens for
scientific publications.

450
00:19:48,750 --> 00:19:50,500
So this was my talk.

451
00:19:50,500 --> 00:19:51,700
Thank you for listening.

452
00:19:51,700 --> 00:19:54,480
I hope it got you thinking
a little bit about the world

453
00:19:54,480 --> 00:19:57,270
behind open source development.

454
00:19:57,270 --> 00:19:59,670
And if I got you interested
in R-universe project,

455
00:19:59,670 --> 00:20:04,020
keep an eye on our website,
r-universe.dev where we will

456
00:20:04,020 --> 00:20:06,870
start adding more of the things
that we're working on over

457
00:20:06,870 --> 00:20:09,050
the upcoming year.
