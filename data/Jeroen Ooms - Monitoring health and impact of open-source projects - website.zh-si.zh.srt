1
00:00:06,096 --> 00:00:07,568
监测开源项目的健康和影响,
加州大学伯克利分校的Jeroen Ooms

2
00:00:07,568 --> 00:00:08,830
早上好。

3
00:00:08,830 --> 00:00:10,490
让我提一个问题来开始我们今天的讲座。

4
00:00:10,490 --> 00:00:13,300
您认为成功使用R的最重要方面

5
00:00:13,300 --> 00:00:15,040
是什么？

6
00:00:15,040 --> 00:00:17,380
是否能够编写高性能代码，

7
00:00:17,380 --> 00:00:19,750
制作精美的图形或学习

8
00:00:19,750 --> 00:00:21,910
如何编写R包？

9
00:00:21,910 --> 00:00:23,200
这是我的看法。

10
00:00:23,200 --> 00:00:26,800
我认为成功使用R的最重要方面

11
00:00:26,800 --> 00:00:30,280
是能够找到并选择适合

12
00:00:30,280 --> 00:00:32,090
您正在从事的工作的工具。

13
00:00:32,090 --> 00:00:34,600
我认为很多数据科学项目都被卡住了，

14
00:00:34,600 --> 00:00:36,700
或者没有像他们可能获得的

15
00:00:36,700 --> 00:00:40,750
那样成功，因为他们在项目中选择了错误的

16
00:00:40,750 --> 00:00:42,610
工具来建立。

17
00:00:42,610 --> 00:00:44,630
一旦使用了某种工具，

18
00:00:44,630 --> 00:00:47,510
很难修复该问题。

19
00:00:47,510 --> 00:00:48,940
我叫Jeroen Ooms。

20
00:00:48,940 --> 00:00:51,280
我已经写了很多R包，其中一些

21
00:00:51,280 --> 00:00:52,450
您可能已经使用过。

22
00:00:52,450 --> 00:00:54,700
我也是编译器的维护者

23
00:00:54,700 --> 00:00:57,790
以及Windows上R的构建基础架构。

24
00:00:57,790 --> 00:01:01,840
我是UC Berkeley的rOpenSci小组的工作人员。

25
00:01:01,840 --> 00:01:03,550
在rOpenSci中，我们正在着手进行一个

26
00:01:03,550 --> 00:01:07,030
雄心勃勃的大型新项目，名为R-universe。

27
00:01:07,030 --> 00:01:10,240
本质上，r-universe是一个

28
00:01:10,240 --> 00:01:13,090
基于Git的开放平台，用于管理个人R包

29
00:01:13,090 --> 00:01:14,440
存储库。

30
00:01:14,440 --> 00:01:16,750
因此，这意味着一旦注册了软件包，

31
00:01:16,750 --> 00:01:18,850
每当软件包作者推送更新时，

32
00:01:18,850 --> 00:01:22,600
系统将直接从Git直接构建

33
00:01:22,600 --> 00:01:26,380
二进制文件和文档等。

34
00:01:26,380 --> 00:01:28,640
也在CRAN或Bioconductor上的

35
00:01:28,640 --> 00:01:31,960
软件包，或者只是您的个人R软件包。

36
00:01:31,960 --> 00:01:34,210
只要源代码可从Git获得，

37
00:01:34,210 --> 00:01:37,690
那真的无关紧要。

38
00:01:37,690 --> 00:01:40,240
但是，发布软件包实际上

39
00:01:40,240 --> 00:01:42,460
不是该项目的目标。

40
00:01:42,460 --> 00:01:45,520
更重要的是，这是我们尝试计算

41
00:01:45,520 --> 00:01:50,110
指标并显示有关包装的

42
00:01:50,110 --> 00:01:53,470
其他背景信息的起点，

43
00:01:53,470 --> 00:01:57,160
这可能会告诉我们有关其健康状况

44
00:01:57,160 --> 00:02:00,050
以及特定项目的作用和影响的信息。

45
00:02:00,050 --> 00:02:01,500
因此，在本演讲结束时，

46
00:02:01,500 --> 00:02:04,660
我将简要解释一下R-universe做什么，

47
00:02:04,660 --> 00:02:06,460
以及从哪来。

48
00:02:06,460 --> 00:02:09,940
但是，在今天的大部分时间里，我想谈一谈为什么

49
00:02:09,940 --> 00:02:12,700
我们认为拥有更好的工具

50
00:02:12,700 --> 00:02:15,340
并积极监控研究软件的状态和

51
00:02:15,340 --> 00:02:17,350
健康状况很重要。

52
00:02:17,350 --> 00:02:19,990
因为我认为使用开源软件

53
00:02:19,990 --> 00:02:21,850
和商业软件之间存在一些重要差异，

54
00:02:21,850 --> 00:02:26,260
但这些差异并不总是立即显而易见的。

55
00:02:26,260 --> 00:02:28,840
特别是在对质量和

56
00:02:28,840 --> 00:02:31,900
生命周期以及参与开源

57
00:02:31,900 --> 00:02:36,260
项目的期望方面。

58
00:02:36,260 --> 00:02:39,880
因此，我希望让您对使用开源软件时

59
00:02:39,880 --> 00:02:42,670
可能要考虑的事情有所

60
00:02:42,670 --> 00:02:46,270
思考，并在健康的项目中

61
00:02:46,270 --> 00:02:48,740
寻找一些指标。

62
00:02:48,740 --> 00:02:52,225
那么，我们如何发现和选择最佳的R包呢？

63
00:02:52,225 --> 00:02:54,467
因为R太神奇了，所以您可以用它做很多很棒的

64
00:02:54,467 --> 00:02:55,443
事情。

65
00:02:55,443 --> 00:02:57,850
而且几乎没有规则或限制。

66
00:02:57,850 --> 00:03:00,400
但这也使R生态系统有时

67
00:03:00,400 --> 00:03:03,460
感觉有点像研究软件的"狂野西部" ，

68
00:03:03,460 --> 00:03:05,860
在这里很难找到好东西，

69
00:03:05,860 --> 00:03:08,920
很难判断某些东西是否值得信赖。

70
00:03:08,920 --> 00:03:10,660
假设您是一名数据科学家，

71
00:03:10,660 --> 00:03:12,400
并且需要进行特定的分析，

72
00:03:12,400 --> 00:03:15,130
或者需要读取特定的文件格式，

73
00:03:15,130 --> 00:03:19,270
或者需要HTTP客户端来连接一些开放的数据Web

74
00:03:19,270 --> 00:03:22,690
服务器，那么您如何知道其中的内容？

75
00:03:22,690 --> 00:03:24,760
如果有什么好处,该怎么做呢？

76
00:03:24,760 --> 00:03:27,040
或者，您可能会发现提到有趣的

77
00:03:27,040 --> 00:03:29,158
程序包的文章或博客文章。

78
00:03:29,158 --> 00:03:30,325
因此，您阅读了说明。

79
00:03:30,325 --> 00:03:32,542
您可能会举一个例子。

80
00:03:32,542 --> 00:03:33,375
它似乎有效。

81
00:03:33,375 --> 00:03:35,860
问题解决了吧？

82
00:03:35,860 --> 00:03:38,620
您可能知道，任何人都可以创建R包。

83
00:03:38,620 --> 00:03:40,515
您只需将代码放入正确的格式即可。

84
00:03:40,515 --> 00:03:41,890
然后将其放在GitHub上

85
00:03:41,890 --> 00:03:43,410
或提交给CRAN。

86
00:03:43,410 --> 00:03:45,910
CRAN实际上会检查该软件包

87
00:03:45,910 --> 00:03:48,640
是否可以在Windows，Mac和Linux上安装，以及是否不

88
00:03:48,640 --> 00:03:50,230
违反任何政策。

89
00:03:50,230 --> 00:03:51,770
就是这样。

90
00:03:51,770 --> 00:03:54,790
R包的内容没有任何

91
00:03:54,790 --> 00:03:57,453
保留或判断。

92
00:03:57,453 --> 00:03:59,620
这就是使开源软件如此出色的原因

93
00:03:59,620 --> 00:04:01,930
因为任何人都可以参加。

94
00:04:01,930 --> 00:04:06,930
但是显然，这些贡献的质量可能会有所不同。

95
00:04:07,090 --> 00:04:10,240
一开始可能不太明显的是，

96
00:04:10,240 --> 00:04:12,670
不同的软件包作者

97
00:04:12,670 --> 00:04:14,890
对维护，支持和

98
00:04:14,890 --> 00:04:18,430
参与方面的期望有

99
00:04:18,430 --> 00:04:20,899
很大的不同。

100
00:04:20,899 --> 00:04:22,930
随着您开始更认真地使用R，

101
00:04:22,930 --> 00:04:25,300
这些事情变得越来越重要。

102
00:04:25,300 --> 00:04:27,520
现在，当然，当您只是在忙于做家庭作业

103
00:04:27,520 --> 00:04:29,830
或一个一次性的问题时，

104
00:04:29,830 --> 00:04:32,840
您只需做任何工作即可继续前进。

105
00:04:32,840 --> 00:04:36,010
但是，如果您开始真正依赖软件包，

106
00:04:36,010 --> 00:04:38,120
我认为动态有所变化。

107
00:04:38,120 --> 00:04:40,060
现在，假设您真的要在论文研究或

108
00:04:40,060 --> 00:04:43,060
公司的数据管道中

109
00:04:43,060 --> 00:04:43,893
构建R包。

110
00:04:43,893 --> 00:04:45,100
在某个时候，您可能应该

111
00:04:45,100 --> 00:04:48,850
问自己一些问题，例如谁制作了此软件包？

112
00:04:48,850 --> 00:04:50,140
他们的背景是什么？

113
00:04:50,140 --> 00:04:51,550
这是专家吗？

114
00:04:51,550 --> 00:04:53,440
他们还做了什么？

115
00:04:53,440 --> 00:04:55,760
您如何相信结果是正确的？

116
00:04:55,760 --> 00:04:58,450
配套中是否有同行评审

117
00:04:58,450 --> 00:05:00,580
或科学出版物？

118
00:05:00,580 --> 00:05:01,690
它可靠吗？

119
00:05:01,690 --> 00:05:03,430
它经过很多测试了吗？

120
00:05:03,430 --> 00:05:05,020
因为如果它仅适用于一个示例，

121
00:05:05,020 --> 00:05:08,240
那并不总是意味着它将适用于任何数据。

122
00:05:08,240 --> 00:05:10,520
如果您对软件有疑问，该怎么办？

123
00:05:10,520 --> 00:05:12,050
还是发现错误？

124
00:05:12,050 --> 00:05:15,140
维护人员可以为您提供帮助吗？

125
00:05:15,140 --> 00:05:17,660
该产品仍在积极开发吗？

126
00:05:17,660 --> 00:05:20,480
维护期望是什么？

127
00:05:20,480 --> 00:05:23,270
当您计划完成学位论文时，

128
00:05:23,270 --> 00:05:25,730
该计划甚至还会持续三年左右吗？

129
00:05:25,730 --> 00:05:27,800
还有谁在使用该软件？

130
00:05:27,800 --> 00:05:30,260
这是既定项目吗？

131
00:05:30,260 --> 00:05:31,940
是否有一个庞大的用户社区，

132
00:05:31,940 --> 00:05:35,070
您可以在那里提出问题？

133
00:05:35,070 --> 00:05:36,800
因此，您不希望自己

134
00:05:36,800 --> 00:05:39,050
完全依赖研究或

135
00:05:39,050 --> 00:05:41,420
业务中的某个软件。

136
00:05:41,420 --> 00:05:43,850
然后在某个时候出现问题。

137
00:05:43,850 --> 00:05:45,830
您遇到了一个非常糟糕的错误。

138
00:05:45,830 --> 00:05:47,240
或事情崩溃了。

139
00:05:47,240 --> 00:05:51,050
还是取决于其他已经淘汰的东西。

140
00:05:51,050 --> 00:05:53,120
或者它在最新版本的Windows

141
00:05:53,120 --> 00:05:55,160
或Mac中不再起作用。

142
00:05:55,160 --> 00:05:58,130
事实证明，这里没有问题跟踪器。

143
00:05:58,130 --> 00:06:00,050
然后您联系维护人员，

144
00:06:00,050 --> 00:06:01,970
但您没有任何回应。

145
00:06:01,970 --> 00:06:04,880
或更糟糕的是，您得到的响应像是，该软件包

146
00:06:04,880 --> 00:06:08,120
是一个不再存在的研究项目的一部分。

147
00:06:08,120 --> 00:06:11,030
从那以后我就转到了另一所大学。

148
00:06:11,030 --> 00:06:13,450
而且我没有时间去做这件事了。

149
00:06:13,450 --> 00:06:15,090
这经常发生。

150
00:06:15,090 --> 00:06:16,760
我当然去过那里。

151
00:06:16,760 --> 00:06:19,550
并要记住，包作者确实

152
00:06:19,550 --> 00:06:21,150
不欠您任何东西。

153
00:06:21,150 --> 00:06:24,710
就像，大多数维护者都非常友好。

154
00:06:24,710 --> 00:06:26,940
他们对帮助您非常感兴趣，

155
00:06:26,940 --> 00:06:30,350
同时也利用您的反馈意见来改进他们的服务。

156
00:06:30,350 --> 00:06:32,930
这就是开源软件的全部意义。

157
00:06:32,930 --> 00:06:35,420
但是有时您发现所使用的

158
00:06:35,420 --> 00:06:39,690
某些软件实际上可能状态不佳。

159
00:06:39,690 --> 00:06:41,330
我认为很多原因都归结于

160
00:06:41,330 --> 00:06:44,120
研究软件的独特生命周期。

161
00:06:44,120 --> 00:06:46,130
所有软件都有生命周期。

162
00:06:46,130 --> 00:06:48,050
但是对于开源项目来说，这

163
00:06:48,050 --> 00:06:51,740
通常是不清楚和不可预测的。

164
00:06:51,740 --> 00:06:54,290
大多数项目都是从实验开始的。

165
00:06:54,290 --> 00:06:57,020
然后这些项目中的一小部分，

166
00:06:57,020 --> 00:06:59,450
如果运行良好并且维护者有足够的时间

167
00:06:59,450 --> 00:07:02,060
投入其中，那么他可能会逐渐发展

168
00:07:02,060 --> 00:07:05,510
成为成熟的成熟软件。

169
00:07:05,510 --> 00:07:10,070
但是最终，有一天，所有软件都过时了。

170
00:07:10,070 --> 00:07:13,330
而且它已经退役，或者被更好的替代。

171
00:07:13,330 --> 00:07:14,930
在商业项目中，通常会有

172
00:07:14,930 --> 00:07:18,560
一个许可证声明该产品至少

173
00:07:18,560 --> 00:07:20,240
要获得正式支持至少一年。

174
00:07:20,240 --> 00:07:21,230
等等，等等，等等。

175
00:07:21,230 --> 00:07:24,200
但是在开源项目中，没有这样的事情。

176
00:07:24,200 --> 00:07:29,200
基本上，在作者对维护该事物感兴趣的

177
00:07:29,990 --> 00:07:34,050
程度和持续时间内，对事物进行支持。

178
00:07:34,050 --> 00:07:35,870
例如，许多研究软件

179
00:07:35,870 --> 00:07:37,820
仅作为公司的概念证明

180
00:07:37,820 --> 00:07:40,707
存在。

181
00:07:40,707 --> 00:07:42,290
事情一经发布，

182
00:07:42,290 --> 00:07:44,180
作者实际上就无意

183
00:07:44,180 --> 00:07:46,020
再次接触该软件。

184
00:07:46,020 --> 00:07:48,620
因此，如果您想真正构建该软件，

185
00:07:48,620 --> 00:07:51,320
那么您基本上是一个人。

186
00:07:51,320 --> 00:07:54,680
但是，如今许多R软件包正好相反。

187
00:07:54,680 --> 00:07:57,680
而且，它们并没有因为其科学价值而发表。

188
00:07:57,680 --> 00:07:59,570
但是他们做了一些非常有用的事情。

189
00:07:59,570 --> 00:08:02,540
软件包作者的利益是吸引

190
00:08:02,540 --> 00:08:04,400
尽可能多的人使用事物

191
00:08:04,400 --> 00:08:08,850
来最大化作品的影响力。

192
00:08:08,850 --> 00:08:11,420
因此，当我们使用一个开源软件时，

193
00:08:11,420 --> 00:08:15,350
仔细考虑一下该项目在

194
00:08:15,350 --> 00:08:17,870
生命周期中的位置会有所帮助。

195
00:08:17,870 --> 00:08:20,960
这是实验还是成熟的项目？

196
00:08:20,960 --> 00:08:23,090
就像，它仍在积极地被开发。

197
00:08:23,090 --> 00:08:25,350
还是过去了？

198
00:08:25,350 --> 00:08:27,388
那么我们应该如何处理呢？

199
00:08:27,388 --> 00:08:29,180
购买R包时可能

200
00:08:29,180 --> 00:08:31,370
会寻找什么？

201
00:08:31,370 --> 00:08:34,669
哪些指标可以揭示有关项目

202
00:08:34,669 --> 00:08:37,760
运行状况的某些信息，或者可以使您

203
00:08:37,760 --> 00:08:40,250
对预期的结果有所了解？

204
00:08:40,250 --> 00:08:43,650
常见的陷阱是要避免的危险信号是什么？

205
00:08:43,650 --> 00:08:45,470
我认为我们可以大致区分

206
00:08:45,470 --> 00:08:47,990
三类指标。

207
00:08:47,990 --> 00:08:51,230
第一类指标是技术指标。

208
00:08:51,230 --> 00:08:56,230
这些都是我们可以相对客观地衡量的。

209
00:08:56,270 --> 00:08:59,120
因此，例如，我们可以看一下依赖网络。

210
00:08:59,120 --> 00:09:00,920
程序包的CRAN主页

211
00:09:00,920 --> 00:09:03,715
已经向您显示了程序包的反向依赖性。

212
00:09:03,715 --> 00:09:05,090
这些就是所有依赖

213
00:09:05,090 --> 00:09:06,990
该软件包的软件包。

214
00:09:06,990 --> 00:09:09,830
这样，您便可以了解该软件包

215
00:09:09,830 --> 00:09:12,200
是否被其他开发人员信任。

216
00:09:12,200 --> 00:09:15,153
但是，仅计算反向依赖关系的数量

217
00:09:15,153 --> 00:09:16,820
并不能总告诉您全部情况。

218
00:09:16,820 --> 00:09:19,070
因为这些反向依赖中的

219
00:09:19,070 --> 00:09:20,900
某些比其他依赖更重要。

220
00:09:20,900 --> 00:09:22,910
有时，您会发现一个包

221
00:09:22,910 --> 00:09:26,870
被同一作者的其他10个包使用，

222
00:09:26,870 --> 00:09:29,360
就像科学引用一样。

223
00:09:29,360 --> 00:09:32,000
因此，您可以查看的替代指标

224
00:09:32,000 --> 00:09:36,290
是对递归反向依赖项进行计数。

225
00:09:36,290 --> 00:09:38,900
或者，您可以根据反向依赖的

226
00:09:38,900 --> 00:09:41,220
相对重要性来权衡它们。

227
00:09:41,220 --> 00:09:44,270
这样您就可以获得页面排名统计信息。

228
00:09:44,270 --> 00:09:47,300
除了依赖关系以外，

229
00:09:47,300 --> 00:09:49,550
您还可以查看其他技术指标，

230
00:09:49,550 --> 00:09:53,870
例如发布统计信息或项目活动

231
00:09:53,870 --> 00:09:57,320
。

232
00:09:57,320 --> 00:09:59,930
而且我认为观察这些数字

233
00:09:59,930 --> 00:10:03,540
随时间的变化特别有趣。

234
00:10:03,540 --> 00:10:06,260
这样一来，您就可以了解项目的生命周期，

235
00:10:06,260 --> 00:10:10,040
以查看产品是否正在受到关注，
或者产品是否即将退出市场，

236
00:10:10,040 --> 00:10:13,400
或者产品是否在生态系统中扮演着

237
00:10:13,400 --> 00:10:15,590
稳定的角色。

238
00:10:15,590 --> 00:10:17,170
让我们实际上看一个

239
00:10:17,170 --> 00:10:18,260
与我内心最接近的例子。

240
00:10:18,260 --> 00:10:19,920
它在curl包装中。

241
00:10:19,920 --> 00:10:21,380
因此，如果您需要R中的Web客户端，

242
00:10:21,380 --> 00:10:23,690
您可能需要使用Curl绑定。

243
00:10:23,690 --> 00:10:26,100
但是实际上有两个CRAN软件包可以做到这一点。

244
00:10:26,100 --> 00:10:29,090
一个称为RCurl，另一个使用的被称为curl。

245
00:10:29,090 --> 00:10:31,220
那么您应该使用哪一个呢？

246
00:10:31,220 --> 00:10:32,690
如果您查看CRAN主页，

247
00:10:32,690 --> 00:10:34,560
您会发现非常相似的描述

248
00:10:34,560 --> 00:10:38,010
甚至数量相似的反向依赖关系。

249
00:10:38,010 --> 00:10:40,570
您也可以在R中确认这一点。

250
00:10:40,570 --> 00:10:43,920
但是，如果我们开始研究递归反向依赖关系，

251
00:10:43,920 --> 00:10:46,200
我们可以看到更大的差异。

252
00:10:46,200 --> 00:10:48,600
这样做的原因是curl软件包

253
00:10:48,600 --> 00:10:52,590
被用作httr软件包等

254
00:10:52,590 --> 00:10:54,900
重要Web框架方案的基础。

255
00:10:54,900 --> 00:10:58,290
而且，如果我们研究一下反向依赖关系，

256
00:10:58,290 --> 00:11:01,320
那么过去几年中，

257
00:11:01,320 --> 00:11:05,040
curl的使用一直在稳步增长，

258
00:11:05,040 --> 00:11:07,950
而RCurl的软件包数量却仍然相当。

259
00:11:07,950 --> 00:11:10,020
如果我们查看这些年来这些

260
00:11:10,020 --> 00:11:12,360
软件包的下载统计数据，我们可以看到

261
00:11:12,360 --> 00:11:13,770
类似的趋势。

262
00:11:13,770 --> 00:11:17,730
这里的故事是RCurl包很旧。

263
00:11:17,730 --> 00:11:21,000
自2004年以来一直在CRAN上发表，并且从2006年以来一直

264
00:11:21,000 --> 00:11:22,590
对此发表论文。

265
00:11:22,590 --> 00:11:25,750
这在当时是一些非常开创性的工作。

266
00:11:25,750 --> 00:11:27,990
但是，此后发生了很多变化。

267
00:11:27,990 --> 00:11:31,080
该软件包有一些非常根本的问题。

268
00:11:31,080 --> 00:11:34,830
并且RCurl的维护者不再非常活跃。

269
00:11:34,830 --> 00:11:37,560
因此，我们专门编写了curl包，

270
00:11:37,560 --> 00:11:40,680
以更简单，更可靠的现代

271
00:11:40,680 --> 00:11:42,930
设计替代RCurl。

272
00:11:42,930 --> 00:11:44,405
而且效果很好。

273
00:11:44,405 --> 00:11:45,780
从那以后，大多数用户已切换到

274
00:11:45,780 --> 00:11:48,420
该新程序包。

275
00:11:48,420 --> 00:11:51,300
但是旧的RCurl包仍然存在。

276
00:11:51,300 --> 00:11:53,100
但是，它的状态不是很好。

277
00:11:53,100 --> 00:11:55,050
如果今天使用它，您很快

278
00:11:55,050 --> 00:11:57,580
就会遇到一些问题。

279
00:11:57,580 --> 00:12:00,570
因此，我认为这是一个示例，

280
00:12:00,570 --> 00:12:03,660
指标可以帮助您做出更明智的决策，

281
00:12:03,660 --> 00:12:07,200
并有可能为您省去很多麻烦。

282
00:12:07,200 --> 00:12:11,760
但是，当然，这些技术指标并不总是有效。

283
00:12:11,760 --> 00:12:14,250
例如，我有很多R软件包都很合适。

284
00:12:14,250 --> 00:12:17,460
而且它们仅对非常特殊的

285
00:12:17,460 --> 00:12:19,120
专业人群有用。

286
00:12:19,120 --> 00:12:21,810
因此，该程序包可能没有很多下载

287
00:12:21,810 --> 00:12:23,470
或反向依赖项。

288
00:12:23,470 --> 00:12:25,120
但是，如果这是您所需要的，

289
00:12:25,120 --> 00:12:27,300
那么可能正是您所需要的。

290
00:12:27,300 --> 00:12:30,210
我要谈的第二类指标

291
00:12:30,210 --> 00:12:31,750
是社会指标。

292
00:12:31,750 --> 00:12:33,900
我认为这是与项目背后的

293
00:12:33,900 --> 00:12:37,410
人员以及开发

294
00:12:37,410 --> 00:12:39,300
和参与的组织方式

295
00:12:39,300 --> 00:12:41,730
有关的所有事情。

296
00:12:41,730 --> 00:12:44,070
以我的经验，到目前为止，

297
00:12:44,070 --> 00:12:45,540
这些是在健康，开源项目中

298
00:12:45,540 --> 00:12:48,580
需要寻找的最重要的东西。

299
00:12:48,580 --> 00:12:50,550
但是这些都不容易量化。

300
00:12:50,550 --> 00:12:52,440
很多只是归结为

301
00:12:52,440 --> 00:12:54,840
对社区有一点了解。

302
00:12:54,840 --> 00:12:59,840
因此，无论好坏，开放源代码项目

303
00:12:59,880 --> 00:13:02,670
在大多数情况下都是由一两个人维护的。

304
00:13:02,670 --> 00:13:06,630
我真的很喜欢今年早些时候Nadia Eghbal

305
00:13:06,630 --> 00:13:08,700
撰写的这本很棒的书，

306
00:13:08,700 --> 00:13:12,570
它谈到了开源开发背后的现实，

307
00:13:12,570 --> 00:13:15,510
以及为什么会这样，并带来了后果。

308
00:13:15,510 --> 00:13:17,820
再次，这是与商业软件的

309
00:13:17,820 --> 00:13:19,090
最大区别之一。

310
00:13:19,090 --> 00:13:22,680
很多人已经习惯了由大公司的

311
00:13:22,680 --> 00:13:26,400
匿名工程师编写的软件思想。

312
00:13:26,400 --> 00:13:29,310
那不是它对我们起作用的方式。

313
00:13:29,310 --> 00:13:32,850
开源软件是由像你我这样的人编写的。

314
00:13:32,850 --> 00:13:35,550
而且，您应该将R包想像成

315
00:13:35,550 --> 00:13:38,970
科学出版物或本地艺术家

316
00:13:38,970 --> 00:13:41,910
或音乐家的作品。

317
00:13:41,910 --> 00:13:45,390
谁在制造那个东西真的很重要。

318
00:13:45,390 --> 00:13:48,810
因此，最重要的社会指标基本上

319
00:13:48,810 --> 00:13:51,450
是谁，作者是谁？

320
00:13:51,450 --> 00:13:54,330
就像，它们隶属于哪些组织？

321
00:13:54,330 --> 00:13:58,500
他们与哪些人经常合作？

322
00:13:58,500 --> 00:14:00,420
如果他们仍然活跃，那么他们目前

323
00:14:00,420 --> 00:14:01,950
正在做什么？

324
00:14:01,950 --> 00:14:03,480
并且，根据包裹的类型，

325
00:14:03,480 --> 00:14:06,480
您可能会在意他们的正式资格。

326
00:14:06,480 --> 00:14:08,040
并且，如果他们拥有博客

327
00:14:08,040 --> 00:14:10,210
或社交媒体之类的在线业务。

328
00:14:10,210 --> 00:14:12,360
基本上，另一个社会指标

329
00:14:12,360 --> 00:14:14,100
是如何管理产品？

330
00:14:14,100 --> 00:14:16,650
是否有报告错误的公共场所？

331
00:14:16,650 --> 00:14:18,510
这些通常会解决吗？

332
00:14:18,510 --> 00:14:20,790
而且，如果该产品对外部人士的

333
00:14:20,790 --> 00:14:24,750
贡献开放，那么这个过程是什么样的？

334
00:14:24,750 --> 00:14:26,280
对我来说，这很重要。

335
00:14:26,280 --> 00:14:27,930
我相信每个R程序包都应该有

336
00:14:27,930 --> 00:14:31,740
一个公共场所，每个人都可以发布自己的问题。

337
00:14:31,740 --> 00:14:34,860
这样您就可以查看其他用户遇到的问题。

338
00:14:34,860 --> 00:14:37,255
人们可以互相帮助。

339
00:14:37,255 --> 00:14:38,880
但是让我清楚一点，您不应该期望

340
00:14:38,880 --> 00:14:42,240
每个R包作者都是一名全职技术

341
00:14:42,240 --> 00:14:43,080
支持人员。

342
00:14:43,080 --> 00:14:46,200
回答所有这些问题并查看建议

343
00:14:46,200 --> 00:14:47,520
可能会很累。

344
00:14:47,520 --> 00:14:49,560
有时，您只是几天或几周

345
00:14:49,560 --> 00:14:51,510
或几个月都没有时间

346
00:14:51,510 --> 00:14:53,760
从事某个项目。

347
00:14:53,760 --> 00:14:57,540
但是对我而言，重要的是透明度。

348
00:14:57,540 --> 00:15:01,560
如果我看不到软件包存在哪些常见问题

349
00:15:01,560 --> 00:15:06,480
或疑问，那是一个危险信号。

350
00:15:06,480 --> 00:15:09,040
可能会有一些例外。

351
00:15:09,040 --> 00:15:11,070
如果软件包相对较小

352
00:15:11,070 --> 00:15:13,350
并且由真正是该领域专家的

353
00:15:13,350 --> 00:15:17,010
教授进行维护，则可以。

354
00:15:17,010 --> 00:15:20,850
但总的来说，我认为功能问题跟踪器

355
00:15:20,850 --> 00:15:24,000
实际上是运行良好的开源项目的

356
00:15:24,000 --> 00:15:25,350
最低要求。

357
00:15:25,350 --> 00:15:28,230
最后，您可能会想到的其他社会指标

358
00:15:28,230 --> 00:15:31,860
是可用于学习该软件包的可用资源。

359
00:15:31,860 --> 00:15:34,560
例如，如果软件包

360
00:15:34,560 --> 00:15:36,900
作者本人或

361
00:15:36,900 --> 00:15:39,720
撰写博客文章的用户有不错的文档。

362
00:15:39,720 --> 00:15:42,810
但是例如，如果在Stack Overflow上回答了

363
00:15:42,810 --> 00:15:45,690
很多问题，那可能是一个很好的

364
00:15:45,690 --> 00:15:48,090
信息来源，也表明其他人

365
00:15:48,090 --> 00:15:50,580
正在使用此软件包。

366
00:15:50,580 --> 00:15:52,830
然后是第三类指标。

367
00:15:52,830 --> 00:15:54,818
而且这些可能更特定于R，

368
00:15:54,818 --> 00:15:56,610
因为我们有一些研究软件。

369
00:15:56,610 --> 00:15:59,860
这些都是科学指标。

370
00:15:59,860 --> 00:16:02,820
因此，对于专门实现某种科学方法的

371
00:16:02,820 --> 00:16:05,430
软件包，您可能

372
00:16:05,430 --> 00:16:08,430
会对这些结果的有效性感兴趣。

373
00:16:08,430 --> 00:16:10,710
例如，如果包装盒适合某些型号，

374
00:16:10,710 --> 00:16:14,250
则需要确保包装盒能够正确

375
00:16:14,250 --> 00:16:18,880
处理所有边缘情况。

376
00:16:18,880 --> 00:16:21,750
当然，这很难判断。

377
00:16:21,750 --> 00:16:23,710
但是有些事情我们可以看一下。

378
00:16:23,710 --> 00:16:27,210
例如，某些软件包已通过同行

379
00:16:27,210 --> 00:16:28,043
评审过程。

380
00:16:28,043 --> 00:16:32,100
例如，在思科软件杂志或rOpenSci中，

381
00:16:32,100 --> 00:16:33,110
这是一个好兆头。

382
00:16:33,110 --> 00:16:34,860
这这不能保证包装

383
00:16:34,860 --> 00:16:36,610
永远保持良好的信誉。

384
00:16:36,610 --> 00:16:39,000
但是至少，作者在某个时候

385
00:16:39,000 --> 00:16:42,210
经过了努力，要求同事对

386
00:16:42,210 --> 00:16:44,190
代码进行批判性研究。

387
00:16:44,190 --> 00:16:48,750
当然，我们可以看看科学

388
00:16:48,750 --> 00:16:51,060
出版物中包装的引文。

389
00:16:51,060 --> 00:16:53,280
这非常棘手，因为许多研究人员

390
00:16:53,280 --> 00:16:54,660
没有引用软件。

391
00:16:54,660 --> 00:16:56,790
如果他们引用它们，可能只是引用

392
00:16:56,790 --> 00:17:01,110
R或Tidyverse，而不引用单个软件包。

393
00:17:01,110 --> 00:17:05,220
但是有趣的是，如今许多期刊开始

394
00:17:05,220 --> 00:17:09,060
要求研究人员在其

395
00:17:09,060 --> 00:17:11,730
出版物中包括分析代码，

396
00:17:11,730 --> 00:17:13,800
以实现可重复性。

397
00:17:13,800 --> 00:17:16,170
因此，您可以想像一下，如果可以通过这种

398
00:17:16,170 --> 00:17:17,880
方式获得大量代码，我们可以

399
00:17:17,880 --> 00:17:20,730
开始分析其中一些代码，

400
00:17:20,730 --> 00:17:23,369
以查看科学研究中通常

401
00:17:23,369 --> 00:17:26,319
使用哪些R软件包。

402
00:17:26,319 --> 00:17:30,270
因此，我认为R包的科学质量

403
00:17:30,270 --> 00:17:35,270
是迄今为止最难判断的，但非常重要。

404
00:17:35,597 --> 00:17:36,763
行。

405
00:17:36,763 --> 00:17:38,535
那我为什么要谈论所有这些呢？

406
00:17:38,535 --> 00:17:42,300
在rOpenSci中，我们希望帮助研究人员从R中获得最大

407
00:17:42,300 --> 00:17:45,750
收益。因此，我们进行策展，并重新组织

408
00:17:45,750 --> 00:17:47,760
R程序包的同行评审。

409
00:17:47,760 --> 00:17:50,340
并且我们提供了一些开发基础架构。

410
00:17:50,340 --> 00:17:53,670
最近，我们越来越感到

411
00:17:53,670 --> 00:17:57,150
需要更好的工具来主动监视

412
00:17:57,150 --> 00:18:00,240
R软件包的质量。

413
00:18:00,240 --> 00:18:03,520
这不仅适用于我们的内部项目，

414
00:18:03,520 --> 00:18:07,080
也适用于整个R生态系统，

415
00:18:07,080 --> 00:18:11,320
以便能够更好地为研究人员提供使用建议。

416
00:18:11,320 --> 00:18:14,580
因此，我们已经开始研究这个名为R-universe的新项目。

417
00:18:14,580 --> 00:18:16,560
一方面，R-universe是

418
00:18:16,560 --> 00:18:19,270
我们内部构建基础结构的扩展。

419
00:18:19,270 --> 00:18:22,020
因此，在rOpenSci中，我们有一个文档服务器，

420
00:18:22,020 --> 00:18:24,540
可自动为所有R软件包构建

421
00:18:24,540 --> 00:18:26,160
包装和文档。

422
00:18:26,160 --> 00:18:28,020
我们有一个类似CRAN的服务器，

423
00:18:28,020 --> 00:18:29,910
它会自动为我们所有的软件包

424
00:18:29,910 --> 00:18:31,050
构建二进制文件。

425
00:18:31,050 --> 00:18:32,470
而且效果很好。

426
00:18:32,470 --> 00:18:35,070
借助R-universe，我们基本上希望使其他

427
00:18:35,070 --> 00:18:38,970
组织能够利用这些相同的工具。

428
00:18:38,970 --> 00:18:41,820
但是我们希望R-universe不仅成为

429
00:18:41,820 --> 00:18:44,700
构建系统，而且希望成为一个

430
00:18:44,700 --> 00:18:47,290
您可以了解更多有关这些软件包的地方。

431
00:18:47,290 --> 00:18:50,070
因此，我们将尝试将您从构建系统中

432
00:18:50,070 --> 00:18:52,170
获得的一些硬数据

433
00:18:52,170 --> 00:18:55,410
与有关生命周期中的作者和

434
00:18:55,410 --> 00:18:58,740
活动以及我们已经讨论过的所有这些内容的

435
00:18:58,740 --> 00:19:00,323
其他信息源结合起来。

436
00:19:00,323 --> 00:19:01,740
然后，还有其他人

437
00:19:01,740 --> 00:19:03,480
在研究科学指标。

438
00:19:03,480 --> 00:19:05,490
因此，他们正在开发可

439
00:19:05,490 --> 00:19:09,810
帮助我们在科学出版物中找到

440
00:19:09,810 --> 00:19:12,300
引文和提及包装的工具。

441
00:19:12,300 --> 00:19:15,190
除了显示有关单个项目的信息外，

442
00:19:15,190 --> 00:19:18,510
我们还希望帮助发现其他软件。

443
00:19:18,510 --> 00:19:23,510
因此，通过交叉引用同一作者或同一组织的

444
00:19:24,040 --> 00:19:27,180
相似软件包或其他作品，也许

445
00:19:27,180 --> 00:19:30,190
我们可以构建推荐系统。

446
00:19:30,190 --> 00:19:34,950
最后，我们希望在这个地方能说出

447
00:19:34,950 --> 00:19:39,120
R项目的影响和重要性，

448
00:19:39,120 --> 00:19:43,680
以帮助软件包作者以与科学

449
00:19:43,680 --> 00:19:46,200
出版物相同的方式

450
00:19:46,200 --> 00:19:48,750
获得研究软件的认可。

451
00:19:48,750 --> 00:19:50,500
这就是我的话题。

452
00:19:50,500 --> 00:19:51,700
感谢您的收听。

453
00:19:51,700 --> 00:19:54,480
我希望它能使您对开源开发

454
00:19:54,480 --> 00:19:57,270
背后的世界有所思考。

455
00:19:57,270 --> 00:19:59,670
如果我对R-universe项目感兴趣，

456
00:19:59,670 --> 00:20:04,020
请随时关注我们的网站r-universe.dev，我们将

457
00:20:04,020 --> 00:20:06,870
在其中开始添加

458
00:20:06,870 --> 00:20:09,050
来年的更多工作。

