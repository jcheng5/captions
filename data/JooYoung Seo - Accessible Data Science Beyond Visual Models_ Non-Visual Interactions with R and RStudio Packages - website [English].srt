1
00:00:06,860 --> 00:00:08,220
JOOYOUNG SEO: Hello.

2
00:00:08,220 --> 00:00:12,090
I'm JooYoung Seo, a doctoral student
in learning design technology

3
00:00:12,090 --> 00:00:13,980
program at Penn State.

4
00:00:13,980 --> 00:00:18,470
And I was one of the
interns at RStudio in 2020.

5
00:00:18,470 --> 00:00:23,720
I've been using R without
sight because I'm blind.

6
00:00:23,720 --> 00:00:27,200
Yeah, I understand that you
might have a big question

7
00:00:27,200 --> 00:00:29,080
mark in mind--

8
00:00:29,080 --> 00:00:35,100
how a blind person could do data
science or even use a computer?

9
00:00:35,100 --> 00:00:38,910
In this talk, I'll answer
the fundamental questions

10
00:00:38,910 --> 00:00:42,270
that you might have by
demonstrating some strategies

11
00:00:42,270 --> 00:00:46,200
that I've used plus by
introducing some accessibility

12
00:00:46,200 --> 00:00:49,110
improvements made
from RStudio IDE

13
00:00:49,110 --> 00:00:53,340
and Shiny that I was
involved in for my internship.

14
00:00:53,340 --> 00:00:55,300
OK, let's get started.

15
00:00:58,210 --> 00:01:02,910
If we're talking about
R and data science,

16
00:01:02,910 --> 00:01:06,010
let me address this
question first.

17
00:01:06,010 --> 00:01:08,380
How do I use a computer?

18
00:01:08,380 --> 00:01:10,860
Well, I need to ask you back.

19
00:01:10,860 --> 00:01:13,860
Then how do you
use your computer?

20
00:01:13,860 --> 00:01:17,190
In other words, how do you
interact with computer?

21
00:01:20,850 --> 00:01:24,480
We could break down the way
we interact with computer

22
00:01:24,480 --> 00:01:27,280
into input and output--

23
00:01:27,280 --> 00:01:31,410
that is, how we pass
information to computer

24
00:01:31,410 --> 00:01:35,960
and how we get
information from computer.

25
00:01:35,960 --> 00:01:39,440
What if we would remove
visual aspect from the two

26
00:01:39,440 --> 00:01:40,640
modes of interactions?

27
00:01:43,270 --> 00:01:48,370
Undoubtedly, using mouse
would become almost impossible

28
00:01:48,370 --> 00:01:51,110
or even useless.

29
00:01:51,110 --> 00:01:54,140
I doubt no one could
point and double

30
00:01:54,140 --> 00:01:58,910
click RStudio icon on their
desktop in a stable fashion

31
00:01:58,910 --> 00:02:01,750
when blindfolded.

32
00:02:01,750 --> 00:02:05,800
But you can still use keyboard
as long as your muscle memory

33
00:02:05,800 --> 00:02:09,509
remembers your keyboard layout.

34
00:02:09,509 --> 00:02:12,090
What about output?

35
00:02:12,090 --> 00:02:19,410
We need some workarounds
alternative to visual monitor,

36
00:02:19,410 --> 00:02:21,075
like using sound output instead.

37
00:02:24,390 --> 00:02:29,460
I use computer via keyboard
only input and sound and tactile

38
00:02:29,460 --> 00:02:31,665
output just like this.

39
00:02:31,665 --> 00:02:35,625
SPEAKER 1: [INAUDIBLE]

40
00:02:37,110 --> 00:02:39,060
JOOYOUNG SEO: Isn't
it too fast for you?

41
00:02:39,060 --> 00:02:39,573
No worries.

42
00:02:39,573 --> 00:02:40,740
Let me slow it down for you.

43
00:02:40,740 --> 00:02:43,950
SPEAKER 1: Slower, slower,
slower, slower, slower, slower,

44
00:02:43,950 --> 00:02:45,980
slower, slower,
slower, slower, slower.

45
00:02:45,980 --> 00:02:51,510
[INAUDIBLE] left
[INAUDIBLE] right Enter.

46
00:02:51,510 --> 00:02:54,110
One, hello world
greater [INAUDIBLE].

47
00:03:05,550 --> 00:03:09,660
R graphics, device two active.

48
00:03:09,660 --> 00:03:13,590
JOOYOUNG SEO: Now that you got
how I interact with computer,

49
00:03:13,590 --> 00:03:16,260
let's talk about data science.

50
00:03:16,260 --> 00:03:19,810
Data science involves a
cycle interaction with data,

51
00:03:19,810 --> 00:03:24,090
such as importing, tidying,
transforming, visualizing,

52
00:03:24,090 --> 00:03:26,220
and modeling.

53
00:03:26,220 --> 00:03:30,840
And it feels like data science
is highly vision-dominant.

54
00:03:30,840 --> 00:03:33,080
Yes, it could be.

55
00:03:33,080 --> 00:03:36,785
But data science is
more than what is seen.

56
00:03:39,290 --> 00:03:45,140
If data science was restricted
to only vision domain,

57
00:03:45,140 --> 00:03:49,490
that would mean that people who
cannot employ vision science

58
00:03:49,490 --> 00:03:52,980
can't do data science at all.

59
00:03:52,980 --> 00:03:57,060
Very fortunately,
however, that is not true

60
00:03:57,060 --> 00:04:02,400
because we have R, which
enables blind people see data

61
00:04:02,400 --> 00:04:06,600
beyond visual models

62
00:04:06,600 --> 00:04:12,480
I believe R is one of the most
accessible data environments

63
00:04:12,480 --> 00:04:15,270
because of the
following benefits.

64
00:04:15,270 --> 00:04:18,810
First, command line interface--

65
00:04:18,810 --> 00:04:23,910
as opposed to point and click
graphical user interface which

66
00:04:23,910 --> 00:04:27,060
requires mouse
input interaction,

67
00:04:27,060 --> 00:04:31,270
R is a command line environment.

68
00:04:31,270 --> 00:04:34,620
This means that you can do
everything within terminal

69
00:04:34,620 --> 00:04:37,330
using keyboard only.

70
00:04:37,330 --> 00:04:42,150
This is a good benefit for
keyboard users like me.

71
00:04:42,150 --> 00:04:46,710
Second, the beautiful interplay
between reproducibility

72
00:04:46,710 --> 00:04:49,170
and accessibility--

73
00:04:49,170 --> 00:04:52,950
R Markdown is a
plain text-based document

74
00:04:52,950 --> 00:04:59,570
for reproducible report that can
be written with any text editor

75
00:04:59,570 --> 00:05:02,490
and can be rendered
into multiple formats,

76
00:05:02,490 --> 00:05:09,830
including HTML, Word,
PDF, epub, and more.

77
00:05:09,830 --> 00:05:14,420
These outputs in many cases
are made readily accessible

78
00:05:14,420 --> 00:05:20,140
to assisted technologies,
especially the HTML output

79
00:05:20,140 --> 00:05:23,220
is super accessible.

80
00:05:23,220 --> 00:05:27,780
Last but not least, there are
a number of accessible packages

81
00:05:27,780 --> 00:05:31,800
out there thanks to
its open source nature.

82
00:05:36,470 --> 00:05:40,640
There are two either
accessible or semi-accessible

83
00:05:40,640 --> 00:05:42,680
integrated development
environments

84
00:05:42,680 --> 00:05:45,020
supporting R programming.

85
00:05:45,020 --> 00:05:50,280
One is RStudio IDE
version 1.3 or later.

86
00:05:50,280 --> 00:05:53,420
The other one is
Visual Studio code

87
00:05:53,420 --> 00:05:58,430
with some extensions for
R. It was such an honor

88
00:05:58,430 --> 00:06:00,980
for me to be part of the
RStudio accessibility

89
00:06:00,980 --> 00:06:05,660
project for my summer
2020 internship

90
00:06:05,660 --> 00:06:10,400
under the great double
mentorship of Gary

91
00:06:10,400 --> 00:06:14,420
Richie on RStudio team and
Winston Chang on Shiny

92
00:06:14,420 --> 00:06:16,670
team.

93
00:06:16,670 --> 00:06:20,930
Since RStudio has just started
its accessibility support,

94
00:06:20,930 --> 00:06:24,920
there are still rooms
for further improvements,

95
00:06:24,920 --> 00:06:28,100
but we can at least
recommend trying out

96
00:06:28,100 --> 00:06:32,210
RStudio Server for keyboard
or screen reader users

97
00:06:32,210 --> 00:06:35,150
to benefit from its
accessibility enhancements.

98
00:06:38,950 --> 00:06:42,790
As RStudio Server
requires Linux system,

99
00:06:42,790 --> 00:06:46,450
Windows users need
virtual technology called

100
00:06:46,450 --> 00:06:49,190
Windows subsystem for Linux.

101
00:06:49,190 --> 00:06:53,390
And we published the
technical details for this.

102
00:06:53,390 --> 00:06:54,310
Just check it out.

103
00:06:58,090 --> 00:07:01,410
Here are some accessibility
options currently supported

104
00:07:01,410 --> 00:07:06,000
in RStudio server
version 1.3 or higher.

105
00:07:06,000 --> 00:07:10,640
We have added screen reader
support, animation reduction,

106
00:07:10,640 --> 00:07:12,565
tab key focus
control, et cetera.

107
00:07:15,440 --> 00:07:18,950
And previously, it was very
challenging for keyboard users

108
00:07:18,950 --> 00:07:21,140
to move their focus around.

109
00:07:21,140 --> 00:07:24,200
But now, you can get
your focus moved around

110
00:07:24,200 --> 00:07:27,920
by pressing Tab key from
menu bar all the way down

111
00:07:27,920 --> 00:07:31,420
to workbench area.

112
00:07:31,420 --> 00:07:34,960
You can send any inquiries
or suggestions directly

113
00:07:34,960 --> 00:07:36,920
to accessibility@rstudio.com.

114
00:07:40,890 --> 00:07:44,430
Now it's time to introduce
some accessible and useful R

115
00:07:44,430 --> 00:07:47,120
packages that I've used.

116
00:07:47,120 --> 00:07:50,540
I use gt when
interacting with data

117
00:07:50,540 --> 00:07:56,750
frame and other tidy data
table, and I use sonify

118
00:07:56,750 --> 00:08:02,740
for two dimensional
scatterplot or line charts.

119
00:08:02,740 --> 00:08:08,230
BrailleR package is very useful
for understanding histogram,

120
00:08:08,230 --> 00:08:12,190
bar plot, and box plot.

121
00:08:12,190 --> 00:08:16,220
Shiny-- it used to be
not very accessible,

122
00:08:16,220 --> 00:08:18,340
but it's getting accessible.

123
00:08:18,340 --> 00:08:24,520
So of course, I use it for
interactive data science work.

124
00:08:24,520 --> 00:08:29,200
RMarkdown is such an
accessible Swiss army knife

125
00:08:29,200 --> 00:08:33,039
because you can do almost
everything possible in R

126
00:08:33,039 --> 00:08:35,274
and turn it into
accessible output.

127
00:08:39,370 --> 00:08:42,309
All right, let me walk
you through each of them

128
00:08:42,309 --> 00:08:44,560
from how I interact
with data frame.

129
00:08:47,530 --> 00:08:52,300
I assume View() is one of the
most widely used basic functions

130
00:08:52,300 --> 00:08:58,720
among R users to get a better
sense of data frame structure.

131
00:08:58,720 --> 00:09:02,800
Unfortunately, the
default Data Viewer

132
00:09:02,800 --> 00:09:07,860
called from utils package
is completely inaccessible.

133
00:09:07,860 --> 00:09:11,880
This means that screen reader
does not read anything for you

134
00:09:11,880 --> 00:09:14,680
from the default pane.

135
00:09:14,680 --> 00:09:18,100
RStudio has replaced
this default one

136
00:09:18,100 --> 00:09:24,190
with their enhanced data
viewer, which is accessible.

137
00:09:24,190 --> 00:09:27,100
However, that's not
a universal solution

138
00:09:27,100 --> 00:09:30,040
for those who do
not use RStudio IDE.

139
00:09:34,700 --> 00:09:42,160
My simple go-to is gt,
developed by Rich and Joe.

140
00:09:42,160 --> 00:09:45,610
gt stands for Grammar
of Tables, and it

141
00:09:45,610 --> 00:09:51,070
has a number of good
features that helps

142
00:09:51,070 --> 00:09:52,960
you create nice-looking tables.

143
00:09:55,910 --> 00:10:02,390
But I use its core function,
gt::gt(), in lieu of data viewer.

144
00:10:02,390 --> 00:10:03,170
Why I use this?

145
00:10:03,170 --> 00:10:07,040
Because it
generates and opens

146
00:10:07,040 --> 00:10:10,940
an HTML table which is fully
screen reader accessible

147
00:10:10,940 --> 00:10:12,065
and keyboard users.

148
00:10:17,780 --> 00:10:23,120
Next I will talk about how I
interpret a two dimensional

149
00:10:23,120 --> 00:10:23,900
scatterplot.

150
00:10:28,310 --> 00:10:32,240
On the left hand side, we
have a simple scatterplot

151
00:10:32,240 --> 00:10:36,100
with x and y-axes.

152
00:10:36,100 --> 00:10:37,930
How would you be
able to represent

153
00:10:37,930 --> 00:10:43,990
this visualization in a way that
blind people could also digest?

154
00:10:43,990 --> 00:10:46,300
What about using sound?

155
00:10:46,300 --> 00:10:50,780
Say, for example, we
can represent values

156
00:10:50,780 --> 00:10:56,240
on x-axis using stereo panning
sound from left to right.

157
00:10:56,240 --> 00:11:02,800
And we could map y-axis
values with different pitch.

158
00:11:02,800 --> 00:11:07,890
Data points that are higher on
the graph have a higher pitch.

159
00:11:07,890 --> 00:11:10,860
Data points that are
lower on the graph

160
00:11:10,860 --> 00:11:14,780
have corresponding lower pitch.

161
00:11:14,780 --> 00:11:15,820
Just take a listen.

162
00:11:23,210 --> 00:11:26,960
It makes sense, doesn't it?

163
00:11:26,960 --> 00:11:30,260
This technique that
represents data using sound

164
00:11:30,260 --> 00:11:32,990
is called sonification.

165
00:11:32,990 --> 00:11:36,230
I used data
sonification alternative

166
00:11:36,230 --> 00:11:39,330
to data visualization.

167
00:11:39,330 --> 00:11:44,730
We can also try this out with
sonified package developed

168
00:11:44,730 --> 00:11:49,620
by Stefan Siegert
and Robin Williams.

169
00:11:54,180 --> 00:12:01,400
Next, I will show you how
I interact with histogram.

170
00:12:01,400 --> 00:12:04,640
Here is a visual histogram.

171
00:12:04,640 --> 00:12:09,370
How could we make it accessible
to people who are blind?

172
00:12:09,370 --> 00:12:12,820
Yes, of course, we can use
data sonification again

173
00:12:12,820 --> 00:12:17,060
by mapping x and
y-axes it sounds.

174
00:12:17,060 --> 00:12:21,670
But I would like to
introduce another way of data

175
00:12:21,670 --> 00:12:24,160
representation this time.

176
00:12:24,160 --> 00:12:26,500
That is using text description.

177
00:12:29,140 --> 00:12:33,550
The BrailleR package
developed by Jonathan Godfrey

178
00:12:33,550 --> 00:12:36,535
has a function that
translates some R

179
00:12:36,535 --> 00:12:39,400
graphs into alternative
textual description.

180
00:12:42,210 --> 00:12:46,550
You can call this
function by VI(), which

181
00:12:46,550 --> 00:12:50,100
stands for Vision Impairments.

182
00:12:50,100 --> 00:12:53,910
This package is currently
available on GitHub that you

183
00:12:53,910 --> 00:12:58,900
can install via
remotes::install_github()

184
00:12:58,900 --> 00:12:59,400
function.

185
00:13:02,580 --> 00:13:08,810
For box plot interaction,
we can apply the same method

186
00:13:08,810 --> 00:13:15,430
to this visualization
just like this.

187
00:13:15,430 --> 00:13:19,120
I know we got a quite long
description this time,

188
00:13:19,120 --> 00:13:23,050
but it's cool that we can
have auto generated alt

189
00:13:23,050 --> 00:13:26,840
text for some basic R graphs.

190
00:13:26,840 --> 00:13:29,570
If you are an R
developer, please

191
00:13:29,570 --> 00:13:32,480
help Jonathan
Godfrey on GitHub

192
00:13:32,480 --> 00:13:35,930
to support more types of graphs.

193
00:13:35,930 --> 00:13:40,880
OK, I want to turn into
accessible math content

194
00:13:40,880 --> 00:13:41,660
interaction.

195
00:13:44,540 --> 00:13:51,940
I kept mentioning that RMarkdown
contributes to accessibility.

196
00:13:51,940 --> 00:13:58,570
One of the most pleasant
supports is accessible math.

197
00:13:58,570 --> 00:14:02,950
For HTML output, RMarkdown
uses mathjax

198
00:14:02,950 --> 00:14:09,870
JS library by default for
LaTex math expressions,

199
00:14:09,870 --> 00:14:13,860
and this is rendered into
accessible math markup language

200
00:14:13,860 --> 00:14:19,755
content that is fully accessible
with modern screen readers.

201
00:14:26,480 --> 00:14:28,655
I'm going to talk a
little bit about shiny.

202
00:14:31,310 --> 00:14:34,370
I'm super excited to
announce that shiny

203
00:14:34,370 --> 00:14:36,670
is getting accessible.

204
00:14:36,670 --> 00:14:40,540
With the amazing support of
Winston, Carson, Barrett,

205
00:14:40,540 --> 00:14:43,040
and other Shiny
team members, I was

206
00:14:43,040 --> 00:14:46,090
working for making Shiny
accessible for my internship

207
00:14:46,090 --> 00:14:48,670
activity at RStudio.

208
00:14:48,670 --> 00:14:52,900
As a result, you will see many
accessibility improvements

209
00:14:52,900 --> 00:14:58,790
in the next shiny release
version 1.6 or higher.

210
00:14:58,790 --> 00:15:02,430
If you want to test the
development version,

211
00:15:02,430 --> 00:15:05,390
that's available on GitHub,
and you can install it

212
00:15:05,390 --> 00:15:06,635
through remotes package.

213
00:15:10,110 --> 00:15:12,745
Some significant
improvements are as follows.

214
00:15:15,410 --> 00:15:20,020
First, we've added Paypal's
bootstrap accessibility plug-in

215
00:15:20,020 --> 00:15:21,810
under the hood.

216
00:15:21,810 --> 00:15:28,380
So alert, tooltip, pop over,
modal dialog, dropdown,

217
00:15:28,380 --> 00:15:33,240
tab panel, collapse,
and carrousel elements

218
00:15:33,240 --> 00:15:38,300
are made keyboard-accessible.

219
00:15:38,300 --> 00:15:42,230
Next, there are many
significant improvements

220
00:15:42,230 --> 00:15:45,520
made for Shiny widgets.

221
00:15:45,520 --> 00:15:50,500
Select input, especially
sanitize input,

222
00:15:50,500 --> 00:15:55,580
file input, are now fully
keyboard accessible.

223
00:15:55,580 --> 00:16:01,670
Font awesome and glyphy icon
now produces appropriate labels

224
00:16:01,670 --> 00:16:06,530
based on icon names
for screen readers.

225
00:16:06,530 --> 00:16:12,230
Radio buttons and
chatbox query input

226
00:16:12,230 --> 00:16:14,060
are appropriately
grouped together

227
00:16:14,060 --> 00:16:17,560
for assistive technologies.

228
00:16:17,560 --> 00:16:21,970
Date input and date range
input are properly labeled.

229
00:16:24,940 --> 00:16:29,980
And now dynamic content within
all of the output and updated

230
00:16:29,980 --> 00:16:36,022
input are auto-announced to
screen readers and refreshable

231
00:16:36,022 --> 00:16:36,605
for a display.

232
00:16:41,360 --> 00:16:44,360
There are also some
great enhancements

233
00:16:44,360 --> 00:16:47,720
for semantic accessibility.

234
00:16:47,720 --> 00:16:52,250
We can pass alt text
to render plot function

235
00:16:52,250 --> 00:16:58,760
to specify alternative text
description for screen readers.

236
00:16:58,760 --> 00:17:02,390
It could be a static text.

237
00:17:02,390 --> 00:17:07,490
Plot object is given by
default, or you can even

238
00:17:07,490 --> 00:17:11,359
use reactive function
for alt term

239
00:17:11,359 --> 00:17:14,270
to create dynamic
text that is useful

240
00:17:14,270 --> 00:17:19,369
when you want to create
reactive alt text in response

241
00:17:19,369 --> 00:17:22,470
to user input.

242
00:17:22,470 --> 00:17:28,040
And you can explicitly set
the lang code, the language code,

243
00:17:28,040 --> 00:17:35,150
used within your shiny app
by passing lang parameter

244
00:17:35,150 --> 00:17:38,010
to full page function.

245
00:17:38,010 --> 00:17:42,930
This helps search engine
parsers and assistive tech

246
00:17:42,930 --> 00:17:46,980
that are identified
document language.

247
00:17:46,980 --> 00:17:50,430
Last but not least,
semantic landmarks

248
00:17:50,430 --> 00:17:55,140
have been applied to main
panel as well as sidebar panel

249
00:17:55,140 --> 00:17:58,890
for screen readers
to quickly navigate

250
00:17:58,890 --> 00:18:01,530
through Shiny apps
in a logical manner.

251
00:18:07,410 --> 00:18:10,830
It's time to close my talk.

252
00:18:10,830 --> 00:18:14,220
I have touched upon some
fundamental questions

253
00:18:14,220 --> 00:18:15,210
that you might have.

254
00:18:18,120 --> 00:18:21,030
How could a blind
person do computer,

255
00:18:21,030 --> 00:18:26,210
and how could a blind
person do data science?

256
00:18:26,210 --> 00:18:29,670
As my presentation
title suggests,

257
00:18:29,670 --> 00:18:33,990
we can make data science
accessible beyond visual models

258
00:18:33,990 --> 00:18:41,520
because data science
requires insight, not sight.

259
00:18:41,520 --> 00:18:45,890
And all is possible with R.

260
00:18:45,890 --> 00:18:51,080
According to the World Health
Organization's 2018 report,

261
00:18:51,080 --> 00:18:54,650
globally, more than
1.3 billion people

262
00:18:54,650 --> 00:18:58,340
have some varying degree
of visual impairments

263
00:18:58,340 --> 00:19:01,760
and 36 million of
whom are blind.

264
00:19:01,760 --> 00:19:04,490
I'm just one of them.

265
00:19:04,490 --> 00:19:10,530
Why not we invite more people
with diverse abilities to use R

266
00:19:10,530 --> 00:19:14,800
and to enjoy data sciencing?

267
00:19:14,800 --> 00:19:16,680
Thank you.
