1
00:00:01,868 --> 00:00:04,203
[MUSIC PLAYING]

2
00:00:06,540 --> 00:00:08,730
PRESENTER: Welcome
to rstudio::global.

3
00:00:08,730 --> 00:00:10,483
Thank you so much for tuning in.

4
00:00:10,483 --> 00:00:12,150
I'm going to talk
today about the things

5
00:00:12,150 --> 00:00:15,930
that we can learn about ggplot2
from our data visualization

6
00:00:15,930 --> 00:00:18,260
mishaps.

7
00:00:18,260 --> 00:00:21,230
So if you have spent much
time visualizing data,

8
00:00:21,230 --> 00:00:23,090
you have probably ended
up with some plots

9
00:00:23,090 --> 00:00:25,370
that did not go to plan.

10
00:00:25,370 --> 00:00:28,790
Maybe you had lots of
overlapping blue hexagons

11
00:00:28,790 --> 00:00:31,670
or text that took
up the entire area

12
00:00:31,670 --> 00:00:35,240
of the plot or giant hairballs.

13
00:00:35,240 --> 00:00:36,470
My name is Kara Woo.

14
00:00:36,470 --> 00:00:39,590
And I'm one of the maintainers
of the accidental aRt Twitter

15
00:00:39,590 --> 00:00:43,430
account and I'm a
contributor to ggplot2 also.

16
00:00:43,430 --> 00:00:48,470
So I've seen a lot of plots
that have gone totally wrong.

17
00:00:48,470 --> 00:00:53,780
The accidental aRt account
exists to showcase these plots.

18
00:00:53,780 --> 00:00:56,300
To showcase the plots
gone beautifully wrong,

19
00:00:56,300 --> 00:01:01,400
the things that didn't work out
but looked cool nonetheless.

20
00:01:01,400 --> 00:01:04,430
And I've seen also plots
that just straight up

21
00:01:04,430 --> 00:01:08,750
flopped in sometimes
really subtle or hard

22
00:01:08,750 --> 00:01:10,020
to diagnose ways.

23
00:01:10,020 --> 00:01:14,090
And so there's this whole
spectrum of messed up plots

24
00:01:14,090 --> 00:01:17,120
that I've seen, and
I know that these

25
00:01:17,120 --> 00:01:19,290
can be really frustrating.

26
00:01:19,290 --> 00:01:21,350
But they can also be
an opportunity for us

27
00:01:21,350 --> 00:01:23,397
to create better
plots and to deepen

28
00:01:23,397 --> 00:01:24,980
our understanding
of the tools that we

29
00:01:24,980 --> 00:01:27,860
use to create those plots.

30
00:01:27,860 --> 00:01:32,860
So if you're like me, then when
you create a plot like the ones

31
00:01:32,860 --> 00:01:37,450
that I've showed, you likely go
to a place like Stack Overflow

32
00:01:37,450 --> 00:01:39,940
to find someone with
a similar problem.

33
00:01:39,940 --> 00:01:43,300
Find a hopeful solution
and bring that over

34
00:01:43,300 --> 00:01:46,180
into your code to hopefully fix
the problem that you've had.

35
00:01:46,180 --> 00:01:49,600
And that's great and
that's totally legitimate.

36
00:01:49,600 --> 00:01:51,460
I'm going to argue
though, that when

37
00:01:51,460 --> 00:01:53,830
you get that working
solution, it's

38
00:01:53,830 --> 00:01:57,280
worth taking the time to think
about how that solution fits

39
00:01:57,280 --> 00:02:00,520
in to the conceptual
model of ggplot2.

40
00:02:00,520 --> 00:02:04,030
My feeling is that by
examining these messed up plots

41
00:02:04,030 --> 00:02:06,800
that our mistakes generate
and how we fix them,

42
00:02:06,800 --> 00:02:10,389
we can deepen our understanding
of ggplot2's philosophy

43
00:02:10,389 --> 00:02:15,410
to create better visualizations
faster and more reliably.

44
00:02:15,410 --> 00:02:18,350
So what do I mean by
ggplot2's philosophy?

45
00:02:18,350 --> 00:02:20,960
ggplot2 is a data
visualization package

46
00:02:20,960 --> 00:02:24,140
that embodies a whole
theory of visualization

47
00:02:24,140 --> 00:02:26,360
called the layered
grammar of graphics,

48
00:02:26,360 --> 00:02:29,030
which is based on
Leland Wilkinson's

49
00:02:29,030 --> 00:02:30,500
Grammar of Graphics.

50
00:02:30,500 --> 00:02:34,340
But it has some specific
things that are tailored

51
00:02:34,340 --> 00:02:37,340
to its implementation in R.

52
00:02:37,340 --> 00:02:40,280
Lots of visualization
software gives you

53
00:02:40,280 --> 00:02:42,420
a bunch of different
charts to choose from.

54
00:02:42,420 --> 00:02:45,710
So you have your pie charts
and your scatter plots,

55
00:02:45,710 --> 00:02:47,540
and your line charts,
and your bar charts

56
00:02:47,540 --> 00:02:50,810
and you take the
end result that you

57
00:02:50,810 --> 00:02:53,360
want to achieve and
sort of work backwards

58
00:02:53,360 --> 00:02:55,490
to fit your data into it.

59
00:02:55,490 --> 00:02:57,440
ggplot2 is not like this.

60
00:02:57,440 --> 00:03:03,020
ggplot2 is a more
data first approach

61
00:03:03,020 --> 00:03:05,300
to building
visualizations, starting

62
00:03:05,300 --> 00:03:10,520
with principles of
essentially a grammar for how

63
00:03:10,520 --> 00:03:14,250
to convey data in visual form.

64
00:03:14,250 --> 00:03:18,110
So when we speak or
write, we don't normally

65
00:03:18,110 --> 00:03:19,910
start with a sentence
structure that we

66
00:03:19,910 --> 00:03:25,310
want to use and then fit our
message into that structure.

67
00:03:25,310 --> 00:03:27,770
Instead we start
with some idea and we

68
00:03:27,770 --> 00:03:31,700
use our knowledge of grammar
and syntax and vocabulary

69
00:03:31,700 --> 00:03:35,100
to craft the message we
want to express that idea.

70
00:03:35,100 --> 00:03:38,750
And that is very analogous
to how ggplot2 works.

71
00:03:38,750 --> 00:03:42,650
ggplot2 lets us express our
data in visual forms that

72
00:03:42,650 --> 00:03:44,780
might be totally
novel and not fit

73
00:03:44,780 --> 00:03:48,470
into common bar
charts and line charts

74
00:03:48,470 --> 00:03:53,130
and common types
of visualizations.

75
00:03:53,130 --> 00:03:56,330
This gives us a really flexible
tool and a really powerful

76
00:03:56,330 --> 00:04:00,770
tool, that we can use to
create the intentional aRt,

77
00:04:00,770 --> 00:04:02,900
like you see on the
slide, which was built

78
00:04:02,900 --> 00:04:06,620
with Danielle Navarro's flametree
package, which itself uses

79
00:04:06,620 --> 00:04:08,390
ggplot2.

80
00:04:08,390 --> 00:04:10,400
So having this
flexibility, gives us

81
00:04:10,400 --> 00:04:14,060
a lot of power and control,
and it also opens up room

82
00:04:14,060 --> 00:04:18,920
for mistakes and for things
to not always work out

83
00:04:18,920 --> 00:04:22,820
the way we had in mind,
the first time around.

84
00:04:22,820 --> 00:04:25,460
There are certain
foibles and mistakes

85
00:04:25,460 --> 00:04:28,250
that come up a lot with
ggplot2 that demonstrate

86
00:04:28,250 --> 00:04:31,610
pretty common misunderstandings
of how ggplot2,

87
00:04:31,610 --> 00:04:33,170
the package works
and that's what

88
00:04:33,170 --> 00:04:34,980
I'm going to talk about today.

89
00:04:34,980 --> 00:04:37,160
The first one that we're
going to talk about

90
00:04:37,160 --> 00:04:39,170
are mapping mishaps.

91
00:04:39,170 --> 00:04:42,050
These don't have to do
with geographical maps.

92
00:04:42,050 --> 00:04:43,940
What we're talking
about here is mapping

93
00:04:43,940 --> 00:04:49,100
visual properties in the plot
to variables in our data.

94
00:04:49,100 --> 00:04:52,520
In the parlance of ggplot2
this these mappings

95
00:04:52,520 --> 00:04:53,750
are called aesthetics.

96
00:04:53,750 --> 00:04:56,445
And they're really at the
heart of ggplot2's grammar

97
00:04:56,445 --> 00:04:56,945
of graphics.

98
00:04:59,770 --> 00:05:01,000
So let's take this plot.

99
00:05:01,000 --> 00:05:03,550
This is a plot of
flipper and bill

100
00:05:03,550 --> 00:05:06,730
length for different species
of penguins in Antarctica.

101
00:05:06,730 --> 00:05:10,180
And in this plot, we have
several different aesthetics.

102
00:05:10,180 --> 00:05:13,120
We have position along
the x-axis, which

103
00:05:13,120 --> 00:05:15,190
corresponds to flipper length.

104
00:05:15,190 --> 00:05:17,620
We have position along
the y-axis, which

105
00:05:17,620 --> 00:05:19,970
corresponds to bill length.

106
00:05:19,970 --> 00:05:23,450
And then we have
both color and shape,

107
00:05:23,450 --> 00:05:26,592
which correspond to
the penguin species.

108
00:05:26,592 --> 00:05:29,050
So one thing that we might want
to do with a plot like this

109
00:05:29,050 --> 00:05:30,700
is label these
different clusters.

110
00:05:30,700 --> 00:05:34,120
We have sort of well-isolated
clusters of these data points

111
00:05:34,120 --> 00:05:36,400
and maybe instead of the
legend at the bottom,

112
00:05:36,400 --> 00:05:39,820
we want to label those
clusters with which species

113
00:05:39,820 --> 00:05:42,370
they correspond to.

114
00:05:42,370 --> 00:05:44,740
And what someone will
often do to achieve

115
00:05:44,740 --> 00:05:47,230
this is add a layer 2
the plot, where they

116
00:05:47,230 --> 00:05:49,900
map the text that
they want to appear

117
00:05:49,900 --> 00:05:54,740
to the x and y positions,
where they want to place it.

118
00:05:54,740 --> 00:06:00,310
So here we have that x
equals 195 and y equals 55,

119
00:06:00,310 --> 00:06:04,010
we're placing the label chinstrap.

120
00:06:04,010 --> 00:06:06,620
And you can see that,
that does work in that it

121
00:06:06,620 --> 00:06:09,890
places text on the plot.

122
00:06:09,890 --> 00:06:12,260
If we look closely though,
it doesn't actually

123
00:06:12,260 --> 00:06:13,520
look that good.

124
00:06:13,520 --> 00:06:15,530
So it's pretty subtle
in this example

125
00:06:15,530 --> 00:06:20,750
but the quality of the text
is a little bit pixelated.

126
00:06:20,750 --> 00:06:24,350
It doesn't look as good
as the points and lines

127
00:06:24,350 --> 00:06:26,470
that are around it.

128
00:06:26,470 --> 00:06:28,340
And if we were running
this code live,

129
00:06:28,340 --> 00:06:32,660
it would actually be a
little bit slow to plot.

130
00:06:32,660 --> 00:06:39,470
Now like I said it's a pretty
subtle change or subtle issue

131
00:06:39,470 --> 00:06:43,820
but we actually get a lot of
ggplot2 issues opened because

132
00:06:43,820 --> 00:06:46,580
of this specific
thing, where people

133
00:06:46,580 --> 00:06:52,460
run into with their own plots
that the plot is really slow,

134
00:06:52,460 --> 00:06:53,850
that the text looks really bad.

135
00:06:53,850 --> 00:06:58,010
And they come to us to say
is this a bug in ggplot2

136
00:06:58,010 --> 00:07:01,870
like it, why does
it look so bad?

137
00:07:01,870 --> 00:07:04,420
We can illustrate what's
going on here another way

138
00:07:04,420 --> 00:07:08,650
by using the ggrepel package,
which will ensure that text

139
00:07:08,650 --> 00:07:10,250
on the plot does not overlap.

140
00:07:10,250 --> 00:07:14,050
And when we do that, we can see
that we actually haven't just

141
00:07:14,050 --> 00:07:16,180
put a single label on the plot.

142
00:07:16,180 --> 00:07:20,440
We've put this whole giant
starburst of the same text

143
00:07:20,440 --> 00:07:21,790
repeated hundreds of times.

144
00:07:24,760 --> 00:07:27,040
What's going on here
is that we've actually

145
00:07:27,040 --> 00:07:29,380
written our label the
same number of times

146
00:07:29,380 --> 00:07:32,930
as there are rows
in our data set.

147
00:07:32,930 --> 00:07:35,090
In this case, 344 times.

148
00:07:37,670 --> 00:07:41,540
By putting the text label
that we want inside this aes

149
00:07:41,540 --> 00:07:46,100
function, where aes
stands for aesthetic,

150
00:07:46,100 --> 00:07:48,830
we've declared a
mapping between our data

151
00:07:48,830 --> 00:07:53,150
and the label causing that
label to repeat as many times

152
00:07:53,150 --> 00:07:56,870
as there are data points.

153
00:07:56,870 --> 00:07:59,380
So that's not great
and we can avoid this

154
00:07:59,380 --> 00:08:01,660
by actually using a
different function called

155
00:08:01,660 --> 00:08:05,470
annotate, which is designed to
put labels on plots just once.

156
00:08:05,470 --> 00:08:08,740
So it's designed to do exactly
what we want to do, just

157
00:08:08,740 --> 00:08:11,380
stick that label on
there once, not map it

158
00:08:11,380 --> 00:08:13,040
to the underlying data.

159
00:08:13,040 --> 00:08:16,870
So we tell annotate that we
want to place a text annotation.

160
00:08:16,870 --> 00:08:19,810
Again give it the
position and the label

161
00:08:19,810 --> 00:08:23,650
and it places that
text on the plot for us

162
00:08:23,650 --> 00:08:26,260
and when we zoom in,
it looks much better.

163
00:08:26,260 --> 00:08:31,140
It would be much
faster to plot as well.

164
00:08:31,140 --> 00:08:32,870
So that was mapping
mishaps, where

165
00:08:32,870 --> 00:08:35,870
we misapplied these
aesthetic mappings

166
00:08:35,870 --> 00:08:41,280
between visual elements
of the plot and our data.

167
00:08:41,280 --> 00:08:46,420
The next common mix up is
what I'll call scale snafus.

168
00:08:46,420 --> 00:08:50,560
In ggplot2 scales convert
values from the data space

169
00:08:50,560 --> 00:08:52,160
to the aesthetic space.

170
00:08:52,160 --> 00:08:54,740
So with our aesthetics
that we just talked about,

171
00:08:54,740 --> 00:08:57,730
we declared a mapping between
visual elements of the plot

172
00:08:57,730 --> 00:09:00,250
and values in the data--

173
00:09:00,250 --> 00:09:02,620
shape to species for instance.

174
00:09:02,620 --> 00:09:05,920
The scale controls how those
data points get translated

175
00:09:05,920 --> 00:09:10,120
into what we see on the plot.

176
00:09:10,120 --> 00:09:12,520
We're going to talk about
coordinate systems too,

177
00:09:12,520 --> 00:09:15,670
which I would draw the
axes and panels in the plot

178
00:09:15,670 --> 00:09:19,370
and generally kind of set up
the 2D environment of the plot.

179
00:09:19,370 --> 00:09:22,030
So most plots that
including the one that we're

180
00:09:22,030 --> 00:09:26,080
using for our example here, use
a simple Cartesian coordinate

181
00:09:26,080 --> 00:09:29,830
system but other plots
can use for example

182
00:09:29,830 --> 00:09:33,700
like a geographical coordinate
system or polar coordinate

183
00:09:33,700 --> 00:09:35,320
system in the case
of pie charts.

184
00:09:38,630 --> 00:09:43,240
So let's return to our flipper
and bill length visualization.

185
00:09:43,240 --> 00:09:45,190
And this time in addition
to the data points,

186
00:09:45,190 --> 00:09:47,800
I've added the smooth
conditional means

187
00:09:47,800 --> 00:09:49,850
for each species.

188
00:09:49,850 --> 00:09:51,940
Now let's say that we
want to zoom in this plot

189
00:09:51,940 --> 00:09:56,380
to highlight one species
and sort of focus

190
00:09:56,380 --> 00:10:00,650
our attention in on just one
of these areas of the plot.

191
00:10:00,650 --> 00:10:02,990
There are two ways that
we can accomplish this.

192
00:10:02,990 --> 00:10:06,110
One is by setting
limits on the scale.

193
00:10:06,110 --> 00:10:10,190
Here we're setting the x minimum
to 200 and the x maximum--

194
00:10:10,190 --> 00:10:12,950
we just let be whatever
it normally was.

195
00:10:12,950 --> 00:10:16,100
And then the other way that
we can zoom in this plot

196
00:10:16,100 --> 00:10:18,750
is by setting limits on
the coordinate system.

197
00:10:18,750 --> 00:10:23,240
Again, setting the x minimum
to 200 and letting the x

198
00:10:23,240 --> 00:10:26,550
max be whatever it is.

199
00:10:26,550 --> 00:10:31,740
When we limit the scale, this
is the plot that we end up with.

200
00:10:31,740 --> 00:10:34,710
But when we limit the
coordinate system,

201
00:10:34,710 --> 00:10:38,170
it actually looks
quite different.

202
00:10:38,170 --> 00:10:40,680
The data looks the same.

203
00:10:40,680 --> 00:10:43,050
The individual
points are the same

204
00:10:43,050 --> 00:10:46,950
but the statistical summary
looks drastically different

205
00:10:46,950 --> 00:10:51,390
and that is because when
we set the scale limits,

206
00:10:51,390 --> 00:10:54,510
any data that's
outside of those limits

207
00:10:54,510 --> 00:10:58,590
will by default be
converted to NAs.

208
00:10:58,590 --> 00:11:01,230
And that this scale
transformation

209
00:11:01,230 --> 00:11:03,810
happens before any
statistical summaries.

210
00:11:03,810 --> 00:11:08,820
So before we calculate what
those smooth lines and error

211
00:11:08,820 --> 00:11:14,360
bands look like that data has
already been converted to NAs.

212
00:11:14,360 --> 00:11:17,190
The coordinate system
on the other hand,

213
00:11:17,190 --> 00:11:20,510
when you set limits there, it
really just zooms in the plot.

214
00:11:20,510 --> 00:11:25,340
So all the other data that
was originally present

215
00:11:25,340 --> 00:11:28,550
is still getting
used, even though you

216
00:11:28,550 --> 00:11:31,660
can't see it on the plot.

217
00:11:31,660 --> 00:11:34,590
So in the first plot, where we
set the limits on the scale,

218
00:11:34,590 --> 00:11:37,530
statistical summaries look
different because they're

219
00:11:37,530 --> 00:11:39,780
based on just the
few data points that

220
00:11:39,780 --> 00:11:42,733
are visible for the
species in red and purple.

221
00:11:42,733 --> 00:11:44,150
In the second plot,
though you can

222
00:11:44,150 --> 00:11:47,330
imagine that all the rest
of the data is still there

223
00:11:47,330 --> 00:11:50,030
and it's still getting
used and those smooth lines

224
00:11:50,030 --> 00:11:54,520
are extending out towards,
where the rest of the data is.

225
00:11:54,520 --> 00:11:58,510
So this is clearly a case where
the different ways of setting

226
00:11:58,510 --> 00:12:01,660
these limits have
major implications

227
00:12:01,660 --> 00:12:04,150
for the statistical
summaries that we're actually

228
00:12:04,150 --> 00:12:07,180
displaying on the plot.

229
00:12:07,180 --> 00:12:09,490
And it's important to know this.

230
00:12:09,490 --> 00:12:12,910
So ggplot2 does
alert us to this fact

231
00:12:12,910 --> 00:12:16,870
and if we return to the code
that generated these plots,

232
00:12:16,870 --> 00:12:19,780
you can actually see that the
former version will warn you

233
00:12:19,780 --> 00:12:20,830
about what's going on.

234
00:12:20,830 --> 00:12:26,890
It says "removed the 192 rows
containing non-finite values".

235
00:12:26,890 --> 00:12:29,870
So we've gotten this
Warning message.

236
00:12:29,870 --> 00:12:34,960
But it is at times easy to
gloss over these messages

237
00:12:34,960 --> 00:12:35,720
or ignore them.

238
00:12:35,720 --> 00:12:39,530
And so it's useful to know how
scales and coordinates handle

239
00:12:39,530 --> 00:12:41,350
data, that's out of bounds.

240
00:12:41,350 --> 00:12:44,800
The last type of ggplot2 mishap
that I'm going to talk about

241
00:12:44,800 --> 00:12:48,460
are issues with
themes, theme threats.

242
00:12:48,460 --> 00:12:51,610
Now ggplot2 theme
system is not strictly

243
00:12:51,610 --> 00:12:55,000
part of the grammar of
graphics because it really

244
00:12:55,000 --> 00:12:58,540
controls all of the non-data
aspects of the plot,

245
00:12:58,540 --> 00:13:02,650
whereas the grammar mostly
deals with how we translate

246
00:13:02,650 --> 00:13:04,330
our data into visual form.

247
00:13:04,330 --> 00:13:06,100
But the theme system
is really important

248
00:13:06,100 --> 00:13:09,970
because it is how you customize
a plot to look exactly how you

249
00:13:09,970 --> 00:13:15,430
want it, all the way up from
the text font and the background

250
00:13:15,430 --> 00:13:19,270
color down to small details
like the length of the ticks

251
00:13:19,270 --> 00:13:22,700
on the axes for example.

252
00:13:22,700 --> 00:13:24,410
There are dozens
and dozens of things

253
00:13:24,410 --> 00:13:28,490
that you can customize
about plots in ggplot2

254
00:13:28,490 --> 00:13:30,350
but it would be really
cumbersome to have

255
00:13:30,350 --> 00:13:34,380
to specify every single one
of those every single time.

256
00:13:34,380 --> 00:13:38,060
So ggplot2 comes with
a set of default themes

257
00:13:38,060 --> 00:13:42,110
that are built in, that you
can use and a system for theme

258
00:13:42,110 --> 00:13:47,060
elements to inherit
their values and how

259
00:13:47,060 --> 00:13:50,273
they look from other
aspects of the theme.

260
00:13:50,273 --> 00:13:51,440
So let's look at an example.

261
00:13:54,070 --> 00:13:57,250
In our theme hierarchy
of different elements

262
00:13:57,250 --> 00:14:01,390
that you can customize text is
one that's way up at the top.

263
00:14:01,390 --> 00:14:05,030
In theory, this applies to all
the text elements of the plot.

264
00:14:05,030 --> 00:14:09,008
So if we look again
at our Penguin plot,

265
00:14:09,008 --> 00:14:11,050
this plot has a number of
different text elements

266
00:14:11,050 --> 00:14:16,810
it has title it has axis
titles and axis text.

267
00:14:16,810 --> 00:14:20,810
It has a legend, which has
some text on it as well.

268
00:14:20,810 --> 00:14:25,400
So all of these are within
the umbrella of text.

269
00:14:25,400 --> 00:14:27,580
If you wanted to,
for example, set

270
00:14:27,580 --> 00:14:31,340
the font of all the
text on this plot,

271
00:14:31,340 --> 00:14:33,610
you would want to do it
up at that text level,

272
00:14:33,610 --> 00:14:36,910
rather than having to say I
want the title to be this font

273
00:14:36,910 --> 00:14:41,030
and the axis labels to
be this font and so on.

274
00:14:41,030 --> 00:14:44,780
At the next level of the
hierarchy in this example,

275
00:14:44,780 --> 00:14:46,100
is axis.text.

276
00:14:46,100 --> 00:14:49,220
So we went from text
down to just the text

277
00:14:49,220 --> 00:14:51,680
that labels the axes.

278
00:14:51,680 --> 00:14:53,840
That's everything
that is outlined

279
00:14:53,840 --> 00:14:57,380
in blue on this slide,
all the axis.text elements

280
00:14:57,380 --> 00:15:02,000
and in this plot, we have axes
on the left, right and bottom.

281
00:15:05,220 --> 00:15:07,500
At the next level of
the theme hierarchy,

282
00:15:07,500 --> 00:15:10,980
there's axis.text.x
and axis.text.y.

283
00:15:10,980 --> 00:15:13,620
So this allows us
to, for example,

284
00:15:13,620 --> 00:15:17,790
customize the y-axis, while
leaving the x-axis alone

285
00:15:17,790 --> 00:15:19,850
and vice versa.

286
00:15:19,850 --> 00:15:22,520
And there's actually
one more level.

287
00:15:22,520 --> 00:15:28,280
axis.text.x.bottom, axis.text.x.top,
axis.text.y.left

288
00:15:28,280 --> 00:15:30,890
and axis.text.y.right.

289
00:15:30,890 --> 00:15:33,710
(Try saying that 10
times fast!) where

290
00:15:33,710 --> 00:15:38,330
we can customize axes
for potentially one

291
00:15:38,330 --> 00:15:40,890
side of the plot
but not the other.

292
00:15:40,890 --> 00:15:44,840
So these axes can be on the
bottom or the top or the left

293
00:15:44,840 --> 00:15:47,150
and the right or some
combination thereof

294
00:15:47,150 --> 00:15:49,400
and you might want to have
really fine-grained control

295
00:15:49,400 --> 00:15:52,970
over exactly which
customizations you're making.

296
00:15:52,970 --> 00:15:55,650
So this level allows
us to do that.

297
00:15:55,650 --> 00:15:57,390
So let's return to our plot.

298
00:15:57,390 --> 00:16:01,530
So again, we're looking at
these penguin measurements.

299
00:16:01,530 --> 00:16:04,130
And this time, I've
added a second axis

300
00:16:04,130 --> 00:16:07,370
on the right hand side of the
plot, that just duplicates

301
00:16:07,370 --> 00:16:09,840
the axis on the left hand side.

302
00:16:09,840 --> 00:16:11,910
So they're exactly the same.

303
00:16:11,910 --> 00:16:15,860
And now let's say that we
wanted to customize the labels

304
00:16:15,860 --> 00:16:19,620
on our two y axes.

305
00:16:19,620 --> 00:16:24,390
So that they're maybe rotated
90 degrees and right justified.

306
00:16:24,390 --> 00:16:26,180
So we might write
something like this

307
00:16:26,180 --> 00:16:28,430
to customize both
of these axes, where

308
00:16:28,430 --> 00:16:34,410
we're setting axis.text.y
to angle equals 90,

309
00:16:34,410 --> 00:16:37,940
hjust (horizontal
justification) equals 1

310
00:16:37,940 --> 00:16:40,670
and since we want to apply
this to both of our y axes,

311
00:16:40,670 --> 00:16:45,260
this seems like the
logical way to do it.

312
00:16:45,260 --> 00:16:49,180
But when we look at the plot
something is not quite right.

313
00:16:49,180 --> 00:16:54,550
The rotation has taken effect
but the justification has not.

314
00:16:54,550 --> 00:16:57,760
So only on the
left hand side are

315
00:16:57,760 --> 00:17:01,060
axis labels right justified.

316
00:17:01,060 --> 00:17:04,369
On the right hand
side they don't match.

317
00:17:04,369 --> 00:17:07,910
So why would one
of these changes

318
00:17:07,910 --> 00:17:10,609
take effect but
not the other one?

319
00:17:10,609 --> 00:17:13,099
And the reason for this has
to do with the base theme

320
00:17:13,099 --> 00:17:14,310
that I'm using.

321
00:17:14,310 --> 00:17:16,069
So I built the theme
for these plots

322
00:17:16,069 --> 00:17:20,270
on the default ggplot2
theme, theme_grey.

323
00:17:20,270 --> 00:17:24,463
And if we printed out the whole
theme, it would be super long.

324
00:17:24,463 --> 00:17:26,130
So we're not going
to look at all of it.

325
00:17:26,130 --> 00:17:29,270
But I've just put on the
slide the parts of it

326
00:17:29,270 --> 00:17:32,210
that have to do with axis text.

327
00:17:32,210 --> 00:17:35,470
You can see that theme_grey
sets the margins

328
00:17:35,470 --> 00:17:38,650
and the justification
of axis.text.y

329
00:17:38,650 --> 00:17:42,820
and then it actually
adjusts those details

330
00:17:42,820 --> 00:17:45,730
for axis.text.y.right

331
00:17:45,730 --> 00:17:49,000
And in particular theme_grey
is setting the justification

332
00:17:49,000 --> 00:17:54,700
of text in axis.text.y.right
to zero, corresponding

333
00:17:54,700 --> 00:17:59,180
to a left justified text.

334
00:17:59,180 --> 00:18:01,130
This brings us to
the crucial piece

335
00:18:01,130 --> 00:18:03,110
of the theme system,
which is that when

336
00:18:03,110 --> 00:18:05,360
you're customizing
theme elements,

337
00:18:05,360 --> 00:18:07,920
the most specific element wins.

338
00:18:07,920 --> 00:18:11,390
If the theme that you're
using sets a specific element

339
00:18:11,390 --> 00:18:15,140
like the justification
of axis.text.y.right,

340
00:18:15,140 --> 00:18:17,000
then if you want
to change it, you

341
00:18:17,000 --> 00:18:19,250
need to edit that very
specific element and not

342
00:18:19,250 --> 00:18:20,760
any of the ones above it.

343
00:18:20,760 --> 00:18:24,380
So in our case theme_grey
sets the justification but not

344
00:18:24,380 --> 00:18:27,920
the angle of axis.text.y.right.

345
00:18:27,920 --> 00:18:32,090
So when we change axis.text.y,
the justification

346
00:18:32,090 --> 00:18:35,360
that we provided gets
overwritten by the theme

347
00:18:35,360 --> 00:18:37,160
that we're using.

348
00:18:37,160 --> 00:18:39,370
This is something that has
thrown off so many people.

349
00:18:39,370 --> 00:18:40,480
It's thrown off me.

350
00:18:40,480 --> 00:18:43,720
It's thrown off other
contributors to ggplot.

351
00:18:43,720 --> 00:18:45,790
It comes up all of
the time because it

352
00:18:45,790 --> 00:18:47,830
is a subtle and
slightly confusing

353
00:18:47,830 --> 00:18:51,735
aspect of how this
theme inheritance works.

354
00:18:51,735 --> 00:18:53,110
But when you think
about the fact

355
00:18:53,110 --> 00:18:55,840
that it's working by
specificity and not

356
00:18:55,840 --> 00:19:01,250
by the order in
which you provide

357
00:19:01,250 --> 00:19:03,790
customizations to the theme.

358
00:19:03,790 --> 00:19:05,810
It does make sense.

359
00:19:05,810 --> 00:19:07,960
So to get a working
plot, we would

360
00:19:07,960 --> 00:19:11,780
need to edit axis.text.y.right
like this.

361
00:19:11,780 --> 00:19:14,980
So instead of setting our
customizations to the axis.text.y

362
00:19:14,980 --> 00:19:19,300
element, where they'll
be overwritten by the theme

363
00:19:19,300 --> 00:19:20,890
that we're using.

364
00:19:20,890 --> 00:19:24,970
We customize axis.text.y.left
and axis.text.y.right

365
00:19:24,970 --> 00:19:28,450
and that makes sure that our
customizations get applied

366
00:19:28,450 --> 00:19:31,180
the way we want them to.

367
00:19:31,180 --> 00:19:34,960
And now everything
looks good on the plot.

368
00:19:34,960 --> 00:19:38,017
These two axes are
looking exactly the same

369
00:19:38,017 --> 00:19:39,100
on the left and the right.

370
00:19:41,950 --> 00:19:45,180
So let's recap the ggplot2
mishaps we've talked about.

371
00:19:45,180 --> 00:19:48,240
We have mapping mishaps,
where we accidentally

372
00:19:48,240 --> 00:19:51,090
map the data to a single
visual element over,

373
00:19:51,090 --> 00:19:53,220
and over, and over again.

374
00:19:53,220 --> 00:19:55,980
We have scale snafus,
which is where

375
00:19:55,980 --> 00:19:57,660
we have two different
ways of setting

376
00:19:57,660 --> 00:20:01,450
the boundaries of a plot, where
one of them discards data.

377
00:20:01,450 --> 00:20:02,890
One of them does not.

378
00:20:02,890 --> 00:20:04,860
And this can affect the
statistical summaries

379
00:20:04,860 --> 00:20:06,750
that are shown on the plot.

380
00:20:06,750 --> 00:20:08,610
And we have theme
threats, where we

381
00:20:08,610 --> 00:20:12,690
try to customize the plot at
a higher level of the theme

382
00:20:12,690 --> 00:20:16,080
hierarchy that then gets
overridden by a more

383
00:20:16,080 --> 00:20:18,630
specific theme customization.

384
00:20:18,630 --> 00:20:21,270
We haven't gotten into all of
the components of the grammar.

385
00:20:21,270 --> 00:20:25,615
We haven't talked about stats,
geoms, position adjustments

386
00:20:25,615 --> 00:20:27,240
and that much detail,
but if you really

387
00:20:27,240 --> 00:20:31,020
want to get deep into the
understanding of how ggplot2

388
00:20:31,020 --> 00:20:33,900
works and all of the
parts of the grammar

389
00:20:33,900 --> 00:20:36,240
that we haven't covered,
you should definitely

390
00:20:36,240 --> 00:20:38,430
check out the ggplot2 book.

391
00:20:38,430 --> 00:20:40,530
There's a chapter in
there specifically,

392
00:20:40,530 --> 00:20:42,810
about mastering the
grammar and it will really

393
00:20:42,810 --> 00:20:45,360
help you build the
solid foundation

394
00:20:45,360 --> 00:20:47,520
for understanding all of
these different components

395
00:20:47,520 --> 00:20:48,020
of ggplot2.

396
00:20:50,630 --> 00:20:53,960
So I want to leave you with one
last piece of accidental aRt.

397
00:20:53,960 --> 00:20:56,150
It's one of my
favorite patterns that

398
00:20:56,150 --> 00:20:59,090
comes up over and over again
on the accidental aRt Twitter

399
00:20:59,090 --> 00:21:00,080
page.

400
00:21:00,080 --> 00:21:02,960
This sort of weird
geometric pattern

401
00:21:02,960 --> 00:21:05,160
that you often see in maps.

402
00:21:05,160 --> 00:21:07,100
So here we're taking
data on states,

403
00:21:07,100 --> 00:21:11,010
trying to plot it on a map but
it's gotten totally messed up.

404
00:21:11,010 --> 00:21:13,200
So if you don't know
what's causing this error.

405
00:21:13,200 --> 00:21:15,720
See if you can find
out a fix to it

406
00:21:15,720 --> 00:21:18,740
and then think about whether
that fix tells you anything

407
00:21:18,740 --> 00:21:22,290
about how ggplot2 works.

408
00:21:22,290 --> 00:21:26,820
For the purposes of this slide,
I've not included the full code

409
00:21:26,820 --> 00:21:29,230
on the display.

410
00:21:29,230 --> 00:21:33,330
But if you want to see the
full code for this plot

411
00:21:33,330 --> 00:21:36,390
as well as all of the
other visualizations

412
00:21:36,390 --> 00:21:40,570
that were included in this
talk, have a look at this URL

413
00:21:40,570 --> 00:21:42,780
and thank you so
much for tuning in.

414
00:21:42,780 --> 00:21:45,450
Good luck with your
future ggplots and I

415
00:21:45,450 --> 00:21:48,140
hope that you have
enjoyed the talk.
