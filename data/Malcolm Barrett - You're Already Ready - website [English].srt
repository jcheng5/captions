1
00:00:05,428 --> 00:00:07,220
MALCOLM BARRET: My name
is Malcolm Barrett.

2
00:00:07,220 --> 00:00:10,330
I'm a clinical research data
scientist at Teladoc Health.

3
00:00:10,330 --> 00:00:13,600
I'm an epidemiologist, and
I'm also an R developer.

4
00:00:13,600 --> 00:00:15,640
I use R packages
every day in my work,

5
00:00:15,640 --> 00:00:18,540
and I'm also fundamental to the
way that I organize my code.

6
00:00:18,540 --> 00:00:20,980
And the reason for
that is that R packages

7
00:00:20,980 --> 00:00:25,540
are the fundamental unit
of shareable code in R.

8
00:00:25,540 --> 00:00:27,700
They solve many of
our problems for us.

9
00:00:27,700 --> 00:00:31,870
They make our code more robust,
easier to share, and much safer

10
00:00:31,870 --> 00:00:33,110
over time.

11
00:00:33,110 --> 00:00:35,680
Whether that's somebody
that's using it in the future

12
00:00:35,680 --> 00:00:39,670
that we've shared it with, or
it's just us in six months.

13
00:00:39,670 --> 00:00:42,640
Our code is less likely to
break in that time because

14
00:00:42,640 --> 00:00:45,760
of the robustness of R packages.

15
00:00:45,760 --> 00:00:47,350
And yet many people,
when they come

16
00:00:47,350 --> 00:00:49,510
to the idea of writing
R package, they think,

17
00:00:49,510 --> 00:00:51,130
this is too advanced for me.

18
00:00:51,130 --> 00:00:52,570
This is beyond my scope.

19
00:00:52,570 --> 00:00:54,610
This is beyond my skill set.

20
00:00:54,610 --> 00:00:57,310
Many people also think that they
don't have something to offer.

21
00:00:57,310 --> 00:00:59,310
They think that if they're
not writing something

22
00:00:59,310 --> 00:01:03,370
like ggplot2 or dplyr, something
that's really incredible.

23
00:01:03,370 --> 00:01:07,880
Then they don't have anything
to offer, anything to share.

24
00:01:07,880 --> 00:01:10,880
I'd like to tell you a story
that comes from Buddhism.

25
00:01:10,880 --> 00:01:13,490
Once, there was a
father and a son.

26
00:01:13,490 --> 00:01:16,460
And at some point, the father
and the son got separated.

27
00:01:16,460 --> 00:01:19,670
Here their lives
diverged dramatically.

28
00:01:19,670 --> 00:01:21,920
The father became quite wealthy.

29
00:01:21,920 --> 00:01:24,440
He developed a huge
estate and amassed

30
00:01:24,440 --> 00:01:26,580
a great amount of riches.

31
00:01:26,580 --> 00:01:30,110
The son, on the other hand,
became absolutely destitute.

32
00:01:30,110 --> 00:01:34,320
He was embodying poverty.

33
00:01:34,320 --> 00:01:37,230
Later on in their
lives, the son actually

34
00:01:37,230 --> 00:01:40,440
stumbled upon the
father's estate.

35
00:01:40,440 --> 00:01:42,330
Now the son didn't
recognize the father.

36
00:01:42,330 --> 00:01:44,340
The father had changed
so much in his riches

37
00:01:44,340 --> 00:01:47,040
that he was unrecognizable,
but the father,

38
00:01:47,040 --> 00:01:49,140
even though his son
was trapped in poverty,

39
00:01:49,140 --> 00:01:51,180
recognized the son immediately.

40
00:01:51,180 --> 00:01:54,240
He tried to bring him into
the house to say, Look, look.

41
00:01:54,240 --> 00:01:56,100
You can have all of this.

42
00:01:56,100 --> 00:01:58,290
And the son thought
he was crazy.

43
00:01:58,290 --> 00:01:59,580
He tried to run of the house.

44
00:01:59,580 --> 00:02:00,900
He thought, This guy is nuts.

45
00:02:00,900 --> 00:02:03,130
I don't want anything
to do with this.

46
00:02:03,130 --> 00:02:06,720
So the father sent his
servants to go after the son

47
00:02:06,720 --> 00:02:11,800
and hire him instead as
an employee of the estate.

48
00:02:11,800 --> 00:02:14,680
The son worked his way
up from the very bottom

49
00:02:14,680 --> 00:02:17,830
until many years later to
the very top of the estate.

50
00:02:17,830 --> 00:02:23,340
At this point, he's the
right-hand man of his father.

51
00:02:23,340 --> 00:02:25,860
On his deathbed,
the father finally

52
00:02:25,860 --> 00:02:28,440
reveals to the son who he is.

53
00:02:28,440 --> 00:02:33,480
That in fact, everything that's
around him is already his.

54
00:02:33,480 --> 00:02:36,030
And in some versions of
the story, at this point,

55
00:02:36,030 --> 00:02:40,200
the son says that he actually
has already understood that.

56
00:02:40,200 --> 00:02:42,450
He has naturally
come to understand

57
00:02:42,450 --> 00:02:46,560
that what surrounds him is
his wealth, his treasure.

58
00:02:46,560 --> 00:02:53,330
Something that is of himself.

59
00:02:53,330 --> 00:02:55,960
This is a talk about
why you already

60
00:02:55,960 --> 00:02:58,180
have the skill set
from the techniques

61
00:02:58,180 --> 00:03:00,910
that you use every day
in your data analysis

62
00:03:00,910 --> 00:03:05,960
to pursue the path of
R package development.

63
00:03:05,960 --> 00:03:09,740
In a Zen text called the
Sandokai, there's a saying,

64
00:03:09,740 --> 00:03:11,750
if you do not see
the way, you do not

65
00:03:11,750 --> 00:03:14,840
see it even as you walk on it.

66
00:03:14,840 --> 00:03:16,700
This is to say
that we're actually

67
00:03:16,700 --> 00:03:20,750
always already perfect and
complete, already ready.

68
00:03:20,750 --> 00:03:23,660
So in R we might say, if
you don't see the R package,

69
00:03:23,660 --> 00:03:26,880
you do not see it even
as you develop it.

70
00:03:26,880 --> 00:03:30,850
For instance, you already
structure your project.

71
00:03:30,850 --> 00:03:32,970
Now an R package has a
very specific structure

72
00:03:32,970 --> 00:03:34,920
that it uses, and yours
might look something

73
00:03:34,920 --> 00:03:36,940
like this-- your project.

74
00:03:36,940 --> 00:03:39,870
I've got a data folder, a
reports folder, a scripts

75
00:03:39,870 --> 00:03:42,780
folder, and analysis folder.

76
00:03:42,780 --> 00:03:46,050
Now an R packages specifically
uses a folder called R,

77
00:03:46,050 --> 00:03:51,860
with a capital R. And also uses
a data folder just as it is.

78
00:03:51,860 --> 00:03:55,720
Instead of a report, we might
have a vignette, a long form

79
00:03:55,720 --> 00:03:59,170
documentation as well as
a number of other files

80
00:03:59,170 --> 00:04:02,200
that are formal, but help us
do things that we actually

81
00:04:02,200 --> 00:04:04,000
often do in our analysis.

82
00:04:04,000 --> 00:04:07,703
Describe it, test it,
and provide information

83
00:04:07,703 --> 00:04:08,495
about how it works.

84
00:04:11,430 --> 00:04:13,290
The use of this
package is really

85
00:04:13,290 --> 00:04:16,140
useful in connecting the
abilities that we already have

86
00:04:16,140 --> 00:04:20,550
that we use in our work to
this formalized structure

87
00:04:20,550 --> 00:04:22,435
of using in R package.

88
00:04:22,435 --> 00:04:24,810
So as you might imagine, one
of the most useful functions

89
00:04:24,810 --> 00:04:26,160
that this project--

90
00:04:26,160 --> 00:04:29,520
this package has is to create
a package using the Create

91
00:04:29,520 --> 00:04:30,880
Package function.

92
00:04:30,880 --> 00:04:34,830
So here I'm creating a package
called zenartrpkgs.

93
00:04:34,830 --> 00:04:37,110
And it's laying out
all this infrastructure

94
00:04:37,110 --> 00:04:40,740
that I need to use in R package,
and it's doing it all for me

95
00:04:40,740 --> 00:04:41,850
automatically.

96
00:04:41,850 --> 00:04:45,540
It's also communicating to me
very concretely, very simply

97
00:04:45,540 --> 00:04:51,020
what it's actually doing,
and if I need to do anything.

98
00:04:51,020 --> 00:04:53,110
One of the most important
files that it creates

99
00:04:53,110 --> 00:04:56,100
is the description file.

100
00:04:56,100 --> 00:04:58,110
The description file
is going to tell you

101
00:04:58,110 --> 00:05:00,450
what the package does,
what it's called,

102
00:05:00,450 --> 00:05:04,830
who wrote it, who contributed
to it, what the license is.

103
00:05:04,830 --> 00:05:07,800
And it might tell you some more
about dependencies and more

104
00:05:07,800 --> 00:05:10,090
along those lines.

105
00:05:10,090 --> 00:05:11,950
It's also a really
amazing file because it's

106
00:05:11,950 --> 00:05:13,480
sort of a golden ticket.

107
00:05:13,480 --> 00:05:16,960
It gives you access to many
of the really excellent tools

108
00:05:16,960 --> 00:05:19,810
in our ecosystem for
developing R packages.

109
00:05:19,810 --> 00:05:23,310
Tools like usethis and devtools.

110
00:05:23,310 --> 00:05:28,980
For instance, usethis also has a
function called Create Project.

111
00:05:28,980 --> 00:05:31,620
And while this uses a
formalized structure,

112
00:05:31,620 --> 00:05:35,790
it's much, much simpler
compared to an R package.

113
00:05:35,790 --> 00:05:37,930
It does create in
Rstudio project,

114
00:05:37,930 --> 00:05:40,860
but it doesn't have a lot of
this other top level stuff that

115
00:05:40,860 --> 00:05:42,480
organizes in R package.

116
00:05:42,480 --> 00:05:45,630
Notably it doesn't have
a description file,

117
00:05:45,630 --> 00:05:48,900
but we can add one to it
using use description.

118
00:05:48,900 --> 00:05:50,610
And what happens when
I add a description

119
00:05:50,610 --> 00:05:53,580
file to a project that
actually isn't a package,

120
00:05:53,580 --> 00:05:56,617
usethis still treats it
as if it is a package.

121
00:05:56,617 --> 00:05:58,950
And so that means that we can
tap into some of the tools

122
00:05:58,950 --> 00:06:01,410
that we're going to talk
about, about writing tests,

123
00:06:01,410 --> 00:06:03,535
and other tools that we're
not going to talk about,

124
00:06:03,535 --> 00:06:07,680
like writing documentation,
quite easily because usethis

125
00:06:07,680 --> 00:06:11,245
and devtools will actually
treat your project as if it's

126
00:06:11,245 --> 00:06:11,745
a package.

127
00:06:14,540 --> 00:06:17,752
You also already write R code.

128
00:06:17,752 --> 00:06:19,710
Now your R code might
look something like this.

129
00:06:19,710 --> 00:06:21,650
Here I'm taking iris,
I'm grouping it,

130
00:06:21,650 --> 00:06:23,060
and I'm summarizing it.

131
00:06:23,060 --> 00:06:24,920
And it's resulting
in a data frame.

132
00:06:24,920 --> 00:06:28,570
This is something that I
do every day in my work.

133
00:06:28,570 --> 00:06:31,780
And if I use usethis, I
can put it, this code,

134
00:06:31,780 --> 00:06:34,990
in a formal place using use
R. This will create an R

135
00:06:34,990 --> 00:06:37,180
folder for me if it
doesn't exist already,

136
00:06:37,180 --> 00:06:38,740
and put my code into it.

137
00:06:38,740 --> 00:06:42,820
As well as open up this file
for me to write code in.

138
00:06:42,820 --> 00:06:45,430
Instead of just writing
my code plainly,

139
00:06:45,430 --> 00:06:47,840
I'm actually going to
wrap it in a function.

140
00:06:47,840 --> 00:06:50,930
Functions being what you would
expect an R package to export.

141
00:06:50,930 --> 00:06:52,660
So here I'm creating
summarize iris,

142
00:06:52,660 --> 00:06:56,680
and I'm putting it in the
file that I just opened.

143
00:06:56,680 --> 00:06:59,830
Now one of the things that's
really great about having

144
00:06:59,830 --> 00:07:02,650
a package or a project with
a description file in it

145
00:07:02,650 --> 00:07:05,470
is tapping into the
devtools ecosystem.

146
00:07:05,470 --> 00:07:07,930
Devtools has this
function called load_all

147
00:07:07,930 --> 00:07:09,730
that has a key binding
in RStudio that

148
00:07:09,730 --> 00:07:11,060
makes it a little bit easier.

149
00:07:11,060 --> 00:07:13,450
And what it does is it
looks in that R folder,

150
00:07:13,450 --> 00:07:15,610
and it's going to load
the functions that

151
00:07:15,610 --> 00:07:18,580
are in your package or your
project into your session

152
00:07:18,580 --> 00:07:20,980
as if you had sourced that--

153
00:07:20,980 --> 00:07:24,130
as if you had sourced
it in R code script.

154
00:07:24,130 --> 00:07:27,285
And so now I have summarized
iris available to me,

155
00:07:27,285 --> 00:07:29,410
and I can run it in my
council or in another script

156
00:07:29,410 --> 00:07:30,130
quite easily.

157
00:07:33,750 --> 00:07:37,010
You may not realize it, but
you also already declare

158
00:07:37,010 --> 00:07:39,180
your dependencies.

159
00:07:39,180 --> 00:07:40,830
For instance, if I
have code like this,

160
00:07:40,830 --> 00:07:43,930
it often begins with a
series of library calls.

161
00:07:43,930 --> 00:07:47,850
And really what I'm saying
is for this code to work,

162
00:07:47,850 --> 00:07:52,140
I need the dplyr library and
I need the ggplot2 library.

163
00:07:52,140 --> 00:07:57,130
Otherwise, this function is
not going to run correctly.

164
00:07:57,130 --> 00:07:59,650
In a package, we can
declare dependency

165
00:07:59,650 --> 00:08:01,700
by using the use
package function.

166
00:08:01,700 --> 00:08:04,870
So here I'm saying,
use package dplyr

167
00:08:04,870 --> 00:08:07,012
use this is adding it
to the description file.

168
00:08:07,012 --> 00:08:09,220
And then it's telling me
that I have something to do.

169
00:08:09,220 --> 00:08:11,830
Whenever I use a function
from this package,

170
00:08:11,830 --> 00:08:15,160
I need to preface it
with dplyr colon-colon (::).

171
00:08:15,160 --> 00:08:19,210
I need to really
specify which namespace

172
00:08:19,210 --> 00:08:21,830
this function is coming from.

173
00:08:21,830 --> 00:08:23,680
And then I'll also do
the same for ggplot2

174
00:08:23,680 --> 00:08:28,670
because, of course, my code
also depends on this package.

175
00:08:28,670 --> 00:08:30,740
So now when I have
my function, I

176
00:08:30,740 --> 00:08:34,130
need to include the
names of these packages

177
00:08:34,130 --> 00:08:35,940
as well as the double colon.

178
00:08:35,940 --> 00:08:38,570
So this function ends up looking
a little bit more like this

179
00:08:38,570 --> 00:08:40,970
when adding dplyr
colon, colon, and then

180
00:08:40,970 --> 00:08:43,070
the name of the function
that comes from dplyr.

181
00:08:43,070 --> 00:08:44,540
And the same for ggplot2.

182
00:08:47,160 --> 00:08:50,430
What also is changing
is my description file.

183
00:08:50,430 --> 00:08:54,000
What previously looked like
this, now has two extra lines.

184
00:08:54,000 --> 00:08:59,000
dplyr and ggplot are part
of the import section.

185
00:08:59,000 --> 00:09:00,920
And this is where
that magic happens

186
00:09:00,920 --> 00:09:03,130
when you install an R package.

187
00:09:03,130 --> 00:09:05,360
You'll notice that when
you install an R package,

188
00:09:05,360 --> 00:09:08,150
you don't have to manually go
and install every other package

189
00:09:08,150 --> 00:09:09,650
that package uses.

190
00:09:09,650 --> 00:09:12,470
R is smart enough
to look at this file

191
00:09:12,470 --> 00:09:15,260
and install those
packages for you.

192
00:09:15,260 --> 00:09:16,790
And so that's
exactly what happens

193
00:09:16,790 --> 00:09:19,130
when you install a package
from CRAN, or from GitHub,

194
00:09:19,130 --> 00:09:20,690
or from another source.

195
00:09:20,690 --> 00:09:22,640
R will actually go and
look for these packages

196
00:09:22,640 --> 00:09:25,100
and install them for you.

197
00:09:25,100 --> 00:09:28,160
You can also use devtools
to install them manually

198
00:09:28,160 --> 00:09:32,180
using the install devs function,
which is extremely useful.

199
00:09:35,200 --> 00:09:38,020
Now you may not realize
this part in particular,

200
00:09:38,020 --> 00:09:40,510
but you also already
test your code.

201
00:09:40,510 --> 00:09:43,120
This might be one where you're
thinking, Wait a minute.

202
00:09:43,120 --> 00:09:45,730
I don't really even know
what testing your code means.

203
00:09:45,730 --> 00:09:47,090
I'm not a software engineer.

204
00:09:47,090 --> 00:09:50,095
I don't write unit tests
when I do my analysis.

205
00:09:50,095 --> 00:09:52,030
I don't test my code.

206
00:09:52,030 --> 00:09:54,850
But actually we test
our code every day.

207
00:09:54,850 --> 00:09:57,310
Often in a situation
like this, I've

208
00:09:57,310 --> 00:09:59,170
got this function clean data.

209
00:09:59,170 --> 00:10:02,030
And I'm giving it
the iris data set.

210
00:10:02,030 --> 00:10:04,460
And something obviously
has gone wrong here.

211
00:10:04,460 --> 00:10:06,860
It's giving me an
error, and I don't quite

212
00:10:06,860 --> 00:10:08,190
know what the problem is.

213
00:10:08,190 --> 00:10:09,980
So I actually need to
sit around and think

214
00:10:09,980 --> 00:10:11,250
about it a little bit.

215
00:10:11,250 --> 00:10:13,620
Usually at this point,
I start fiddling around

216
00:10:13,620 --> 00:10:17,430
in my counsel to see if I
can actually make it work.

217
00:10:17,430 --> 00:10:20,930
I will give it a different data
set, or change a few things,

218
00:10:20,930 --> 00:10:23,450
or look at my code, and
really try to understand

219
00:10:23,450 --> 00:10:24,800
why isn't this working?

220
00:10:24,800 --> 00:10:26,300
So I go back and
forth, and I really

221
00:10:26,300 --> 00:10:28,790
iterate through this process
to try and get it working.

222
00:10:28,790 --> 00:10:31,490
And it turns out in this
case, if for some reason

223
00:10:31,490 --> 00:10:34,280
I removed the fifth
column, it actually works.

224
00:10:34,280 --> 00:10:36,050
My data is now clean.

225
00:10:36,050 --> 00:10:39,380
But that just makes me
think more, why is that?

226
00:10:39,380 --> 00:10:42,200
And so I'm going to again go
through that iterative process

227
00:10:42,200 --> 00:10:44,390
of figuring out, what's
wrong with my code?

228
00:10:44,390 --> 00:10:46,100
How can I get it to work?

229
00:10:46,100 --> 00:10:47,690
What do I expect
it to look like,

230
00:10:47,690 --> 00:10:50,490
and what does it
look like right now?

231
00:10:50,490 --> 00:10:54,920
What you're doing is doing
a unit test of your code.

232
00:10:54,920 --> 00:10:57,560
You just aren't writing it down.

233
00:10:57,560 --> 00:10:59,990
And so the process
of writing unit tests

234
00:10:59,990 --> 00:11:02,840
is to formalize this
iterative process

235
00:11:02,840 --> 00:11:05,390
of kicking the tire of our
code to making sure that it

236
00:11:05,390 --> 00:11:07,280
works the way that we expect.

237
00:11:07,280 --> 00:11:08,840
Now unfortunately,
often the way we

238
00:11:08,840 --> 00:11:11,390
do this analysis
is when it breaks.

239
00:11:11,390 --> 00:11:15,410
But writing unit tests helps
you write code more robustly

240
00:11:15,410 --> 00:11:18,170
because it helps you kick
the tires all around the car.

241
00:11:18,170 --> 00:11:19,940
Not just in the tire
that has a leak.

242
00:11:22,910 --> 00:11:25,270
The used test
function will help you

243
00:11:25,270 --> 00:11:29,500
create a test in the right spot,
set up all the infrastructure

244
00:11:29,500 --> 00:11:31,750
that you need from the
test of that package, which

245
00:11:31,750 --> 00:11:35,493
is one of the most popular
testing libraries in R.

246
00:11:35,493 --> 00:11:36,910
Put everything in
its right place,

247
00:11:36,910 --> 00:11:39,430
open up for this file
for you, and set it

248
00:11:39,430 --> 00:11:41,320
up so that you can
automate your tests.

249
00:11:41,320 --> 00:11:44,800
So if I go in I write the
informal test that I just

250
00:11:44,800 --> 00:11:48,760
did in the command line
directly in a test script,

251
00:11:48,760 --> 00:11:52,780
I can now run the test
function from devtools, also

252
00:11:52,780 --> 00:11:56,320
which has a very convenient
key binding in RStudio.

253
00:11:56,320 --> 00:11:59,410
It will load the package for me,
and it will run all my tests.

254
00:11:59,410 --> 00:12:02,380
And now I can know if I
make a change to my code

255
00:12:02,380 --> 00:12:04,060
that everything is still OK.

256
00:12:04,060 --> 00:12:05,860
I've got a green light still.

257
00:12:05,860 --> 00:12:08,650
Or importantly, if I
don't I know what's wrong

258
00:12:08,650 --> 00:12:11,590
and where it comes from.

259
00:12:11,590 --> 00:12:16,060
There are great many ways
that you can use the R package

260
00:12:16,060 --> 00:12:20,930
system to extend what you
already do in your analysis.

261
00:12:20,930 --> 00:12:23,260
But these are three
really useful techniques

262
00:12:23,260 --> 00:12:26,110
that you can really get
off the ground with.

263
00:12:26,110 --> 00:12:28,780
The first is using
a description file.

264
00:12:28,780 --> 00:12:32,080
This lets you provide
metadata about your project

265
00:12:32,080 --> 00:12:33,010
or your package.

266
00:12:33,010 --> 00:12:35,440
It lets you tell us what
your dependencies are,

267
00:12:35,440 --> 00:12:38,860
and it gives you access
to this whole ecosystem,

268
00:12:38,860 --> 00:12:42,040
such as loading and testing
that is available to you

269
00:12:42,040 --> 00:12:45,370
when you're developing
an R package.

270
00:12:45,370 --> 00:12:47,840
Write your code as functions.

271
00:12:47,840 --> 00:12:50,540
You're already using functions
in your every day work.

272
00:12:50,540 --> 00:12:52,610
So this step is to
actually take that,

273
00:12:52,610 --> 00:12:56,370
wrap it in your own function.

274
00:12:56,370 --> 00:12:58,010
And finally, write
down the tests

275
00:12:58,010 --> 00:13:01,375
that you're actually already
doing, and then automate them.

276
00:13:01,375 --> 00:13:02,750
Take advantage of
the description

277
00:13:02,750 --> 00:13:06,530
file of this ecosystem
for R packages,

278
00:13:06,530 --> 00:13:09,300
and automate this process.

279
00:13:09,300 --> 00:13:12,510
What would be the next step
in coming home to R packages?

280
00:13:12,510 --> 00:13:17,280
Taking advantage of this
treasure that's already yours.

281
00:13:17,280 --> 00:13:19,620
We put together a workshop
called my organizations

282
00:13:19,620 --> 00:13:21,360
for R package that's
really focused

283
00:13:21,360 --> 00:13:24,390
on developing internal
R packages, personal R

284
00:13:24,390 --> 00:13:28,650
packages, things for you, your
team, your research group,

285
00:13:28,650 --> 00:13:30,280
things like that.

286
00:13:30,280 --> 00:13:32,400
So I recommend checking
out this resource.

287
00:13:32,400 --> 00:13:34,530
And I also highly,
highly recommend

288
00:13:34,530 --> 00:13:37,530
looking into the second
edition of the R packages book.

289
00:13:37,530 --> 00:13:39,480
In particular,
the first chapter,

290
00:13:39,480 --> 00:13:40,980
which is called
whole game walks you

291
00:13:40,980 --> 00:13:43,583
through the whole process of
creating R package from A to Z.

292
00:13:43,583 --> 00:13:45,750
And it's great, and will
help you get off the ground

293
00:13:45,750 --> 00:13:48,610
right away.

294
00:13:48,610 --> 00:13:51,630
So this is my invitation to you.

295
00:13:51,630 --> 00:13:55,260
Write an R package, whether
it's for your own personal use

296
00:13:55,260 --> 00:13:57,780
that you'll never share
with anybody else, perhaps

297
00:13:57,780 --> 00:14:01,500
for your team, perhaps changing
a project into a package,

298
00:14:01,500 --> 00:14:04,292
or creating a package
to help with a project.

299
00:14:04,292 --> 00:14:06,000
Or maybe you've got
a great idea that you

300
00:14:06,000 --> 00:14:07,740
want to develop
out into a package

301
00:14:07,740 --> 00:14:10,073
that you're actually going
to share with lots of people,

302
00:14:10,073 --> 00:14:12,060
and maybe even submit to CRAN.

303
00:14:12,060 --> 00:14:15,240
This is my invitation to
you, is to try this out, walk

304
00:14:15,240 --> 00:14:19,920
this path, and take advantage of
this incredible resource that's

305
00:14:19,920 --> 00:14:22,360
already available to you with
a skill set that you already

306
00:14:22,360 --> 00:14:22,860
have.

307
00:14:25,370 --> 00:14:28,220
Chögyam Trungpa, a
Tibetan Buddhist teacher

308
00:14:28,220 --> 00:14:32,870
had good news and bad news for
us in our meditation practice.

309
00:14:32,870 --> 00:14:36,170
The first, the bad news
is that you're falling out

310
00:14:36,170 --> 00:14:38,840
of an airplane, you don't
have anything to hang onto,

311
00:14:38,840 --> 00:14:42,830
you don't have a parachute,
and things seem pretty bad.

312
00:14:42,830 --> 00:14:47,508
But the good news is
actually there's no ground.

313
00:14:47,508 --> 00:14:49,550
There's no way that you
can fail at this process.

314
00:14:52,450 --> 00:14:53,730
My name is Malcolm Barrett.

315
00:14:53,730 --> 00:14:57,280
You can find me on Twitter,
GitHub, and my website.

316
00:14:57,280 --> 00:15:00,020
Thank you for coming,
and good luck.
