1
00:00:06,221 --> 00:00:07,206
不是我们应得的应用。我们需要的应用。
将一款闪亮的GMP应用投入生产

2
00:00:07,206 --> 00:00:08,164
马库斯·亚当斯:嗨。

3
00:00:08,164 --> 00:00:09,180
我是马库斯·亚当斯。

4
00:00:09,180 --> 00:00:11,730
我在默克制药制造部门工作，

5
00:00:11,730 --> 00:00:15,210
是数字主动过程分析小组的一员。

6
00:00:15,210 --> 00:00:17,490
这是我们的吉祥物，雷克斯。

7
00:00:17,490 --> 00:00:20,580
看，就像我们的史前朋友的许多事情一样，

8
00:00:20,580 --> 00:00:22,650
我们发现数据--

9
00:00:22,650 --> 00:00:25,110
我们可以看到它，但它通常是遥不可及的。

10
00:00:25,110 --> 00:00:26,700
这让我们很难过。

11
00:00:26,700 --> 00:00:29,520
现在，我们致力于将这些数据

12
00:00:29,520 --> 00:00:32,009
交到世界各地制造工厂的

13
00:00:32,009 --> 00:00:34,080
科学家和工程师手中。

14
00:00:34,080 --> 00:00:36,868
今天能和你们在一起，我感到无比荣幸。

15
00:00:36,868 --> 00:00:38,910
过去，我有幸参加过RStudio::conf，

16
00:00:38,910 --> 00:00:41,610
我一直觉得这是一次

17
00:00:41,610 --> 00:00:43,110
令人难以置信的丰富体验。

18
00:00:43,110 --> 00:00:45,180
你会听到令人兴奋的

19
00:00:45,180 --> 00:00:46,980
人们使用R语言的新方式。

20
00:00:46,980 --> 00:00:48,480
你可以和R社区的

21
00:00:48,480 --> 00:00:50,970
优秀成员进行很好的交流。

22
00:00:50,970 --> 00:00:53,430
你可以在签售会上打赌

23
00:00:53,430 --> 00:00:55,500
谁的队伍最长。

24
00:00:55,500 --> 00:00:59,640
提示--2020年，不是哈德利韦翰。

25
00:00:59,640 --> 00:01:02,770
不幸的是，这些事情我都帮不了你。

26
00:01:02,770 --> 00:01:04,709
事实上，我将向你展示可能是

27
00:01:04,709 --> 00:01:06,810
世界上最无聊的闪亮应用。

28
00:01:06,810 --> 00:01:10,300
但它是一款投入生产的闪亮应用。

29
00:01:10,300 --> 00:01:11,470
就是这个。

30
00:01:11,470 --> 00:01:14,020
文本输入框，粘贴在我们的搜索，

31
00:01:14,020 --> 00:01:15,250
可以上传它-

32
00:01:15,250 --> 00:01:16,240
太花哨了。

33
00:01:16,240 --> 00:01:17,230
锁上。

34
00:01:17,230 --> 00:01:18,590
检查语法。

35
00:01:18,590 --> 00:01:19,423
很好。

36
00:01:19,423 --> 00:01:21,760
单击一个按钮，然后等待更多时间。

37
00:01:21,760 --> 00:01:24,700
我可以为你唱歌，但是我去卡拉ok的歌

38
00:01:24,700 --> 00:01:26,590
是说唱之神，有六分钟。

39
00:01:26,590 --> 00:01:28,657
我们不应该等那么久。

40
00:01:28,657 --> 00:01:29,490
很好。

41
00:01:29,490 --> 00:01:30,323
可以了。

42
00:01:30,323 --> 00:01:31,867
点击一个按钮，下载PDF。

43
00:01:31,867 --> 00:01:32,913
好了。

44
00:01:32,913 --> 00:01:34,230
这是我们的报告。

45
00:01:34,230 --> 00:01:36,750
这是我们的目录，质量属性。

46
00:01:36,750 --> 00:01:38,310
跳到第一个。

47
00:01:38,310 --> 00:01:43,110
这是我们的控制图、一些运行规则、汇总统计数据

48
00:01:43,110 --> 00:01:44,070
和直方图。

49
00:01:44,070 --> 00:01:47,330
查看流程变更前后的分布。

50
00:01:47,330 --> 00:01:50,350
我知道-为什么我要给你看这个？

51
00:01:50,350 --> 00:01:51,670
这是101降价。

52
00:01:51,670 --> 00:01:52,840
创建PDF报告？

53
00:01:52,840 --> 00:01:54,470
你在开玩笑吗？

54
00:01:54,470 --> 00:01:55,930
这对我们来说不重要。

55
00:01:55,930 --> 00:01:58,510
对我们来说重要的是，

56
00:01:58,510 --> 00:02:01,370
这每年可以节省数万小时，

57
00:02:01,370 --> 00:02:04,360
相当于数百万美元的生产力。

58
00:02:04,360 --> 00:02:07,090
更重要的是，工程师和科学家现在可以

59
00:02:07,090 --> 00:02:09,669
将这些时间用于价值更高的活动，

60
00:02:09,669 --> 00:02:14,200
而不仅仅是死记硬背的数据提取和可视化。

61
00:02:14,200 --> 00:02:17,500
最重要的是，这是我们的网站所需要的。

62
00:02:17,500 --> 00:02:20,020
在新加坡，当我们去

63
00:02:20,020 --> 00:02:22,840
我们最大的生产基地之一时， 他们告诉我们，"我们甚至

64
00:02:22,840 --> 00:02:25,750
无法考虑支持一个高级分析项目。

65
00:02:25,750 --> 00:02:29,650
我们需要从CPV这样的必要活动中获取资源。"

66
00:02:29,650 --> 00:02:31,960
CPV是您刚刚看到的

67
00:02:31,960 --> 00:02:33,500
持续过程验证报告。

68
00:02:33,500 --> 00:02:35,950
该报告被视为GMP。

69
00:02:35,950 --> 00:02:37,580
如果您不是制药公司的员工，这意味着

70
00:02:37,580 --> 00:02:40,040
该公司遵循良好生产规范。

71
00:02:40,040 --> 00:02:42,850
换言之，我们将向FDA和全球

72
00:02:42,850 --> 00:02:45,880
其他监管机构提交此类

73
00:02:45,880 --> 00:02:47,110
数据和报告。

74
00:02:47,110 --> 00:02:48,790
我们将使用此类数据

75
00:02:48,790 --> 00:02:51,370
和报告做出放行决定，

76
00:02:51,370 --> 00:02:55,070
这可能会对全球数百万患者产生影响。

77
00:02:55,070 --> 00:02:57,550
所以当我们想到这一点时，我们想到了生产。

78
00:02:57,550 --> 00:03:02,480
我们认为生产加上高水平的监管。

79
00:03:02,480 --> 00:03:06,320
当功能可能很少，而且看起来很无聊时，

80
00:03:06,320 --> 00:03:08,900
就像一个转变。

81
00:03:08,900 --> 00:03:11,000
不仅仅是表面现象。

82
00:03:11,000 --> 00:03:15,290
弗雷德·布鲁克斯在他的标志性神话人物月中

83
00:03:15,290 --> 00:03:16,610
描述了这一点。

84
00:03:16,610 --> 00:03:17,990
他说有个沥青坑。

85
00:03:17,990 --> 00:03:20,420
你从左上角的一个程序开始。

86
00:03:20,420 --> 00:03:21,712
这是你的核心特征。

87
00:03:21,712 --> 00:03:23,990
这就是你在周末所做的。

88
00:03:23,990 --> 00:03:26,810
但这不是您向最终用户提供的内容。

89
00:03:26,810 --> 00:03:28,310
如果你想制作一个编程系统，

90
00:03:28,310 --> 00:03:31,580
把它和数据库，你的认证服务器集成起来，

91
00:03:31,580 --> 00:03:33,560
这将需要三倍的工作量。

92
00:03:33,560 --> 00:03:35,900
如果你想让它成为一个编程产品，

93
00:03:35,900 --> 00:03:38,040
记录它，测试它，概括它--

94
00:03:38,040 --> 00:03:40,670
这也需要三倍的工作量。

95
00:03:40,670 --> 00:03:42,890
如果你想转向编程系统产品，

96
00:03:42,890 --> 00:03:46,070
我们可能会考虑生产应用程序--

97
00:03:46,070 --> 00:03:49,100
这将需要9倍的工作量。

98
00:03:49,100 --> 00:03:51,800
所以你最初的程序，那九分之一，

99
00:03:51,800 --> 00:03:56,030
那九分之一，那只是你的递归神经网络。

100
00:03:56,030 --> 00:03:58,830
这只是最终应用程序的一小部分。

101
00:03:58,830 --> 00:04:01,490
另89%是在生产环境中创建

102
00:04:01,490 --> 00:04:03,860
可靠、安全和可维护的应用程序

103
00:04:03,860 --> 00:04:05,730
所需要的。

104
00:04:05,730 --> 00:04:08,672
如果您不是应用程序开发人员，

105
00:04:08,672 --> 00:04:10,880
或者您没有计算机科学背景，

106
00:04:10,880 --> 00:04:13,640
您可能不熟悉其中的大部分内容。

107
00:04:13,640 --> 00:04:15,380
我们当然不熟悉。

108
00:04:15,380 --> 00:04:18,440
我们只是一群化学家和化学工程师。

109
00:04:18,440 --> 00:04:20,399
我们也不例外。

110
00:04:20,399 --> 00:04:24,290
事实上，Burtch Works 2019年的一项研究发现，

111
00:04:24,290 --> 00:04:26,900
只有21%的数据科学家来自计算机科学背景。

112
00:04:26,900 --> 00:04:28,100
我们其他人

113
00:04:28,100 --> 00:04:30,620
来自统计、商业、

114
00:04:30,620 --> 00:04:33,110
经济或自然科学等领域。

115
00:04:33,110 --> 00:04:36,770
幸运的是，以真正的帕累托方式，

116
00:04:36,770 --> 00:04:39,020
这21%为我们做了很多繁重的工作。

117
00:04:39,020 --> 00:04:41,000
对于我们来说，要进入生产应用程序，

118
00:04:41,000 --> 00:04:43,070
我们必须学习很多东西。

119
00:04:43,070 --> 00:04:45,170
但是我没有时间分享所有这些。

120
00:04:45,170 --> 00:04:49,310
相反，我今天将与你们分享其中的三个。

121
00:04:49,310 --> 00:04:51,320
首先，不要找借口。

122
00:04:51,320 --> 00:04:52,550
像团队一样编码。

123
00:04:52,550 --> 00:04:54,500
在此之前，我们的许多脚本和应用程序，

124
00:04:54,500 --> 00:04:56,270
我们能够自己开发。

125
00:04:56,270 --> 00:04:58,190
它们足够小，我们可以处理。

126
00:04:58,190 --> 00:05:00,980
但是，当您将工作负载乘以9x时，

127
00:05:00,980 --> 00:05:02,360
您将需要一些帮助。

128
00:05:02,360 --> 00:05:03,860
当你和其他人一起工作时，

129
00:05:03,860 --> 00:05:07,170
这真的很好 记住一条黄金法则。

130
00:05:07,170 --> 00:05:09,420
和别人一起编码，

131
00:05:09,420 --> 00:05:10,510
就像有人来你家一样。

132
00:05:10,510 --> 00:05:13,080
你得清理干净，穿上真正的裤子。

133
00:05:13,080 --> 00:05:17,098
首先，你要使用版本控制。

134
00:05:17,098 --> 00:05:18,640
你可能以前听说过Git。

135
00:05:18,640 --> 00:05:21,460
你可能已经看到它与软件包

136
00:05:21,460 --> 00:05:23,020
在CRAN的源代码。

137
00:05:23,020 --> 00:05:25,120
但是我认为没有得到足够重视的是

138
00:05:25,120 --> 00:05:28,002
分支策略中的工作流。

139
00:05:28,002 --> 00:05:29,960
你不想在一个分支上工作，

140
00:05:29,960 --> 00:05:32,570
因为我向你保证，如果你这样做了，

141
00:05:32,570 --> 00:05:35,210
有人会做出破坏代码的承诺。

142
00:05:35,210 --> 00:05:38,390
还有5分钟你就要演示了。

143
00:05:38,390 --> 00:05:39,470
现在有很多选择。

144
00:05:39,470 --> 00:05:41,840
但对我们来说，我们用的是改良的Gitflow。

145
00:05:41,840 --> 00:05:43,970
这意味着，在非常低的级别上，

146
00:05:43,970 --> 00:05:45,050
我们有功能分支。

147
00:05:45,050 --> 00:05:47,725
这是我们正在做大量工作的地方。

148
00:05:47,725 --> 00:05:49,100
我们正在做实验。

149
00:05:49,100 --> 00:05:52,010
事情可能会破裂，这很好，因为它们是孤立的。

150
00:05:52,010 --> 00:05:54,530
然后，我们将它们合并回我们的开发部门。

151
00:05:54,530 --> 00:05:56,600
这是正常运行的应用程序。

152
00:05:56,600 --> 00:05:58,520
这是我们的应用程序工作副本。

153
00:05:58,520 --> 00:06:01,180
当我们测试和开发更多的时候，

154
00:06:01,180 --> 00:06:02,930
它已经准备好了，然后我们把它合并到我们的主分支中。

155
00:06:02,930 --> 00:06:07,190
这个主分支被部署到生产中。

156
00:06:07,190 --> 00:06:09,590
要做到这一点，您必须记录、测试

157
00:06:09,590 --> 00:06:11,600
并绝对要重复这些步骤。

158
00:06:11,600 --> 00:06:14,090
所以roxygen使得编码和文档

159
00:06:14,090 --> 00:06:16,970
在同一个地方变得非常容易。

160
00:06:16,970 --> 00:06:20,030
然后你可以用一个更加用户友好的版本

161
00:06:20,030 --> 00:06:21,440
来渲染。

162
00:06:21,440 --> 00:06:24,140
测试，也是一种文档形式。

163
00:06:24,140 --> 00:06:27,470
这给出了如何使用代码的例子。

164
00:06:27,470 --> 00:06:29,750
当然，这两者结合在一起，可以让人们

165
00:06:29,750 --> 00:06:32,930
在未来更快地对您的代码进行更改，

166
00:06:32,930 --> 00:06:35,600
并且知道他们没有破坏核心功能。

167
00:06:35,600 --> 00:06:39,680
你可能已经习惯了或者熟悉单元测试。

168
00:06:39,680 --> 00:06:42,680
这是测试，R单位，最小的单位。

169
00:06:42,680 --> 00:06:44,960
但除此之外，还有更多的测试。

170
00:06:44,960 --> 00:06:46,340
这是用户界面测试。

171
00:06:46,340 --> 00:06:48,780
让用户实际尝试你的应用程序，

172
00:06:48,780 --> 00:06:50,690
看看他们是否能做到有用的东西。

173
00:06:50,690 --> 00:06:53,030
或者用shinytest自动完成一些任务。

174
00:06:53,030 --> 00:06:55,400
还有一个可能得到最少关注的

175
00:06:55,400 --> 00:06:57,950
负载测试。

176
00:06:57,950 --> 00:07:00,530
对我们来说，我们的许多脚本

177
00:07:00,530 --> 00:07:02,645
和应用程序都运行在本地计算机上。

178
00:07:02,645 --> 00:07:04,592
我是说，我们最多只有一个用户。

179
00:07:04,592 --> 00:07:06,050
但是，当您开始将某些东西

180
00:07:06,050 --> 00:07:07,508
放入生产环境中时，

181
00:07:07,508 --> 00:07:09,107
您可能会有并发用户。

182
00:07:09,107 --> 00:07:11,690
10个用户的应用程序运行方式

183
00:07:11,690 --> 00:07:12,800
将不同于1个用户。

184
00:07:12,800 --> 00:07:16,760
对于10000名用户来说，它可能会运行得更不一样。

185
00:07:16,760 --> 00:07:19,880
您绝对可以扩展到10000个用户，

186
00:07:19,880 --> 00:07:22,940
但您肯定想在此之前对其进行测试。

187
00:07:22,940 --> 00:07:24,740
为了达到这个目的，你真的

188
00:07:24,740 --> 00:07:28,093
想利用R的自然编码结构。

189
00:07:28,093 --> 00:07:30,260
利用这样一个事实，函数、

190
00:07:30,260 --> 00:07:32,420
包和闪亮的模块

191
00:07:32,420 --> 00:07:34,280
自然会进行分工。

192
00:07:34,280 --> 00:07:37,790
因此，一个人可以专注于某个功能的细节，

193
00:07:37,790 --> 00:07:40,910
而这个功能是为团队中的其他人抽象的。

194
00:07:40,910 --> 00:07:43,130
他们只需要知道如何调用这个函数。

195
00:07:43,130 --> 00:07:45,410
这正是我们对应用程序所做的。

196
00:07:45,410 --> 00:07:48,080
在最高层，我们有CPV报告应用程序。

197
00:07:48,080 --> 00:07:50,907
当然，这依赖于一系列常见的包装，

198
00:07:50,907 --> 00:07:51,853
对吧-

199
00:07:51,853 --> 00:07:54,590
dplyr，purrr，当然还有，shiny。

200
00:07:54,590 --> 00:07:57,620
但是对于我们来说，我们还创建了四个定制包。

201
00:07:57,620 --> 00:08:00,350
我们有一个连接到我们的

202
00:08:00,350 --> 00:08:01,640
分析平台MantisDBC。

203
00:08:01,640 --> 00:08:04,280
我们有cpvreportr，它可以将所有内容

204
00:08:04,280 --> 00:08:05,510
编译成PDF。

205
00:08:05,510 --> 00:08:08,210
如果人们想做额外的计算，

206
00:08:08,210 --> 00:08:09,890
我们有exceleratr，它会将数据

207
00:08:09,890 --> 00:08:11,420
以可重复使用的格式输出。

208
00:08:11,420 --> 00:08:15,440
然后我们有ppxqc在报告中进行计算，

209
00:08:15,440 --> 00:08:18,590
创建控制图，计算运行规则，

210
00:08:18,590 --> 00:08:20,480
创建直方图。

211
00:08:20,480 --> 00:08:22,090
这种方法的美妙之处在于，

212
00:08:22,090 --> 00:08:24,590
现在您已经投入了所有的精力来创建代码，

213
00:08:24,590 --> 00:08:26,240
您已经实现了代码的工业化，

214
00:08:26,240 --> 00:08:28,115
测试了代码，记录了代码，并且可以将代码

215
00:08:28,115 --> 00:08:29,630
重用到其他应用程序中。

216
00:08:29,630 --> 00:08:33,450
虽然我们有用户使用报告应用程序，

217
00:08:33,450 --> 00:08:37,422
但我们制造部门也有大量数据科学家

218
00:08:37,422 --> 00:08:38,880
和研发用户，他们现在可以

219
00:08:38,880 --> 00:08:41,179
更容易地连接到

220
00:08:41,179 --> 00:08:42,620
我们的分析平台。

221
00:08:42,620 --> 00:08:45,410
我可能每周都会收到一封关于这个的电子邮件。

222
00:08:45,410 --> 00:08:47,570
很高兴他们能够重用

223
00:08:47,570 --> 00:08:51,120
我们已经创建的东西。

224
00:08:51,120 --> 00:08:53,990
接下来，我想谈谈环境。

225
00:08:53,990 --> 00:08:56,690
看，美国总统伍德罗·威尔逊曾经说过，

226
00:08:56,690 --> 00:09:00,170
"如果你想树敌，试着改变一些事情。"

227
00:09:00,170 --> 00:09:01,940
数据科学家马库斯·亚当说:

228
00:09:01,940 --> 00:09:04,652
"如果你想犯错误， 尝试改变环境。"

229
00:09:04,652 --> 00:09:06,860
因为当您谈到生产环境时，

230
00:09:06,860 --> 00:09:10,830
这意味着还有一个非生产环境。

231
00:09:10,830 --> 00:09:13,640
您可能会得到比这里更多或更少的信息。

232
00:09:13,640 --> 00:09:15,530
你知道，你有开发，测试，产品。

233
00:09:15,530 --> 00:09:17,522
您也可以有一个质控环境。

234
00:09:17,522 --> 00:09:18,980
但重要的是，你要把你要做的改变

235
00:09:18,980 --> 00:09:22,490
和人们实际使用

236
00:09:22,490 --> 00:09:24,170
你的代码的地方分开。

237
00:09:24,170 --> 00:09:26,540
你不想测试东西，

238
00:09:26,540 --> 00:09:29,403
你知道，随时调整东西。

239
00:09:29,403 --> 00:09:31,070
当您处于生产环境中时，

240
00:09:31,070 --> 00:09:32,840
您有一个稳定性水平。

241
00:09:32,840 --> 00:09:34,610
随着您从开发、测试

242
00:09:34,610 --> 00:09:36,860
到生产的转变，

243
00:09:36,860 --> 00:09:39,170
您希望事情变得更可控、更易测试、更稳定。

244
00:09:39,170 --> 00:09:41,540
人们必须能够依靠这个应用程序

245
00:09:41,540 --> 00:09:43,392
来达到目的，并以一致的方式工作。

246
00:09:43,392 --> 00:09:45,350
我会说一些有点争议的话。

247
00:09:45,350 --> 00:09:47,150
没有生产应用程序。

248
00:09:47,150 --> 00:09:49,730
生产环境中只有应用程序。

249
00:09:49,730 --> 00:09:51,230
和生产环境，你

250
00:09:51,230 --> 00:09:53,390
必须定义它的需求。

251
00:09:53,390 --> 00:09:55,580
这些要求来自于您将如何

252
00:09:55,580 --> 00:09:57,660
使用您的应用程序。

253
00:09:57,660 --> 00:10:00,020
现在，也许你有最少的要求

254
00:10:00,020 --> 00:10:02,390
和较低的期望，

255
00:10:02,390 --> 00:10:03,800
有点像去一个Carrot Top秀。

256
00:10:03,800 --> 00:10:07,170
但是对于我们这些以GMP方式使用它的人来说，

257
00:10:07,170 --> 00:10:09,950
我们必须有审计跟踪、超时、

258
00:10:09,950 --> 00:10:11,630
严格的变更控制。

259
00:10:11,630 --> 00:10:14,090
不过，我的意思是，你想远离这个

260
00:10:14,090 --> 00:10:18,140
抽象的生产神话之地。对吧？

261
00:10:18,140 --> 00:10:20,780
这将导致你争论R是否

262
00:10:20,780 --> 00:10:22,360
准备好投入生产。

263
00:10:22,360 --> 00:10:24,110
它让您进入这些细节，

264
00:10:24,110 --> 00:10:26,660
您可以开始清楚地表达

265
00:10:26,660 --> 00:10:28,310
您将如何满足这些要求。

266
00:10:28,310 --> 00:10:30,740
你可以专注于代码的

267
00:10:30,740 --> 00:10:33,650
工业化和泛化。

268
00:10:33,650 --> 00:10:35,210
更重要的是，您可以开始

269
00:10:35,210 --> 00:10:39,970
解决R再现性地狱的七个圈。

270
00:10:39,970 --> 00:10:42,250
我知道你在问什么，你在想，

271
00:10:42,250 --> 00:10:46,120
为什么别西卜胸前有个R纹身？

272
00:10:46,120 --> 00:10:47,230
我不知道。

273
00:10:47,230 --> 00:10:49,270
我想dark lord和Python

274
00:10:49,270 --> 00:10:50,890
有更密切的联系。

275
00:10:50,890 --> 00:10:53,337
但也许他输给了大天使加百列。

276
00:10:53,337 --> 00:10:54,377
我不知道。

277
00:10:54,377 --> 00:10:55,210
但是我们到了。

278
00:10:55,210 --> 00:10:57,760
当但丁开始他的下降，

279
00:10:57,760 --> 00:10:59,350
他第一次遇到代码版本。

280
00:10:59,350 --> 00:11:02,230
也就是说，您编写的代码由Git维护。

281
00:11:02,230 --> 00:11:06,070
或者如果不是Git，这就是你的最终版本

282
00:11:06,070 --> 00:11:09,550
或最终版本，最终版本2.0。

283
00:11:09,550 --> 00:11:11,940
在顶级代码本身中，我们

284
00:11:11,940 --> 00:11:14,103
依赖于特定版本的包。

285
00:11:14,103 --> 00:11:15,520
这些是您的顶级套餐。

286
00:11:15,520 --> 00:11:18,910
是dplyr 1.0还是dplyr 0.8？

287
00:11:18,910 --> 00:11:22,510
每一个包都有依赖关系。

288
00:11:22,510 --> 00:11:24,790
这些都是你在

289
00:11:24,790 --> 00:11:26,540
安装软件包的时候

290
00:11:26,540 --> 00:11:28,010
没有注意到的名字

291
00:11:28,010 --> 00:11:30,370
BH，Farva，Scales。

292
00:11:30,370 --> 00:11:33,280
但是它们中的每一个都有自己需要的版本。

293
00:11:33,280 --> 00:11:36,220
这些都运行在R语言版本之上。

294
00:11:36,220 --> 00:11:39,730
您使用的是R 3.5还是R 4.0？

295
00:11:39,730 --> 00:11:42,100
这些变化之间有突破性的变化。

296
00:11:42,100 --> 00:11:44,660
往下，是运行时环境。

297
00:11:44,660 --> 00:11:47,170
我认为这是最被低估的一个。

298
00:11:47,170 --> 00:11:49,900
当然，您想要管理环境变量，

299
00:11:49,900 --> 00:11:51,772
比如代理设置。

300
00:11:51,772 --> 00:11:53,230
但是你也要想一想，

301
00:11:53,230 --> 00:11:56,350
以交互模式运行和批量运行

302
00:11:56,350 --> 00:11:58,250
是有区别的。

303
00:11:58,250 --> 00:12:00,430
当您无法访问控制台时，

304
00:12:00,430 --> 00:12:01,930
无论您是在RStudio之外

305
00:12:01,930 --> 00:12:04,120
运行应用程序还是在

306
00:12:04,120 --> 00:12:06,070
Shiny的服务器上运行应用程序，这都是有区别的。

307
00:12:06,070 --> 00:12:08,980
从那里，你也有了外部依赖。

308
00:12:08,980 --> 00:12:10,930
这些是您的系统库。

309
00:12:10,930 --> 00:12:13,600
想想尝试安装rJava。

310
00:12:13,600 --> 00:12:16,203
你也必须安装那个JDK。

311
00:12:16,203 --> 00:12:17,620
或者如果您有幸尝试安装LaTeX，

312
00:12:17,620 --> 00:12:19,390
以确保您可以生成这些

313
00:12:19,390 --> 00:12:21,760
PDF报告。

314
00:12:21,760 --> 00:12:25,900
最里面的圈是我们的操作系统。

315
00:12:25,900 --> 00:12:29,860
代码在Windows和Mac之间、

316
00:12:29,860 --> 00:12:33,100
Mac和Linux之间以及Linux和Windows之间的运行方式不同。

317
00:12:33,100 --> 00:12:36,100
这就是为什么有些软件包不能在所有操作系统上工作。

318
00:12:36,100 --> 00:12:39,260
一个简单的例子是，它们使用不同的

319
00:12:39,260 --> 00:12:40,465
路径分隔符-

320
00:12:40,465 --> 00:12:42,910
反斜杠或正斜杠。

321
00:12:42,910 --> 00:12:44,680
但是还有更微妙的事情，

322
00:12:44,680 --> 00:12:47,080
比如他们如何渲染可视化效果。

323
00:12:47,080 --> 00:12:50,860
我可以告诉你，在我们的旅程中，

324
00:12:50,860 --> 00:12:52,390
我们面对了所有这些圈子。

325
00:12:52,390 --> 00:12:56,140
但是我现在给你举一个例子。

326
00:12:56,140 --> 00:12:59,050
看，这里有一些很棒的控制图。

327
00:12:59,050 --> 00:13:01,180
在左边，我们有开发

328
00:13:01,180 --> 00:13:02,710
服务器中的版本。

329
00:13:02,710 --> 00:13:06,310
在右边，我们的测试服务器上

330
00:13:06,310 --> 00:13:09,580
有版本相同的代码，但是没有错误，没有警告，

331
00:13:09,580 --> 00:13:12,580
最重要的是，没有耀眼的深绿色线条

332
00:13:12,580 --> 00:13:14,870
显示数据的平均值。

333
00:13:14,870 --> 00:13:18,497
现在我想指出，这是一条

334
00:13:18,497 --> 00:13:19,563
黑暗空间的绿线。

335
00:13:19,563 --> 00:13:21,247
这很重要，因为正式来说，

336
00:13:21,247 --> 00:13:22,730
那里不应该有空间。

337
00:13:22,730 --> 00:13:26,107
然而，在我们实际将它部署到

338
00:13:26,107 --> 00:13:28,690
开发服务器之前，我们已经使用了

339
00:13:28,690 --> 00:13:29,780
这些代码很多年了，并且它是有效的。

340
00:13:29,780 --> 00:13:31,280
所以你必须问自己，一个单一的空间

341
00:13:31,280 --> 00:13:34,600
如何对我们的应用程序

342
00:13:34,600 --> 00:13:36,310
构成如此大的威胁？

343
00:13:36,310 --> 00:13:40,850
嗯，就像生活中的大多数事情一样，时机至关重要。

344
00:13:40,850 --> 00:13:43,900
你看，当你为你的包指定版本要求的时候，

345
00:13:43,900 --> 00:13:47,470
它的下游的所有东西都在这个

346
00:13:47,470 --> 00:13:51,670
量子叠加中。

347
00:13:51,670 --> 00:13:53,740
将被安装的实际版本

348
00:13:53,740 --> 00:13:57,290
并不碰巧实际安装了这些软件包。

349
00:13:57,290 --> 00:14:02,290
所以我们的ppxqc包当然依赖于ggplot2。

350
00:14:03,370 --> 00:14:06,130
这反过来又需要秤。

351
00:14:06,130 --> 00:14:11,130
现在，在2019年11月19日之前，该问题解决为1.0.0级

352
00:14:15,280 --> 00:14:18,100
可以处理我们的暗绿色空间。

353
00:14:18,100 --> 00:14:23,100
2019年11月19日之后，它决定按1.1.0的比例缩放，

354
00:14:23,410 --> 00:14:26,050
这改变了它将字符串转换成

355
00:14:26,050 --> 00:14:28,660
数字值来表示颜色的方式，

356
00:14:28,660 --> 00:14:32,490
并无意中打破了向后兼容性。

357
00:14:32,490 --> 00:14:36,630
我们恰好在2019年11月下旬部署测试。

358
00:14:36,630 --> 00:14:40,230
现在我们发现这一点是因为我们做了检查，我们应该做的。

359
00:14:40,230 --> 00:14:42,090
但是我要告诉你，打包还不足以

360
00:14:42,090 --> 00:14:43,440
抓住这个。

361
00:14:43,440 --> 00:14:44,550
我们试过了。

362
00:14:44,550 --> 00:14:46,770
我们在这里真正需要的是CRAN快照，

363
00:14:46,770 --> 00:14:49,350
无论是来自微软的CRAN快照、

364
00:14:49,350 --> 00:14:53,130
RStudio包管理器，还是内部的CRAN快照。

365
00:14:53,130 --> 00:14:55,710
除此之外，这个问题只存在了大约一个月，

366
00:14:55,710 --> 00:14:58,050
这也证明了

367
00:14:58,050 --> 00:15:00,570
包维护人员非常棒。

368
00:15:00,570 --> 00:15:02,430
到1月中旬，这个问题已经解决了。

369
00:15:02,430 --> 00:15:05,250
所以这个故事的寓意是不要提前部署。

370
00:15:05,250 --> 00:15:08,570
让包维护人员先解决所有问题。

371
00:15:08,570 --> 00:15:10,610
最后，我想说，如果没有

372
00:15:10,610 --> 00:15:13,820
直接的干预，你不能运行你的应用程序，

373
00:15:13,820 --> 00:15:16,060
它从一开始就不是一个应用程序。

374
00:15:16,060 --> 00:15:18,550
您的应用程序将遭受

375
00:15:18,550 --> 00:15:19,790
惊人财富的打击。

376
00:15:19,790 --> 00:15:22,810
我指的是你从未想过

377
00:15:22,810 --> 00:15:25,270
用户会有的疯狂输入。

378
00:15:25,270 --> 00:15:29,270
比如，...12位精度，...你的代码

379
00:15:29,270 --> 00:15:32,930
必须是健壮的，以经受住应用程序

380
00:15:32,930 --> 00:15:34,280
所承受的数千次自然冲击。

381
00:15:34,280 --> 00:15:37,550
它必须在没有你直接干预的情况下进行。

382
00:15:37,550 --> 00:15:39,560
但是，仅仅因为您不能直接干预

383
00:15:39,560 --> 00:15:43,280
并不意味着应用程序不能为您收集信息。

384
00:15:43,280 --> 00:15:45,290
首先，日志。

385
00:15:45,290 --> 00:15:47,270
有很多程序可以帮你解决

386
00:15:47,270 --> 00:15:52,270
这个问题--没用的。logger，log4r，log

387
00:15:52,430 --> 00:15:55,610
当这种情况发生时，在堆栈跟踪中

388
00:15:55,610 --> 00:15:58,100
记录崩溃中的错误是一回事，但是您也需要上下文。

389
00:15:58,100 --> 00:16:00,410
你的应用也有点像个孩子。

390
00:16:00,410 --> 00:16:02,300
当不好的事情发生时，你不希望

391
00:16:02,300 --> 00:16:03,380
只有你的老师打电话给你。

392
00:16:03,380 --> 00:16:04,940
你想知道发生的好事。

393
00:16:04,940 --> 00:16:06,410
你想知道人们是如何使用它的。

394
00:16:06,410 --> 00:16:07,452
他们提交了什么？

395
00:16:07,452 --> 00:16:10,680
他们在寻找什么样的查询？

396
00:16:10,680 --> 00:16:11,970
你知道吗？

397
00:16:11,970 --> 00:16:13,545
有点像你的孩子。

398
00:16:13,545 --> 00:16:15,670
这真的是因为你付出了很多努力。

399
00:16:15,670 --> 00:16:18,480
就像一个好孩子，也让它称之为家。

400
00:16:18,480 --> 00:16:22,230
使用谷歌分析这样的东西让你知道

401
00:16:22,230 --> 00:16:24,780
这个应用程序被谁和在哪里使用。

402
00:16:24,780 --> 00:16:28,710
谷歌分析标签相当简单，可以将一些

403
00:16:28,710 --> 00:16:30,540
JavaScript复制到你的用户界面代码中，

404
00:16:30,540 --> 00:16:33,330
然后你就可以看到所有这些分
析了你的代码是如何被使用的。

405
00:16:33,330 --> 00:16:34,850
您可以看到峰值流量。

406
00:16:34,850 --> 00:16:37,350
您可以看到该应用程序在一年中的什么时间被使用。

407
00:16:37,350 --> 00:16:41,220
也许您想扩大生产服务器的规模。

408
00:16:41,220 --> 00:16:42,930
最后，您可能实际上想

409
00:16:42,930 --> 00:16:46,005
让您的应用程序适应它的环境。

410
00:16:46,005 --> 00:16:47,700
有一些很好的软件包

411
00:16:47,700 --> 00:16:49,230
可以让您这样做。

412
00:16:49,230 --> 00:16:52,080
配置和秘密包就是这么做的。

413
00:16:52,080 --> 00:16:54,332
在一个简单的例子中，您可能--对于我们来说，

414
00:16:54,332 --> 00:16:56,790
我们需要在我们的开发和测试环境中

415
00:16:56,790 --> 00:16:58,500
展示一个横幅，上面写着，这不是官方使用的。

416
00:16:58,500 --> 00:17:01,170
但对我们来说，更复杂的是环境之间的

417
00:17:01,170 --> 00:17:02,550
密码管理。

418
00:17:02,550 --> 00:17:04,920
您知道，对于我们来说，我们的每个环境

419
00:17:04,920 --> 00:17:06,714
都有一个服务帐户。

420
00:17:06,714 --> 00:17:08,339
该服务帐户有一个密码，

421
00:17:08,339 --> 00:17:11,339
该密码连接到每个环境的不同数据库。

422
00:17:11,339 --> 00:17:13,230
我们的开发环境不应该访问我们的

423
00:17:13,230 --> 00:17:16,050
生产环境数据库。

424
00:17:16,050 --> 00:17:18,450
我们的生产环境不应该访问

425
00:17:18,450 --> 00:17:20,040
我们的开发数据库。

426
00:17:20,040 --> 00:17:21,839
此外，安全要求是我们不能以

427
00:17:21,839 --> 00:17:25,829
明文形式存储这些密码。

428
00:17:25,829 --> 00:17:27,300
我要说的是，证书和秘密管理

429
00:17:27,300 --> 00:17:30,390
是一个如此深刻的话题。

430
00:17:30,390 --> 00:17:32,440
我绝不是这方面的专家。

431
00:17:32,440 --> 00:17:35,910
但我将只分享我们所做的工作，

432
00:17:35,910 --> 00:17:37,800
因为该解决方案是受我

433
00:17:37,800 --> 00:17:40,290
在R/Pharma 2019与R-Podcaster本人Eric Nantz

434
00:17:40,290 --> 00:17:43,740
进行的走廊对话的启发。

435
00:17:43,740 --> 00:17:47,230
当我们的客户端UI联系我们的服务器时，

436
00:17:47,230 --> 00:17:52,140
我们会查看请求的URL，特别是子域。

437
00:17:52,140 --> 00:17:53,850
这很好，因为我们实际上有多个

438
00:17:53,850 --> 00:17:56,760
生产服务器位于一个应用

439
00:17:56,760 --> 00:17:57,660
负载平衡器后面。

440
00:17:57,660 --> 00:17:59,340
因此，通过观察这个子域，

441
00:17:59,340 --> 00:18:02,520
它是shiny的开发、shiny的测试，

442
00:18:02,520 --> 00:18:04,000
还是仅仅在生产环境中闪闪发光？

443
00:18:04,000 --> 00:18:05,730
然后，我们可以使用配置包

444
00:18:05,730 --> 00:18:09,060
从YAML文件中获取正确的参数。

445
00:18:09,060 --> 00:18:14,060
具体来说，对于我们来说，这是服务帐户的ID，

446
00:18:14,160 --> 00:18:16,020
我们应该连接到的数据库，

447
00:18:16,020 --> 00:18:18,390
以及我们的vault中

448
00:18:18,390 --> 00:18:20,070
保存密码的秘密的名称。

449
00:18:20,070 --> 00:18:22,950
看，我们已经加密了金库里的密码。

450
00:18:22,950 --> 00:18:26,610
通过服务器的私有SSH密钥，

451
00:18:26,610 --> 00:18:28,740
他们可以解密该密码，并使用

452
00:18:28,740 --> 00:18:32,430
它从正确的数据库中获取数据。

453
00:18:32,430 --> 00:18:36,240
这非常有用，因为我们可以

454
00:18:36,240 --> 00:18:39,870
加密密码并提交给我们的

455
00:18:39,870 --> 00:18:41,220
Git存储库。

456
00:18:41,220 --> 00:18:43,980
而且只需要少数开发者知道那些密码。

457
00:18:43,980 --> 00:18:47,100
只有那些服务器，当我们部署它们时，

458
00:18:47,100 --> 00:18:49,440
应该能够访问这些密码。

459
00:18:49,440 --> 00:18:52,530
为了轮换密码，我们只需用更新后的密码

460
00:18:52,530 --> 00:18:54,840
发出一个拉请求，就可以部署到

461
00:18:54,840 --> 00:18:56,797
合适的服务器上。

462
00:18:56,797 --> 00:18:57,773
我明白了。

463
00:18:57,773 --> 00:19:01,310
密码管理并不刺激。

464
00:19:01,310 --> 00:19:03,110
但是部署是。

465
00:19:03,110 --> 00:19:04,220
完全值得。

466
00:19:04,220 --> 00:19:06,530
我承认--每次在演讲题目中

467
00:19:06,530 --> 00:19:09,560
听到生产这个词，我的头都会抽搐。

468
00:19:09,560 --> 00:19:12,590
但是到达那里并不全是自然语言处理

469
00:19:12,590 --> 00:19:13,970
和随机森林。

470
00:19:13,970 --> 00:19:16,760
希望你现在已经意识到，实际上，大部分人

471
00:19:16,760 --> 00:19:18,230
还没有到达那里。

472
00:19:18,230 --> 00:19:20,660
我今天所说的真的只是

473
00:19:20,660 --> 00:19:22,040
表面现象。

474
00:19:22,040 --> 00:19:25,610
不过要知道，你可以在

475
00:19:25,610 --> 00:19:27,030
生产环境中使用R和shiny。

476
00:19:27,030 --> 00:19:29,450
我们甚至不是第一个这样做的。

477
00:19:29,450 --> 00:19:32,240
就在去年，RStudio::conf的希瑟和杰奎琳·诺里斯

478
00:19:32,240 --> 00:19:35,640
谈到了T-Mobile是如何做到的。

479
00:19:35,640 --> 00:19:39,420
我们只是你如何做到这一点的又一个例子。

480
00:19:39,420 --> 00:19:41,120
如果你需要的话，就叫我。

481
00:19:41,120 --> 00:19:42,890
我们是财富500强公司。

482
00:19:42,890 --> 00:19:46,810
我们正将其用于一个非常重要的报告流程。

483
00:19:46,810 --> 00:19:50,080
看--把一个shiny的应用程序

484
00:19:50,080 --> 00:19:54,650
投入生产就像玩旧的电脑游戏，俄勒冈小道一样。

485
00:19:54,650 --> 00:19:57,100
现在你不一定会成功。

486
00:19:57,100 --> 00:19:58,360
可能不好看。

487
00:19:58,360 --> 00:19:59,860
可能会很难。

488
00:19:59,860 --> 00:20:00,980
但是可以做到。

489
00:20:00,980 --> 00:20:02,920
别人比你先做。

490
00:20:02,920 --> 00:20:05,860
你只需要想好怎么做。

491
00:20:05,860 --> 00:20:08,140
当然，还要避免痢疾。

492
00:20:08,140 --> 00:20:10,990
但这是个好建议，甚至超越了

493
00:20:10,990 --> 00:20:12,400
开发shiny的应用程序。

494
00:20:12,400 --> 00:20:15,850
就像那些穿越落基山脉的拓荒者一样，

495
00:20:15,850 --> 00:20:20,850
我们也穿越了，想出了如何穿越，

496
00:20:21,310 --> 00:20:24,310
到达了生产的巅峰。

497
00:20:24,310 --> 00:20:27,250
当我们眺望这个远景时，

498
00:20:27,250 --> 00:20:29,600
我会给你们留下这些话。

499
00:20:29,600 --> 00:20:31,810
您不能总是编写您想要的代码，

500
00:20:31,810 --> 00:20:34,300
但是如果您有时构建，

501
00:20:34,300 --> 00:20:38,110
您可能会发现您编写了您需要的代码。

502
00:20:38,110 --> 00:20:39,220
谢谢你抽出时间。

503
00:20:39,220 --> 00:20:41,860
我希望你从这次谈话中

504
00:20:41,860 --> 00:20:44,110
得到你需要的东西。我希望你能享受剩下的会议。

505
00:20:44,110 --> 00:20:45,860
谢谢你。

