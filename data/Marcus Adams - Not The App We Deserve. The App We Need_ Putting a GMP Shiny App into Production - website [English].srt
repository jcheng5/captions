1
00:00:07,331 --> 00:00:08,039
MARCUS ADAMS: Hi.

2
00:00:08,039 --> 00:00:09,180
I'm Marcus Adams.

3
00:00:09,180 --> 00:00:11,730
I work in Merck's Pharmaceutical
Manufacturing Division

4
00:00:11,730 --> 00:00:15,210
as part of the Digital Proactive
Process Analytics Group.

5
00:00:15,210 --> 00:00:17,490
This is our mascot, Rex.

6
00:00:17,490 --> 00:00:20,580
See, like many things for
our prehistoric friend,

7
00:00:20,580 --> 00:00:22,650
we were finding that the data--

8
00:00:22,650 --> 00:00:25,110
we could see it, but it was
often just out of reach.

9
00:00:25,110 --> 00:00:26,700
And that made us sad.

10
00:00:26,700 --> 00:00:29,520
Now, we work to get
that data into the hands

11
00:00:29,520 --> 00:00:32,009
of our scientists and
engineers at our manufacturing

12
00:00:32,009 --> 00:00:34,080
sites around the world.

13
00:00:34,080 --> 00:00:36,868
I am incredibly honored
to be here with you today.

14
00:00:36,868 --> 00:00:38,910
I've had the privilege of
attending RStudio::conf

15
00:00:38,910 --> 00:00:41,610
in the past, and I've always
found it to be an incredibly

16
00:00:41,610 --> 00:00:43,110
enriching experience.

17
00:00:43,110 --> 00:00:45,180
You get to hear about
exciting new ways

18
00:00:45,180 --> 00:00:46,980
people are using the R language.

19
00:00:46,980 --> 00:00:48,480
You get to have
great conversations

20
00:00:48,480 --> 00:00:50,970
with wonderful members
of the R community.

21
00:00:50,970 --> 00:00:53,430
And you get to take bets on
who will have the longest

22
00:00:53,430 --> 00:00:55,500
line at the book signing event.

23
00:00:55,500 --> 00:00:59,640
Hint-- in 2020, it was
not Hadley Wickham.

24
00:00:59,640 --> 00:01:02,770
Unfortunately, I can't help
you with any of these things.

25
00:01:02,770 --> 00:01:04,709
In fact, I'm about
to show you possibly

26
00:01:04,709 --> 00:01:06,810
the world's most
boring shiny app.

27
00:01:06,810 --> 00:01:10,300
But it is a shiny
app in production.

28
00:01:10,300 --> 00:01:11,470
Here it is.

29
00:01:11,470 --> 00:01:14,020
Text input box,
paste in our search,

30
00:01:14,020 --> 00:01:15,250
could have uploaded it--

31
00:01:15,250 --> 00:01:16,240
too fancy.

32
00:01:16,240 --> 00:01:17,230
Lock it.

33
00:01:17,230 --> 00:01:18,590
Check the syntax.

34
00:01:18,590 --> 00:01:19,090
Great.

35
00:01:19,090 --> 00:01:21,760
Click a button,
and wait some more.

36
00:01:21,760 --> 00:01:24,700
I could sing for you,
but my go-to karaoke song

37
00:01:24,700 --> 00:01:26,590
is Rap God, which
is six minutes.

38
00:01:26,590 --> 00:01:28,990
And we shouldn't wait that long.

39
00:01:28,990 --> 00:01:29,490
Great.

40
00:01:29,490 --> 00:01:29,990
It's done.

41
00:01:29,990 --> 00:01:32,080
Click a button,
download the PDF.

42
00:01:32,080 --> 00:01:32,700
Here it is.

43
00:01:32,700 --> 00:01:34,230
Here's our report.

44
00:01:34,230 --> 00:01:36,750
Here's our table of
contents, quality attributes.

45
00:01:36,750 --> 00:01:38,310
Skip to the first one.

46
00:01:38,310 --> 00:01:43,110
It's our control chart, some
run rules, summary statistics,

47
00:01:43,110 --> 00:01:44,070
and histograms.

48
00:01:44,070 --> 00:01:47,330
Look at the distributions before
and after a process change.

49
00:01:47,330 --> 00:01:50,350
And I know-- why am
I showing you this?

50
00:01:50,350 --> 00:01:51,670
This R Markdown 101.

51
00:01:51,670 --> 00:01:52,840
Creating a PDF report?

52
00:01:52,840 --> 00:01:54,470
Are you kidding me?

53
00:01:54,470 --> 00:01:55,930
That's not what's
important for us.

54
00:01:55,930 --> 00:01:58,510
What was important
for us was that this

55
00:01:58,510 --> 00:02:01,370
is saving tens of thousands
of hours each year,

56
00:02:01,370 --> 00:02:04,360
the equivalent of millions
of dollars in productivity.

57
00:02:04,360 --> 00:02:07,090
More important is that
engineers and scientists can now

58
00:02:07,090 --> 00:02:09,669
use those hours for much
higher value activities

59
00:02:09,669 --> 00:02:14,200
instead of just doing rote
data pulls and visualization.

60
00:02:14,200 --> 00:02:17,500
Most importantly, this
is what our sites needed.

61
00:02:17,500 --> 00:02:20,020
When we went out to one of our
largest manufacturing sites

62
00:02:20,020 --> 00:02:22,840
in Singapore, they
told us, "We can't even

63
00:02:22,840 --> 00:02:25,750
think of supporting an
advanced analytics project.

64
00:02:25,750 --> 00:02:29,650
We need to get resources off of
required activities like CPV."

65
00:02:29,650 --> 00:02:31,960
CPV is a Continuous
Process Verification

66
00:02:31,960 --> 00:02:33,500
report you just saw.

67
00:02:33,500 --> 00:02:35,950
And that report
is considered GMP.

68
00:02:35,950 --> 00:02:37,580
If you're not from
pharma, that means

69
00:02:37,580 --> 00:02:40,040
it adheres to Good
Manufacturing Practices.

70
00:02:40,040 --> 00:02:42,850
In other words, this is the
kind of data and reporting

71
00:02:42,850 --> 00:02:45,880
that we would submit to the FDA
and other regulatory agencies

72
00:02:45,880 --> 00:02:47,110
around the world.

73
00:02:47,110 --> 00:02:48,790
This is the kind
of data and reports

74
00:02:48,790 --> 00:02:51,370
we would use to make
release decisions that

75
00:02:51,370 --> 00:02:55,070
can have impact on millions
of patients around the world.

76
00:02:55,070 --> 00:02:57,550
And so when we think about
this, we think production.

77
00:02:57,550 --> 00:03:02,480
We think production plus
high level of regulations.

78
00:03:02,480 --> 00:03:06,320
When the features may be a
few, and it may seem boring,

79
00:03:06,320 --> 00:03:08,900
it's sort of like a
transformer, though.

80
00:03:08,900 --> 00:03:11,000
There's more than meets the eye.

81
00:03:11,000 --> 00:03:15,290
And Fred Brooks, in his
iconic Mythical Man-Month,

82
00:03:15,290 --> 00:03:16,610
he describes this.

83
00:03:16,610 --> 00:03:17,990
He says there's this tar pit.

84
00:03:17,990 --> 00:03:20,420
And you start out with a program
in the upper left-hand corner.

85
00:03:20,420 --> 00:03:21,712
And this is your core features.

86
00:03:21,712 --> 00:03:23,990
This is what you crank
out in a weekend.

87
00:03:23,990 --> 00:03:26,810
But this is not what you
deliver to your end users.

88
00:03:26,810 --> 00:03:28,310
If you to make a
programming system,

89
00:03:28,310 --> 00:03:31,580
integrate that with databases,
your authentication server--

90
00:03:31,580 --> 00:03:33,560
that's going to take
three times as much work.

91
00:03:33,560 --> 00:03:35,900
And if you want to make
it a programming product,

92
00:03:35,900 --> 00:03:38,040
document it, test
it, generalize it--

93
00:03:38,040 --> 00:03:40,670
that's also going to take
three times as much work.

94
00:03:40,670 --> 00:03:42,890
And then if you want to move
to a programming systems

95
00:03:42,890 --> 00:03:46,070
product, what we might
consider a production app--

96
00:03:46,070 --> 00:03:49,100
that's going to take nine
times the amount of work.

97
00:03:49,100 --> 00:03:51,800
So your original
program, that one ninth--

98
00:03:51,800 --> 00:03:56,030
that one ninth-- that's just
your recurrent neural network.

99
00:03:56,030 --> 00:03:58,830
That's only such a small
part of the end application.

100
00:03:58,830 --> 00:04:01,490
The other 89% is what
it takes to create

101
00:04:01,490 --> 00:04:03,860
a reliable, secure,
and maintainable app

102
00:04:03,860 --> 00:04:05,730
in a production environment.

103
00:04:05,730 --> 00:04:08,672
Now if you're not
an app developer,

104
00:04:08,672 --> 00:04:10,880
or you don't come from a
computer science background,

105
00:04:10,880 --> 00:04:13,640
you might not be familiar with
the bulk of what it takes.

106
00:04:13,640 --> 00:04:15,380
We certainly weren't.

107
00:04:15,380 --> 00:04:18,440
We're just a bunch of chemists
and chemical engineers.

108
00:04:18,440 --> 00:04:20,399
And we're not the exception.

109
00:04:20,399 --> 00:04:24,290
In fact, a Burtch Works study
in 2019 found that only 21%

110
00:04:24,290 --> 00:04:26,900
of data scientists come from
a computer science background.

111
00:04:26,900 --> 00:04:28,100
The rest of us--

112
00:04:28,100 --> 00:04:30,620
we come from places like
statistics, business,

113
00:04:30,620 --> 00:04:33,110
economics, or the
natural sciences.

114
00:04:33,110 --> 00:04:36,770
Now, in true Pareto
fashion, luckily, that 21%

115
00:04:36,770 --> 00:04:39,020
has done a lot of
heavy lifting for us.

116
00:04:39,020 --> 00:04:41,000
And for us to get
to a production app,

117
00:04:41,000 --> 00:04:43,070
we had to learn a lot of things.

118
00:04:43,070 --> 00:04:45,170
But I don't have time
to share all those.

119
00:04:45,170 --> 00:04:49,310
Instead, I'm just going to share
three of them with you today.

120
00:04:49,310 --> 00:04:51,320
First, no excuses.

121
00:04:51,320 --> 00:04:52,550
Code like a team.

122
00:04:52,550 --> 00:04:54,500
Before this, a lot of
our scripts and apps,

123
00:04:54,500 --> 00:04:56,270
we were able to
develop by ourselves.

124
00:04:56,270 --> 00:04:58,190
They were small enough,
we could handle that.

125
00:04:58,190 --> 00:05:00,980
But when you multiply
your workload by 9x,

126
00:05:00,980 --> 00:05:02,360
you're going to need some help.

127
00:05:02,360 --> 00:05:03,860
And when you're
working with others,

128
00:05:03,860 --> 00:05:07,170
it's really good to
remember a golden rule.

129
00:05:07,170 --> 00:05:09,420
Coding with others, it's
sort of like when people

130
00:05:09,420 --> 00:05:10,510
come to visit your house.

131
00:05:10,510 --> 00:05:13,080
You got to clean up
and put on real pants.

132
00:05:13,080 --> 00:05:17,098
And first and foremost, you're
going to use version control.

133
00:05:17,098 --> 00:05:18,640
And you may have
heard of Git before.

134
00:05:18,640 --> 00:05:21,460
You may have seen it
with packages on CRAN

135
00:05:21,460 --> 00:05:23,020
where the source code is.

136
00:05:23,020 --> 00:05:25,120
But I think what doesn't
get enough attention is

137
00:05:25,120 --> 00:05:28,002
the workflow in the
branching strategies.

138
00:05:28,002 --> 00:05:29,960
You don't want to be
working on a single branch

139
00:05:29,960 --> 00:05:32,570
because I guarantee
you, if you do,

140
00:05:32,570 --> 00:05:35,210
somebody will make a commit
that will break the code.

141
00:05:35,210 --> 00:05:38,390
And it will be 5 minutes before
you're supposed to give a demo.

142
00:05:38,390 --> 00:05:39,470
Now there's many options.

143
00:05:39,470 --> 00:05:41,840
But for us, we went
with a modified Gitflow.

144
00:05:41,840 --> 00:05:43,970
And this means, at
the very low level,

145
00:05:43,970 --> 00:05:45,050
we have feature branches.

146
00:05:45,050 --> 00:05:47,725
And this is where we're
doing a lot of the work.

147
00:05:47,725 --> 00:05:49,100
We're doing the
experimentations.

148
00:05:49,100 --> 00:05:52,010
Things can break, and that's
fine because they're isolated.

149
00:05:52,010 --> 00:05:54,530
But then, we merge them back
into our development branch.

150
00:05:54,530 --> 00:05:56,600
This is the functioning
application.

151
00:05:56,600 --> 00:05:58,520
This is our working
copy of the app.

152
00:05:58,520 --> 00:06:01,180
And as we test and develop
that more, and it's ready,

153
00:06:01,180 --> 00:06:02,930
we then merge that
into our master branch.

154
00:06:02,930 --> 00:06:07,190
And that master branch is what
gets deployed into production.

155
00:06:07,190 --> 00:06:09,590
And to get there, you
have to document, test,

156
00:06:09,590 --> 00:06:11,600
and absolutely repeat.

157
00:06:11,600 --> 00:06:14,090
So roxygen makes
it so easy to code

158
00:06:14,090 --> 00:06:16,970
and have that documentation
right there in the same place.

159
00:06:16,970 --> 00:06:20,030
And then you can render in a
much more even user-friendly

160
00:06:20,030 --> 00:06:21,440
version.

161
00:06:21,440 --> 00:06:24,140
Testing, that's also a
form of documentation.

162
00:06:24,140 --> 00:06:27,470
That gives examples on
how to use your code.

163
00:06:27,470 --> 00:06:29,750
And of course, both of
these together allows people

164
00:06:29,750 --> 00:06:32,930
in the future to make changes
to your code much more rapidly

165
00:06:32,930 --> 00:06:35,600
and know that they aren't
breaking core functionality.

166
00:06:35,600 --> 00:06:39,680
And you may be used to or used
or familiar with unit testing.

167
00:06:39,680 --> 00:06:42,680
This is the testthat,
the R unit, the tinytest.

168
00:06:42,680 --> 00:06:44,960
But there's also even
more testing beyond that.

169
00:06:44,960 --> 00:06:46,340
There's the UI testing.

170
00:06:46,340 --> 00:06:48,780
Get users to actually
try your application out,

171
00:06:48,780 --> 00:06:50,690
see if they can do
something useful with it.

172
00:06:50,690 --> 00:06:53,030
Or automate some of
that with shinytest.

173
00:06:53,030 --> 00:06:55,400
And then there's the one
that probably gets the least

174
00:06:55,400 --> 00:06:57,950
attention-- load testing.

175
00:06:57,950 --> 00:07:00,530
For us, a lot of our
scripts and applications

176
00:07:00,530 --> 00:07:02,645
are running on local computers.

177
00:07:02,645 --> 00:07:04,592
I mean, we have
one user at most.

178
00:07:04,592 --> 00:07:06,050
But when you start
to put something

179
00:07:06,050 --> 00:07:07,508
in a production
environment, you're

180
00:07:07,508 --> 00:07:09,107
likely going to have
concurrent users.

181
00:07:09,107 --> 00:07:11,690
And your application is going
to run differently with 10 users

182
00:07:11,690 --> 00:07:12,800
than it will with one.

183
00:07:12,800 --> 00:07:16,760
And it might run even more
different with 10,000 users.

184
00:07:16,760 --> 00:07:19,880
You can absolutely scale
up to 10,000 users,

185
00:07:19,880 --> 00:07:22,940
but you definitely want
to test it before you do.

186
00:07:22,940 --> 00:07:24,740
And to get there,
you really want

187
00:07:24,740 --> 00:07:28,093
to just take advantage of
R's natural coding structure.

188
00:07:28,093 --> 00:07:30,260
Take advantage of the fact
that functions, packages,

189
00:07:30,260 --> 00:07:32,420
and shiny modules
naturally lend itself

190
00:07:32,420 --> 00:07:34,280
to the division of labor.

191
00:07:34,280 --> 00:07:37,790
So one person can focus in
on the details of a function,

192
00:07:37,790 --> 00:07:40,910
and it's abstracted for the
rest of everyone on the team.

193
00:07:40,910 --> 00:07:43,130
They just need to know
how to call that function.

194
00:07:43,130 --> 00:07:45,410
And that's exactly what we
did with our application.

195
00:07:45,410 --> 00:07:48,080
At the top level, we have
the CPV reporting app.

196
00:07:48,080 --> 00:07:51,020
And of course, that relies on
a bunch of common packages,

197
00:07:51,020 --> 00:07:51,740
right--

198
00:07:51,740 --> 00:07:54,590
dplyr, purrr,
and, of course, shiny.

199
00:07:54,590 --> 00:07:57,620
But for us, we also created
four custom packages.

200
00:07:57,620 --> 00:08:00,350
We have the one that connects
to our analytics platform--

201
00:08:00,350 --> 00:08:01,640
MantisDBC.

202
00:08:01,640 --> 00:08:04,280
We have cpvreportr that
actually compiles everything

203
00:08:04,280 --> 00:08:05,510
into that PDF.

204
00:08:05,510 --> 00:08:08,210
We have exceleratr that will
take the data and output it

205
00:08:08,210 --> 00:08:09,890
in a reusable format
if people want

206
00:08:09,890 --> 00:08:11,420
to do additional calculations.

207
00:08:11,420 --> 00:08:15,440
And then we have ppxqc that does
our calculations in the report,

208
00:08:15,440 --> 00:08:18,590
creates the control charts,
calculates the run rules,

209
00:08:18,590 --> 00:08:20,480
creates histograms.

210
00:08:20,480 --> 00:08:22,090
And the beauty of
this approach is

211
00:08:22,090 --> 00:08:24,590
that now you've put all this
effort into creating this code,

212
00:08:24,590 --> 00:08:26,240
you've industrialized
it, you've tested it,

213
00:08:26,240 --> 00:08:28,115
you've documented it,
and you get to reuse it

214
00:08:28,115 --> 00:08:29,630
for other applications.

215
00:08:29,630 --> 00:08:33,450
As much as we have users
who use the reporting app,

216
00:08:33,450 --> 00:08:37,422
we also have tons of data
scientists and R users

217
00:08:37,422 --> 00:08:38,880
in our manufacturing
division that

218
00:08:38,880 --> 00:08:41,179
are now much more
easily able to connect

219
00:08:41,179 --> 00:08:42,620
to our analytics platform.

220
00:08:42,620 --> 00:08:45,410
And I get emails probably
once a week about this.

221
00:08:45,410 --> 00:08:47,570
And it's great that
they're able to reuse

222
00:08:47,570 --> 00:08:51,120
something we already created.

223
00:08:51,120 --> 00:08:53,990
Next, I want to talk
about environments.

224
00:08:53,990 --> 00:08:56,690
See, US President
Woodrow Wilson once said,

225
00:08:56,690 --> 00:09:00,170
"If you want to make enemies,
try to change something."

226
00:09:00,170 --> 00:09:01,940
Data scientist
Marcus Adams says,

227
00:09:01,940 --> 00:09:04,652
"If you want to make errors,
try to change environments."

228
00:09:04,652 --> 00:09:06,860
Because when you talk about
a production environment,

229
00:09:06,860 --> 00:09:10,830
that implies that there is also
a non-production environment.

230
00:09:10,830 --> 00:09:13,640
And you may have more or
less than what's shown here.

231
00:09:13,640 --> 00:09:15,530
You know, you have
dev, test, prod.

232
00:09:15,530 --> 00:09:17,522
You may also have
a QC environment.

233
00:09:17,522 --> 00:09:18,980
But the important
thing is you want

234
00:09:18,980 --> 00:09:22,490
to separate from where you're
making changes to where people

235
00:09:22,490 --> 00:09:24,170
are actually using your code.

236
00:09:24,170 --> 00:09:26,540
You don't want to be
testing things out,

237
00:09:26,540 --> 00:09:29,403
you know, tweaking things
here and there all the time.

238
00:09:29,403 --> 00:09:31,070
When you're in a
production environment,

239
00:09:31,070 --> 00:09:32,840
you have a certain
level of stability.

240
00:09:32,840 --> 00:09:34,610
And as you move from
development, test,

241
00:09:34,610 --> 00:09:36,860
to production, you want
things to be more controlled--

242
00:09:36,860 --> 00:09:39,170
more tested, more stable.

243
00:09:39,170 --> 00:09:41,540
People have to be able to
rely on this app to be there

244
00:09:41,540 --> 00:09:43,392
and work in a consistent manner.

245
00:09:43,392 --> 00:09:45,350
And I'll say something
that's a little contentious.

246
00:09:45,350 --> 00:09:47,150
There are no production apps.

247
00:09:47,150 --> 00:09:49,730
There are only apps in a
production environment.

248
00:09:49,730 --> 00:09:51,230
And that production
environment, you

249
00:09:51,230 --> 00:09:53,390
have to define its requirements.

250
00:09:53,390 --> 00:09:55,580
And those requirements
come from how you're

251
00:09:55,580 --> 00:09:57,660
going to use your application.

252
00:09:57,660 --> 00:10:00,020
Now maybe you have
least requirements

253
00:10:00,020 --> 00:10:02,390
and low expectations,
kind of like going

254
00:10:02,390 --> 00:10:03,800
to a Carrot Top show.

255
00:10:03,800 --> 00:10:07,170
But for us, who are
using it in a GMP manner,

256
00:10:07,170 --> 00:10:09,950
we have to have things like
audit trails, timeouts,

257
00:10:09,950 --> 00:10:11,630
tight change control.

258
00:10:11,630 --> 00:10:14,090
My point is, though,
you want to get away

259
00:10:14,090 --> 00:10:18,140
from this abstract mythical
land of production. Right?

260
00:10:18,140 --> 00:10:20,780
This will lead you to
arguments about whether R

261
00:10:20,780 --> 00:10:22,360
is ready for production.

262
00:10:22,360 --> 00:10:24,110
And it moves you into
these very specifics

263
00:10:24,110 --> 00:10:26,660
that you can start to articulate
exactly how are you going

264
00:10:26,660 --> 00:10:28,310
to satisfy these requirements.

265
00:10:28,310 --> 00:10:30,740
And you can take your
focus and make it

266
00:10:30,740 --> 00:10:33,650
on industrialization and
generalization of your code.

267
00:10:33,650 --> 00:10:35,210
And more importantly,
you can start

268
00:10:35,210 --> 00:10:39,970
to tackle the seven circles
of R reproducibility hell.

269
00:10:39,970 --> 00:10:42,250
I know what you're
asking, you're thinking,

270
00:10:42,250 --> 00:10:46,120
why does Beelzebub have a
R tattoo across his chest?

271
00:10:46,120 --> 00:10:47,230
I don't know.

272
00:10:47,230 --> 00:10:49,270
I would assume the
dark lord would be more

273
00:10:49,270 --> 00:10:50,890
closely associated with Python.

274
00:10:50,890 --> 00:10:53,628
But maybe he lost a bet
to the archangel Gabriel.

275
00:10:53,628 --> 00:10:54,170
I don't know.

276
00:10:54,170 --> 00:10:55,210
But here we are.

277
00:10:55,210 --> 00:10:57,760
And as Dante begins
his descent, he first

278
00:10:57,760 --> 00:10:59,350
comes across the Code Version.

279
00:10:59,350 --> 00:11:02,230
That is, your code you write
and is maintained by Git.

280
00:11:02,230 --> 00:11:06,070
Or if not by Git, this is
your final version or version

281
00:11:06,070 --> 00:11:09,550
final-final, final-final 2.0.

282
00:11:09,550 --> 00:11:11,940
In that top-level
code itself, we

283
00:11:11,940 --> 00:11:14,103
rely on certain
versions of packages.

284
00:11:14,103 --> 00:11:15,520
These are your top
level packages.

285
00:11:15,520 --> 00:11:18,910
Is it dplyr 1.0 or dplyr 0.8?

286
00:11:18,910 --> 00:11:22,510
And each of these packages,
in turn, have dependencies.

287
00:11:22,510 --> 00:11:24,790
And these are all the
names that you don't really

288
00:11:24,790 --> 00:11:26,540
ever pay attention to
as they're scrolling

289
00:11:26,540 --> 00:11:28,010
by when you install package--

290
00:11:28,010 --> 00:11:30,370
BH, Farva, Scales.

291
00:11:30,370 --> 00:11:33,280
But each of them also have
a version they require.

292
00:11:33,280 --> 00:11:36,220
And those all run on top
of an R language version.

293
00:11:36,220 --> 00:11:39,730
Are you using R 3.5 or R 4.0?

294
00:11:39,730 --> 00:11:42,100
There were breaking
changes between those.

295
00:11:42,100 --> 00:11:44,660
And moving down, there's
the runtime environment.

296
00:11:44,660 --> 00:11:47,170
And I think this is the
most under-appreciated one.

297
00:11:47,170 --> 00:11:49,900
So certainly, you want to manage
environment variables-- things

298
00:11:49,900 --> 00:11:51,772
like proxy settings.

299
00:11:51,772 --> 00:11:53,230
But you also have
to think, there is

300
00:11:53,230 --> 00:11:56,350
differences between running
in an interactive mode

301
00:11:56,350 --> 00:11:58,250
and running in batch.

302
00:11:58,250 --> 00:12:00,430
And when you don't have
access to the console,

303
00:12:00,430 --> 00:12:01,930
it makes a difference
whether you're

304
00:12:01,930 --> 00:12:04,120
running your application
out of RStudio

305
00:12:04,120 --> 00:12:06,070
or running it on
the Shiny Server.

306
00:12:06,070 --> 00:12:08,980
And then from there, you also
have external dependencies.

307
00:12:08,980 --> 00:12:10,930
These are your
systems libraries.

308
00:12:10,930 --> 00:12:13,600
Think about trying
to install rJava.

309
00:12:13,600 --> 00:12:16,203
You have to have that
JDK installed as well.

310
00:12:16,203 --> 00:12:17,620
Or if you've ever
had the pleasure

311
00:12:17,620 --> 00:12:19,390
of trying to install
LaTeX to make sure

312
00:12:19,390 --> 00:12:21,760
you can generate
those PDF reports.

313
00:12:21,760 --> 00:12:25,900
And then the innermost circle
is our operating system.

314
00:12:25,900 --> 00:12:29,860
Code runs differently
between Windows and Mac,

315
00:12:29,860 --> 00:12:33,100
and between Mac and Linux,
and Linux and Windows.

316
00:12:33,100 --> 00:12:36,100
That's why some packages don't
work on all operating systems.

317
00:12:36,100 --> 00:12:39,260
A simple example would be
that they use different path

318
00:12:39,260 --> 00:12:40,465
separators--

319
00:12:40,465 --> 00:12:42,910
a back slash or a forward slash.

320
00:12:42,910 --> 00:12:44,680
But then there's also
more subtle things,

321
00:12:44,680 --> 00:12:47,080
like how they render
visualizations.

322
00:12:47,080 --> 00:12:50,860
And I can tell you that we
faced every one of these circles

323
00:12:50,860 --> 00:12:52,390
in our journey.

324
00:12:52,390 --> 00:12:56,140
But I'll give you
one example now.

325
00:12:56,140 --> 00:12:59,050
See, here are some
wonderful control charts.

326
00:12:59,050 --> 00:13:01,180
And on the left,
we have the version

327
00:13:01,180 --> 00:13:02,710
in the development server.

328
00:13:02,710 --> 00:13:06,310
And on the right, we have the
version on our test server--

329
00:13:06,310 --> 00:13:09,580
identical code, but no
errors, no warnings,

330
00:13:09,580 --> 00:13:12,580
and most importantly, no
resplendent dark green line

331
00:13:12,580 --> 00:13:14,870
that shows the mean of the data.

332
00:13:14,870 --> 00:13:18,730
Now I want to point out
that this is a dark space

333
00:13:18,730 --> 00:13:19,330
green line.

334
00:13:19,330 --> 00:13:21,247
And that's important
because officially, there

335
00:13:21,247 --> 00:13:22,730
shouldn't be a space there.

336
00:13:22,730 --> 00:13:26,107
However, we were using
this code for years

337
00:13:26,107 --> 00:13:28,690
before we actually even deployed
it to the development server,

338
00:13:28,690 --> 00:13:29,780
and it worked.

339
00:13:29,780 --> 00:13:31,280
So you've got to
be asking yourself,

340
00:13:31,280 --> 00:13:34,600
how does a single space pose
such an existential threat

341
00:13:34,600 --> 00:13:36,310
to our application?

342
00:13:36,310 --> 00:13:40,850
Well, like most things in
life, timing is critical.

343
00:13:40,850 --> 00:13:43,900
You see, when you specify
version requirements

344
00:13:43,900 --> 00:13:47,470
for your packages,
everything downstream of that

345
00:13:47,470 --> 00:13:51,670
sits in this quantum
superpositions.

346
00:13:51,670 --> 00:13:53,740
The actual versions
that will get installed

347
00:13:53,740 --> 00:13:57,290
doesn't happen to actually
install those packages.

348
00:13:57,290 --> 00:14:03,370
So our ppxqc package relied
on ggplot2, of course.

349
00:14:03,370 --> 00:14:06,130
and that, in turn,
required scales.

350
00:14:06,130 --> 00:14:15,280
Now before November 19, 2019,
that resolved to scales 1.0.0

351
00:14:15,280 --> 00:14:18,100
That could handle
our dark space green.

352
00:14:18,100 --> 00:14:23,410
After November 19, 2019,
it resolved to scales 1.1.0

353
00:14:23,410 --> 00:14:26,050
And that changed how it
translated that string

354
00:14:26,050 --> 00:14:28,660
into a numeric value
to represent that color

355
00:14:28,660 --> 00:14:32,490
and inadvertently broke
backwards compatibility.

356
00:14:32,490 --> 00:14:36,630
We just so happened to deploy
to test in late November, 2019.

357
00:14:36,630 --> 00:14:40,230
Now we caught that because
we ran tests, like we should.

358
00:14:40,230 --> 00:14:42,090
But I'll tell you,
packrat wasn't

359
00:14:42,090 --> 00:14:43,440
sufficient to catch this.

360
00:14:43,440 --> 00:14:44,550
We tried.

361
00:14:44,550 --> 00:14:46,770
What we really need
here was CRAN snapshots,

362
00:14:46,770 --> 00:14:49,350
either from Microsoft's
CRAN snapshots,

363
00:14:49,350 --> 00:14:53,130
RStudio package manager, or
even internal CRAN snapshots.

364
00:14:53,130 --> 00:14:55,710
And to give the cherry on
top of this and a testament

365
00:14:55,710 --> 00:14:58,050
to really great
package maintainers,

366
00:14:58,050 --> 00:15:00,570
this problem only
existed about a month.

367
00:15:00,570 --> 00:15:02,430
By mid-January, this was solved.

368
00:15:02,430 --> 00:15:05,250
And so the moral of the
story is don't deploy early.

369
00:15:05,250 --> 00:15:08,570
Let the package maintainers
fix everything first.

370
00:15:08,570 --> 00:15:10,610
Now lastly, I want
to say, if you

371
00:15:10,610 --> 00:15:13,820
can't run your app without
direct intervention,

372
00:15:13,820 --> 00:15:16,060
it was never an
app to start with.

373
00:15:16,060 --> 00:15:18,550
Your app will suffer
the slings and arrows

374
00:15:18,550 --> 00:15:19,790
of outrageous fortune.

375
00:15:19,790 --> 00:15:22,810
And by that, I mean
crazy input you never

376
00:15:22,810 --> 00:15:25,270
expected users to have.

377
00:15:25,270 --> 00:15:29,270
Like, ...12 digits of
precision,... your code

378
00:15:29,270 --> 00:15:32,930
has to be robust to survive
the thousand natural shocks

379
00:15:32,930 --> 00:15:34,280
the app is heir to.

380
00:15:34,280 --> 00:15:37,550
And it has to do it without
your direct intervention.

381
00:15:37,550 --> 00:15:39,560
But just because you
can't directly intervene

382
00:15:39,560 --> 00:15:43,280
doesn't mean the app can't
collect information for you.

383
00:15:43,280 --> 00:15:45,290
First and foremost, log.

384
00:15:45,290 --> 00:15:47,270
There's plenty of
programs out there

385
00:15:47,270 --> 00:15:52,430
that help you with this--
futile.logger, log4r, logging.

386
00:15:52,430 --> 00:15:55,610
It's one thing to log errors in
the crashes in the stack trace

387
00:15:55,610 --> 00:15:58,100
when that happens, but
you also want context.

388
00:15:58,100 --> 00:16:00,410
Your app is kinda like a kid too.

389
00:16:00,410 --> 00:16:02,300
You don't want just your
teachers calling you

390
00:16:02,300 --> 00:16:03,380
when something bad happens.

391
00:16:03,380 --> 00:16:04,940
You want to know the
good things that happen.

392
00:16:04,940 --> 00:16:06,410
You want to know how
people are using it.

393
00:16:06,410 --> 00:16:07,452
What are they submitting?

394
00:16:07,452 --> 00:16:10,680
What are the queries
they're looking for?

395
00:16:10,680 --> 00:16:11,970
And you know what?

396
00:16:11,970 --> 00:16:13,545
It's kind of like your child.

397
00:16:13,545 --> 00:16:15,670
It really is because you
put a lot of work into it.

398
00:16:15,670 --> 00:16:18,480
And so like a good child,
also make it call home.

399
00:16:18,480 --> 00:16:22,230
Use things like Google
Analytics to let you know who

400
00:16:22,230 --> 00:16:24,780
and where this
app is being used.

401
00:16:24,780 --> 00:16:28,710
Google Analytics tags are fairly
simple to copy some JavaScript

402
00:16:28,710 --> 00:16:30,540
into your UI code,
and then you get

403
00:16:30,540 --> 00:16:33,330
to see all these analytics about
how your code is being used.

404
00:16:33,330 --> 00:16:34,850
You can see peak volumes.

405
00:16:34,850 --> 00:16:37,350
You can see what time of year
this application's being used.

406
00:16:37,350 --> 00:16:41,220
Maybe you want to scale up
your production servers.

407
00:16:41,220 --> 00:16:42,930
And lastly, you
may actually want

408
00:16:42,930 --> 00:16:46,005
to have your application
adopt to its environment.

409
00:16:46,005 --> 00:16:47,700
There's some great
packages out there

410
00:16:47,700 --> 00:16:49,230
that allow you to do just this.

411
00:16:49,230 --> 00:16:52,080
The config and secrets
package do just that.

412
00:16:52,080 --> 00:16:54,332
In a simple example,
you may-- for us,

413
00:16:54,332 --> 00:16:56,790
we needed to show a banner in
our dev and test environments

414
00:16:56,790 --> 00:16:58,500
that said, this is
not for official use.

415
00:16:58,500 --> 00:17:01,170
But more complex for us
was password management

416
00:17:01,170 --> 00:17:02,550
between the environments.

417
00:17:02,550 --> 00:17:04,920
You see, for us, each
of our environments,

418
00:17:04,920 --> 00:17:06,714
we had a service account.

419
00:17:06,714 --> 00:17:08,339
And that service
account had a password

420
00:17:08,339 --> 00:17:11,339
that connected to a different
database for each environment.

421
00:17:11,339 --> 00:17:13,230
And our dev
environment should not

422
00:17:13,230 --> 00:17:16,050
have access to our production
environment database.

423
00:17:16,050 --> 00:17:18,450
And our production environment
should not have access

424
00:17:18,450 --> 00:17:20,040
to our dev database.

425
00:17:20,040 --> 00:17:21,839
Furthermore, it was a
security requirement

426
00:17:21,839 --> 00:17:25,829
that we could not store these
passwords in clear text.

427
00:17:25,829 --> 00:17:27,300
And I'll say this,
that credentials

428
00:17:27,300 --> 00:17:30,390
and secrets management
is such a deep topic.

429
00:17:30,390 --> 00:17:32,440
I am, by no means,
an expert on it.

430
00:17:32,440 --> 00:17:35,910
But I'll only share what we
did because that solution was

431
00:17:35,910 --> 00:17:37,800
inspired by a hallway
conversation

432
00:17:37,800 --> 00:17:40,290
I had with the R-Podcaster
himself, Eric Nantz,

433
00:17:40,290 --> 00:17:43,740
at R/Pharma 2019.

434
00:17:43,740 --> 00:17:47,230
When our client, the
UI, contacts our server,

435
00:17:47,230 --> 00:17:52,140
we look at the URL requested,
specifically the subdomain.

436
00:17:52,140 --> 00:17:53,850
And this is great
because we actually

437
00:17:53,850 --> 00:17:56,760
have multiple production servers
sitting behind an Application

438
00:17:56,760 --> 00:17:57,660
Load Balancer.

439
00:17:57,660 --> 00:17:59,340
And so by looking
at that subdomain,

440
00:17:59,340 --> 00:18:02,520
is it shiny dev, shiny
tests, or just shiny

441
00:18:02,520 --> 00:18:04,000
for a production environment?

442
00:18:04,000 --> 00:18:05,730
We can then use
the config package

443
00:18:05,730 --> 00:18:09,060
to go grab the correct
parameters from a YAML file.

444
00:18:09,060 --> 00:18:14,160
Specifically, for us, that is
the ID of the service account,

445
00:18:14,160 --> 00:18:16,020
the database to which
we should connect,

446
00:18:16,020 --> 00:18:18,390
and the name of the
secret in our vault

447
00:18:18,390 --> 00:18:20,070
that holds the password.

448
00:18:20,070 --> 00:18:22,950
See, we've encrypted those
passwords in the vault.

449
00:18:22,950 --> 00:18:26,610
And with the server's
individual private SSH keys,

450
00:18:26,610 --> 00:18:28,740
they can decrypt
that password and use

451
00:18:28,740 --> 00:18:32,430
that to go grab the data
from the correct database.

452
00:18:32,430 --> 00:18:36,240
And this is really
useful because we

453
00:18:36,240 --> 00:18:39,870
can encrypt the password
and make a commit to our

454
00:18:39,870 --> 00:18:41,220
Git repository.

455
00:18:41,220 --> 00:18:43,980
And only a few developers
need to know those passwords.

456
00:18:43,980 --> 00:18:47,100
And only those servers,
when we deploy them,

457
00:18:47,100 --> 00:18:49,440
should be able to
access those passwords.

458
00:18:49,440 --> 00:18:52,530
For rotating the passwords,
we just make a pull request

459
00:18:52,530 --> 00:18:54,840
with the updated password,
and that can be deployed out

460
00:18:54,840 --> 00:18:56,940
to the proper server.

461
00:18:56,940 --> 00:18:57,630
And I get it.

462
00:18:57,630 --> 00:19:01,310
Password management
is not exciting.

463
00:19:01,310 --> 00:19:03,110
But deploying is.

464
00:19:03,110 --> 00:19:04,220
It is totally worth it.

465
00:19:04,220 --> 00:19:06,530
And I admit-- my
head jerks every time

466
00:19:06,530 --> 00:19:09,560
I hear the word production
in a presentation title.

467
00:19:09,560 --> 00:19:12,590
But getting there is not all
natural language processing

468
00:19:12,590 --> 00:19:13,970
and random forest.

469
00:19:13,970 --> 00:19:16,760
And hopefully, you realize by
now, actually, most of getting

470
00:19:16,760 --> 00:19:18,230
there is not.

471
00:19:18,230 --> 00:19:20,660
What I've talked about
today really only even

472
00:19:20,660 --> 00:19:22,040
scratches the surface.

473
00:19:22,040 --> 00:19:25,610
Just know, though, you
can use R and shiny

474
00:19:25,610 --> 00:19:27,030
in a production environment.

475
00:19:27,030 --> 00:19:29,450
We are not even
the first to do so.

476
00:19:29,450 --> 00:19:32,240
Just last year, Heather
and Jacqueline Nolis

477
00:19:32,240 --> 00:19:35,640
at RStudio::conf talked
about how T-Mobile does it.

478
00:19:35,640 --> 00:19:39,420
We are just yet another
example of how you can do it.

479
00:19:39,420 --> 00:19:41,120
And if you need to, namedrop.

480
00:19:41,120 --> 00:19:42,890
We are a Fortune 500 company.

481
00:19:42,890 --> 00:19:46,810
And we are using it for a very
important reporting process.

482
00:19:46,810 --> 00:19:50,080
Look-- putting a shiny
app into production

483
00:19:50,080 --> 00:19:54,650
is like playing the old
computer game, The Oregon Trail.

484
00:19:54,650 --> 00:19:57,100
Now you're not
guaranteed to succeed.

485
00:19:57,100 --> 00:19:58,360
It might not be pretty.

486
00:19:58,360 --> 00:19:59,860
And it might be hard.

487
00:19:59,860 --> 00:20:00,980
But it can be done.

488
00:20:00,980 --> 00:20:02,920
Others have done it before you.

489
00:20:02,920 --> 00:20:05,860
You just need to figure
out how to do it.

490
00:20:05,860 --> 00:20:08,140
And of course, avoid dysentery.

491
00:20:08,140 --> 00:20:10,990
But that's good advice,
even beyond developing

492
00:20:10,990 --> 00:20:12,400
shiny applications.

493
00:20:12,400 --> 00:20:15,850
And like those pioneers
crossing the Rocky Mountains,

494
00:20:15,850 --> 00:20:21,310
we too have crossed
over, figured out how,

495
00:20:21,310 --> 00:20:24,310
and reached the top of the
mountain of production.

496
00:20:24,310 --> 00:20:27,250
And as we look out
over this vista,

497
00:20:27,250 --> 00:20:29,600
I'll leave you with these words.

498
00:20:29,600 --> 00:20:31,810
You can't always
code what you want,

499
00:20:31,810 --> 00:20:34,300
but if you build
sometimes you might just

500
00:20:34,300 --> 00:20:38,110
find you code what you need.

501
00:20:38,110 --> 00:20:39,220
Thank you for your time.

502
00:20:39,220 --> 00:20:41,860
I hope you got something
you needed from this talk.

503
00:20:41,860 --> 00:20:44,110
And I hope you enjoy the
rest of the conference.

504
00:20:44,110 --> 00:20:45,860
Thank you.
