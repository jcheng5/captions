1
00:00:07,870 --> 00:00:10,000
Imagine you're an
Economics student

2
00:00:10,000 --> 00:00:13,000
and it's the start
of the academic year.

3
00:00:13,000 --> 00:00:16,300
You're sitting in one of these
chairs in the lecture venue

4
00:00:16,300 --> 00:00:20,470
and your lecturer is talking
about changes in unemployment

5
00:00:20,470 --> 00:00:23,020
rates and productivity.

6
00:00:23,020 --> 00:00:27,100
and brings up this graph from
your economics textbook showing

7
00:00:27,100 --> 00:00:30,410
the trends in change over time.

8
00:00:30,410 --> 00:00:34,630
Well, having just
lived through 2020,

9
00:00:34,630 --> 00:00:36,820
you likely know
someone or know someone

10
00:00:36,820 --> 00:00:38,950
who knows someone,
who lost their job

11
00:00:38,950 --> 00:00:41,500
due to the COVID pandemic.

12
00:00:41,500 --> 00:00:45,520
And your eyes immediately averse
to this part of the graph.

13
00:00:45,520 --> 00:00:47,510
What's going on here?

14
00:00:47,510 --> 00:00:49,600
What would this
graph look like if we

15
00:00:49,600 --> 00:00:52,690
could include more recent data?

16
00:00:52,690 --> 00:00:55,030
Wouldn't it be great
if your lecturer

17
00:00:55,030 --> 00:00:58,830
could draw on a relevant,
recent experience

18
00:00:58,830 --> 00:01:02,070
to make the teaching
more engaging

19
00:01:02,070 --> 00:01:06,710
and also have the textbook
resources to support this?

20
00:01:06,710 --> 00:01:10,820
The problem is this figure
from an economics textbook

21
00:01:10,820 --> 00:01:14,570
was manually produced
in proprietary software

22
00:01:14,570 --> 00:01:16,670
where each element
was individually

23
00:01:16,670 --> 00:01:20,180
placed by a designer
according to their stylesheet.

24
00:01:20,180 --> 00:01:24,190
It is very time
intensive and expensive.

25
00:01:24,190 --> 00:01:27,700
Updating and reproducing
figures such as this

26
00:01:27,700 --> 00:01:30,280
is one of the key
contributing factors

27
00:01:30,280 --> 00:01:35,730
to the really slow revision
cycles of such a textbook.

28
00:01:35,730 --> 00:01:39,150
Our world is rapidly
advancing and changing

29
00:01:39,150 --> 00:01:41,700
and although we may
have the data available,

30
00:01:41,700 --> 00:01:44,130
our educational
resources quickly

31
00:01:44,130 --> 00:01:49,060
become outdated, and likely
stay so for several years.

32
00:01:49,060 --> 00:01:50,910
This is not a
problem that is only

33
00:01:50,910 --> 00:01:54,590
common to the educational
publishing industry.

34
00:01:54,590 --> 00:01:58,360
How can we invigorate
such a traditional process

35
00:01:58,360 --> 00:02:00,900
to overcome this?

36
00:02:00,900 --> 00:02:04,470
My name is Megan Beckett,
I'm a data scientist

37
00:02:04,470 --> 00:02:06,270
from Cape Town, South Africa.

38
00:02:06,270 --> 00:02:10,560
And I'd like to tell you about
how we at Exegetic Analytics

39
00:02:10,560 --> 00:02:13,110
partnered with a
publishing company

40
00:02:13,110 --> 00:02:17,280
in order to prototype a pipeline
to automatically produce

41
00:02:17,280 --> 00:02:21,470
figures for an
economics textbook.

42
00:02:21,470 --> 00:02:23,750
There are thousands
of these images

43
00:02:23,750 --> 00:02:26,480
and each has been
meticulously, manually

44
00:02:26,480 --> 00:02:30,710
handmade by the designers
according to their stylesheet.

45
00:02:30,710 --> 00:02:33,080
The first question the
publishing house came to me

46
00:02:33,080 --> 00:02:36,200
with was, can you
automate this so

47
00:02:36,200 --> 00:02:38,990
that we can easily update them?

48
00:02:38,990 --> 00:02:43,530
Well, with R and the
Tidyverse, of course we can.

49
00:02:43,530 --> 00:02:45,750
The first step in the
process was therefore

50
00:02:45,750 --> 00:02:49,790
to figure out an
automated pipeline.

51
00:02:49,790 --> 00:02:52,460
We started out with
the data in Excel files

52
00:02:52,460 --> 00:02:56,510
and various other sources
which are ingested into Google

53
00:02:56,510 --> 00:02:59,870
Sheets as a central repository.

54
00:02:59,870 --> 00:03:04,460
The reason for using Google
Sheets instead of a database

55
00:03:04,460 --> 00:03:06,290
was that we still
wanted it to be easily

56
00:03:06,290 --> 00:03:09,110
accessible to
non-technical users

57
00:03:09,110 --> 00:03:14,460
so they could also access the
data and update it as needed.

58
00:03:14,460 --> 00:03:18,000
Each figure is being governed
by a central R script where

59
00:03:18,000 --> 00:03:22,890
the data is read in, the
figure produced in ggplot,

60
00:03:22,890 --> 00:03:26,910
and then the main
output focus was SVG.

61
00:03:26,910 --> 00:03:29,970
However, with such
an automated workflow

62
00:03:29,970 --> 00:03:32,790
we can also output
multiple formats,

63
00:03:32,790 --> 00:03:36,930
useful in the various publishing
platforms, whether it's iPad,

64
00:03:36,930 --> 00:03:39,240
print, or the web.

65
00:03:39,240 --> 00:03:42,810
Furthermore by taking
advantage of the plotly library

66
00:03:42,810 --> 00:03:46,020
and adding a single line
of code to R scripts,

67
00:03:46,020 --> 00:03:50,550
we can also create interactive
versions of each figure

68
00:03:50,550 --> 00:03:52,920
for the web, further
enhancing the teaching

69
00:03:52,920 --> 00:03:56,010
and learning experience.

70
00:03:56,010 --> 00:03:59,220
This entire process is
wrapped up within R package

71
00:03:59,220 --> 00:04:03,750
with several helper functions
to help automate this pipeline.

72
00:04:03,750 --> 00:04:06,720
We we get to integrating
with the publishing houses

73
00:04:06,720 --> 00:04:07,920
processes.

74
00:04:07,920 --> 00:04:09,240
This will likely become an API.

75
00:04:11,860 --> 00:04:14,320
So we tick the box
of figuring out

76
00:04:14,320 --> 00:04:17,470
how to automate this pipeline
so that the graphs can

77
00:04:17,470 --> 00:04:19,890
be easily updated.

78
00:04:19,890 --> 00:04:23,650
But the next question
they came with was, well,

79
00:04:23,650 --> 00:04:26,960
can you make them look
as good as our originals?

80
00:04:26,960 --> 00:04:29,870
As publishers, it was
very important to them

81
00:04:29,870 --> 00:04:32,450
that the figures look
good for teaching,

82
00:04:32,450 --> 00:04:35,120
that they comply to
their style guidelines,

83
00:04:35,120 --> 00:04:37,100
and that they were
virtually indistinguishable

84
00:04:37,100 --> 00:04:40,240
from the originals.

85
00:04:40,240 --> 00:04:42,100
The second part of
the project therefore

86
00:04:42,100 --> 00:04:44,680
focused on the aesthetics.

87
00:04:44,680 --> 00:04:49,020
And this is where ggplot
really came to the party.

88
00:04:49,020 --> 00:04:50,670
And it's also a
part of the project

89
00:04:50,670 --> 00:04:53,780
that I thoroughly enjoyed.

90
00:04:53,780 --> 00:04:57,320
On the left hand side here,
you can see an example piece

91
00:04:57,320 --> 00:05:00,290
from the stylesheet that the
designers worked with in order

92
00:05:00,290 --> 00:05:02,690
to produce the figures.

93
00:05:02,690 --> 00:05:06,030
This needed to be
translated into code.

94
00:05:06,030 --> 00:05:08,910
The vast majority of the
aesthetics of the figures

95
00:05:08,910 --> 00:05:12,970
was controlled with a
custom ggplot theme.

96
00:05:12,970 --> 00:05:15,960
You are shown a simplified
version on the right hand side

97
00:05:15,960 --> 00:05:18,440
to demonstrate what
I'm talking about.

98
00:05:18,440 --> 00:05:23,570
We started out with
the base classic theme

99
00:05:23,570 --> 00:05:25,310
and then built upon that.

100
00:05:25,310 --> 00:05:28,460
Where each specification in
the visual style sheet

101
00:05:28,460 --> 00:05:33,420
was translated into code as
a specification to the theme.

102
00:05:33,420 --> 00:05:36,830
For example, the font families,
the point sizes, colors

103
00:05:36,830 --> 00:05:41,000
and lines, and even the spacing
around all of the elements.

104
00:05:41,000 --> 00:05:43,310
It really is quite
incredible how much

105
00:05:43,310 --> 00:05:49,400
you can control the output
of your ggplot figures.

106
00:05:49,400 --> 00:05:53,690
I'd like to show you some of
the outputs of what we achieved.

107
00:05:53,690 --> 00:05:57,470
On the left hand side, you can
see the original meticulously

108
00:05:57,470 --> 00:05:59,580
manual plot.

109
00:05:59,580 --> 00:06:02,430
The purpose here is not to read
and understand these graphs

110
00:06:02,430 --> 00:06:05,650
but rather to make a
comparison between this

111
00:06:05,650 --> 00:06:09,540
and the aesthetically automated.

112
00:06:09,540 --> 00:06:11,520
This here is an example
from the beginning,

113
00:06:11,520 --> 00:06:15,640
from the economics lecture
with an additional plot below.

114
00:06:15,640 --> 00:06:18,700
If you do spot any
differences, please do tweet me

115
00:06:18,700 --> 00:06:20,280
as I do really love doing this.

116
00:06:22,850 --> 00:06:26,300
Here is a second example, and
what I want to point out here

117
00:06:26,300 --> 00:06:28,910
are some deliberate differences.

118
00:06:28,910 --> 00:06:32,450
You might have noticed this in
the previous graph as well,

119
00:06:32,450 --> 00:06:35,540
but there are some
dotted lines, blue lines

120
00:06:35,540 --> 00:06:39,530
that show the trends for
different time periods.

121
00:06:39,530 --> 00:06:41,900
When I calculated
these trends from the data

122
00:06:41,900 --> 00:06:43,940
and plotted them on the graph.

123
00:06:43,940 --> 00:06:47,480
I noticed a stark
difference particularly

124
00:06:47,480 --> 00:06:50,930
for the 18th century
as indicated here.

125
00:06:50,930 --> 00:06:54,800
What I realized then is that
the designer had visually

126
00:06:54,800 --> 00:06:58,130
looked at the data and
placed the trend line by hand

127
00:06:58,130 --> 00:07:00,660
according to what
they thought was best.

128
00:07:00,660 --> 00:07:03,480
This is very error prone.

129
00:07:03,480 --> 00:07:08,540
So not only is our plot on the
right aesthetically automated

130
00:07:08,540 --> 00:07:11,570
but it is also more
accurate than the original

131
00:07:11,570 --> 00:07:13,775
as it is derived
directly from the data.

132
00:07:16,720 --> 00:07:18,570
This third example
was really quite

133
00:07:18,570 --> 00:07:22,860
a fun challenge to solve
specifically around the layout

134
00:07:22,860 --> 00:07:26,610
and how we placed these
dotted gray lines extending

135
00:07:26,610 --> 00:07:29,910
from points on the top graph
to corresponding points

136
00:07:29,910 --> 00:07:31,980
on the bottom graph.

137
00:07:31,980 --> 00:07:36,540
As I mentioned, about 80% of
the aesthetics of the plots

138
00:07:36,540 --> 00:07:39,690
was achieved with
a ggplot theme.

139
00:07:39,690 --> 00:07:46,110
However, here I also use the
gridextra, ggtext, and gtable

140
00:07:46,110 --> 00:07:53,030
packages which really power
the layout engine of ggplot.

141
00:07:53,030 --> 00:07:56,090
I was able to get into the
underlying grobs and grid

142
00:07:56,090 --> 00:07:59,150
in order to produce
such a layout.

143
00:07:59,150 --> 00:08:01,325
I really was quite
proud of this image.

144
00:08:04,390 --> 00:08:07,570
This last example here
shows some trend lines

145
00:08:07,570 --> 00:08:09,280
for different cities.

146
00:08:09,280 --> 00:08:11,500
What I want you to
take note of there

147
00:08:11,500 --> 00:08:16,200
are the icons used in the
legend called key glyphs.

148
00:08:16,200 --> 00:08:20,210
These are not standard key
glyphs that come with ggplot.

149
00:08:20,210 --> 00:08:24,500
Typically each geom has
an associated function

150
00:08:24,500 --> 00:08:29,190
that would draw the key glyphs
in the legend if it's required.

151
00:08:29,190 --> 00:08:33,950
So for example, geom point has
a key function called draw,

152
00:08:33,950 --> 00:08:36,980
and a score key,
and score point that

153
00:08:36,980 --> 00:08:42,299
will then add points to the
legend as icons if needed.

154
00:08:42,299 --> 00:08:44,990
So what we did was
look at the ggplot code

155
00:08:44,990 --> 00:08:47,960
for how these key glyph
functions work and create

156
00:08:47,960 --> 00:08:54,410
some of our own custom functions
to manually draw these icons.

157
00:08:54,410 --> 00:08:57,560
So for example, this
one is a key path

158
00:08:57,560 --> 00:09:01,370
with a key symbol placed on the
right hand side of that path

159
00:09:01,370 --> 00:09:04,040
to obtain this icon.

160
00:09:04,040 --> 00:09:11,160
These key glyph functions are
being passed to the geom layer

161
00:09:11,160 --> 00:09:16,110
within the ggplot
code so that we

162
00:09:16,110 --> 00:09:21,310
can update these key legends
according to how they original

163
00:09:21,310 --> 00:09:23,600
look.

164
00:09:23,600 --> 00:09:26,090
Having done this,
the publishing house

165
00:09:26,090 --> 00:09:28,670
were not quite impressed
with our skills

166
00:09:28,670 --> 00:09:32,060
and try to believe in us that
we could actually do this.

167
00:09:32,060 --> 00:09:34,910
The next question then
was, OK, so can you

168
00:09:34,910 --> 00:09:37,400
do this in all languages?

169
00:09:37,400 --> 00:09:39,830
This economics textbook
has been translated

170
00:09:39,830 --> 00:09:42,120
into several languages
and so we needed

171
00:09:42,120 --> 00:09:46,190
to figure out how to handle
the automatic translation

172
00:09:46,190 --> 00:09:48,130
of these figures
in our pipeline.

173
00:09:50,770 --> 00:09:53,980
This third step will be
focused on translation.

174
00:09:53,980 --> 00:09:56,920
And the solution
that we came up with

175
00:09:56,920 --> 00:09:59,530
was to capture the
translated strings

176
00:09:59,530 --> 00:10:01,750
in the yaml file
which is then read

177
00:10:01,750 --> 00:10:04,750
into the R script for the figure.

178
00:10:04,750 --> 00:10:07,570
Yaml, if you're not
familiar with it,

179
00:10:07,570 --> 00:10:10,480
used to stand for yet
another markup language

180
00:10:10,480 --> 00:10:13,840
and it's now become the
recursive acronym yaml ain't

181
00:10:13,840 --> 00:10:17,500
markup language to
specifically distinguish

182
00:10:17,500 --> 00:10:20,440
its use as being
data oriented rather

183
00:10:20,440 --> 00:10:25,690
than a traditional
markup for documents.

184
00:10:25,690 --> 00:10:28,150
It's often used in
configuration files

185
00:10:28,150 --> 00:10:30,430
and you might have
seen it or noticed it

186
00:10:30,430 --> 00:10:32,920
at the top of R
Markdown documents.

187
00:10:32,920 --> 00:10:37,430
That's yaml, it's very
structured and importantly,

188
00:10:37,430 --> 00:10:39,600
it's human readable.

189
00:10:39,600 --> 00:10:42,810
This is important for us because
we needed the translators who

190
00:10:42,810 --> 00:10:46,320
are non-technical to be able
to easily work with the format

191
00:10:46,320 --> 00:10:49,200
in order to capture
the translated strings.

192
00:10:49,200 --> 00:10:52,590
But at the same time,
I have a structure that

193
00:10:52,590 --> 00:10:54,780
has a clear format
to it and it's

194
00:10:54,780 --> 00:10:59,830
data oriented to work with in
R. On the left hand side here,

195
00:10:59,830 --> 00:11:03,640
you can see an example
from one of our yaml files.

196
00:11:03,640 --> 00:11:08,010
Each of the languages is denoted
by an abbreviated two letter

197
00:11:08,010 --> 00:11:08,970
word.

198
00:11:08,970 --> 00:11:12,510
For example, en for English.

199
00:11:12,510 --> 00:11:15,390
Each of the labels that
then requires translation

200
00:11:15,390 --> 00:11:18,300
is assigned a
variable name that's

201
00:11:18,300 --> 00:11:20,230
common across all
of the languages.

202
00:11:20,230 --> 00:11:23,490
For example x-axis label.

203
00:11:23,490 --> 00:11:25,920
The value for this
label is then the text

204
00:11:25,920 --> 00:11:29,340
that is the translated string.

205
00:11:29,340 --> 00:11:31,695
For example, year,
ano, of wuosi.

206
00:11:34,320 --> 00:11:36,630
In R we then have
the yaml package

207
00:11:36,630 --> 00:11:38,800
to work with these files.

208
00:11:38,800 --> 00:11:44,670
So the strings are returned to
R using the function read _yaml

209
00:11:44,670 --> 00:11:49,870
as a list of lists which are
then converted to a data frame.

210
00:11:49,870 --> 00:11:53,140
Within the ggplot code,
each of the labels

211
00:11:53,140 --> 00:11:56,380
that requires translation
is being substituted

212
00:11:56,380 --> 00:11:59,370
with that variable name.

213
00:11:59,370 --> 00:12:02,460
The list of languages
that needs to be generated

214
00:12:02,460 --> 00:12:05,520
is obtained from the first
level in the hierarchy

215
00:12:05,520 --> 00:12:07,140
of the yaml file.

216
00:12:07,140 --> 00:12:09,960
And then I iterate
over those languages

217
00:12:09,960 --> 00:12:13,290
and replace the variable names
with each translated string

218
00:12:13,290 --> 00:12:18,290
as we generate the output
for that translation.

219
00:12:18,290 --> 00:12:20,800
The fourth benefit
of this process

220
00:12:20,800 --> 00:12:24,580
was that it allowed us to
give the translators some more

221
00:12:24,580 --> 00:12:27,960
custom control over the labels.

222
00:12:27,960 --> 00:12:30,240
What I mean by this
is for example,

223
00:12:30,240 --> 00:12:34,920
in some cases needed some part
of the string to be in italics.

224
00:12:34,920 --> 00:12:37,300
For example, the units.

225
00:12:37,300 --> 00:12:39,790
With just English, this
is fairly straightforward

226
00:12:39,790 --> 00:12:42,580
to do within the R script.

227
00:12:42,580 --> 00:12:46,190
However, if we take multiple
languages into account,

228
00:12:46,190 --> 00:12:51,200
how do we know which part of the
string needs to be in italics?

229
00:12:51,200 --> 00:12:55,140
This is where I used
the ggtext package.

230
00:12:55,140 --> 00:12:57,080
This is a line from
the theme function

231
00:12:57,080 --> 00:13:01,490
which I shared earlier, where
we replaced the element text

232
00:13:01,490 --> 00:13:04,880
function with element markdown.

233
00:13:04,880 --> 00:13:07,880
What this enables is
that the translators

234
00:13:07,880 --> 00:13:10,880
can use simple markdown
in their strings

235
00:13:10,880 --> 00:13:14,120
which is then converted to
display the correct output

236
00:13:14,120 --> 00:13:15,870
in the final image.

237
00:13:15,870 --> 00:13:20,720
So for example, they could
enclose a unit in asterixis

238
00:13:20,720 --> 00:13:25,265
and this is then converted into
italics in the final output.

239
00:13:25,265 --> 00:13:29,220
This worked well forlabels
that were axis titles.

240
00:13:29,220 --> 00:13:30,770
However, we also
have many labels

241
00:13:30,770 --> 00:13:32,600
that require
translation that are

242
00:13:32,600 --> 00:13:37,070
placed on the plot with
geom label or geom text.

243
00:13:37,070 --> 00:13:39,470
In order to cater
for this, what I did

244
00:13:39,470 --> 00:13:43,010
was again use the ggtext
package and create

245
00:13:43,010 --> 00:13:46,910
a function that corresponds
with the original ggplot

246
00:13:46,910 --> 00:13:48,360
to override it.

247
00:13:48,360 --> 00:13:50,690
So for example,
geom text and here

248
00:13:50,690 --> 00:13:56,810
we use instead geom_richtext
which again enables translators

249
00:13:56,810 --> 00:13:59,990
to be able to put
simple markdown

250
00:13:59,990 --> 00:14:02,690
into the strings
that's been catered

251
00:14:02,690 --> 00:14:03,780
for in the final output.

252
00:14:06,840 --> 00:14:08,550
One of the really
interesting challenges

253
00:14:08,550 --> 00:14:11,970
to solve with the translation
was the different numbering

254
00:14:11,970 --> 00:14:14,190
systems for different
languages and how

255
00:14:14,190 --> 00:14:18,610
do we automatically cater
for this in a single R script.

256
00:14:18,610 --> 00:14:20,270
What do I mean by this?

257
00:14:20,270 --> 00:14:22,660
Well here you can
see three graphs

258
00:14:22,660 --> 00:14:24,670
in three different languages.

259
00:14:24,670 --> 00:14:27,430
What I want you to do is
take note of the y-axis

260
00:14:27,430 --> 00:14:30,580
and the format of
each of the numbers.

261
00:14:30,580 --> 00:14:32,860
On the left, we
have English and you

262
00:14:32,860 --> 00:14:37,140
can see that the 1,000
separator is a comma.

263
00:14:37,140 --> 00:14:40,780
We then have Spanish,
which has a space separator

264
00:14:40,780 --> 00:14:48,510
but only once the number is
more than four digits long.

265
00:14:48,510 --> 00:14:51,000
Then we have the
Finnish and here, you

266
00:14:51,000 --> 00:14:54,580
can see that the 1,000
separator is a space.

267
00:14:54,580 --> 00:14:58,290
So how do we cater for
this in the R script?

268
00:14:58,290 --> 00:15:02,550
The solution I came up with was
to create a number formatting

269
00:15:02,550 --> 00:15:07,530
function per language which
uses the number format function

270
00:15:07,530 --> 00:15:11,310
to specify what
the big mark should

271
00:15:11,310 --> 00:15:15,270
be for 1,000 separator
and the decimal mark

272
00:15:15,270 --> 00:15:18,750
whether it should be
a comma or a point.

273
00:15:18,750 --> 00:15:23,460
The key thing here is that
each function for each language

274
00:15:23,460 --> 00:15:26,640
has the same name as the two-
letter abbreviated version

275
00:15:26,640 --> 00:15:29,340
in the yaml file.

276
00:15:29,340 --> 00:15:33,390
This here shows English
compared to Finnish

277
00:15:33,390 --> 00:15:36,342
which is denoted by FI.

278
00:15:36,342 --> 00:15:41,960
The Spanish was a slightly more
involved example and function.

279
00:15:41,960 --> 00:15:45,770
And what I did here
was to iterate over

280
00:15:45,770 --> 00:15:49,970
the list of numbers supplied
as the labels and first check

281
00:15:49,970 --> 00:15:53,330
whether the number is more
than four digits long.

282
00:15:53,330 --> 00:15:56,840
If so, then it gets a
space and otherwise there's

283
00:15:56,840 --> 00:15:59,362
no space for the 1,000
separate operator.

284
00:16:02,140 --> 00:16:06,790
Within the ggplot code,
within the R script,

285
00:16:06,790 --> 00:16:08,440
the production of
each of the languages

286
00:16:08,440 --> 00:16:10,600
is handled within
for loop and as

287
00:16:10,600 --> 00:16:13,390
mentioned previously
this list of languages

288
00:16:13,390 --> 00:16:17,110
is obtained from the first
level heading in the yaml file.

289
00:16:17,110 --> 00:16:21,890
For example, en, es, fi.

290
00:16:21,890 --> 00:16:27,050
In the ggplot code, I then used
a very handy match.fun  function

291
00:16:27,050 --> 00:16:32,720
from base R that takes the
language input as a string

292
00:16:32,720 --> 00:16:35,330
and then uses the number
formatting function

293
00:16:35,330 --> 00:16:38,240
that corresponds with
that in order to format

294
00:16:38,240 --> 00:16:41,600
the numbers for the
y-axis according to what

295
00:16:41,600 --> 00:16:44,120
is needed for that language.

296
00:16:44,120 --> 00:16:46,850
This here shows the y-axis
but it can just as easily

297
00:16:46,850 --> 00:16:49,920
be done for the x-axis.

298
00:16:49,920 --> 00:16:52,080
Having figured this
last piece of the puzzle

299
00:16:52,080 --> 00:16:56,580
out on how to automatically
translate images

300
00:16:56,580 --> 00:17:00,510
within our pipeline, I then
went back to the publishers

301
00:17:00,510 --> 00:17:04,619
and heard a resounding,
let's do this from them.

302
00:17:04,619 --> 00:17:07,609
So we are now at a
stage in the process.

303
00:17:07,609 --> 00:17:12,890
We are figuring out how to
integrate with the publishing

304
00:17:12,890 --> 00:17:16,790
pipeline in order to
automatically and beautifully

305
00:17:16,790 --> 00:17:20,240
create thousands of images
for the economics textbook.

306
00:17:23,369 --> 00:17:25,829
Peeking into our workshop
from the perspective

307
00:17:25,829 --> 00:17:28,560
of the publishing
industry, what we have done

308
00:17:28,560 --> 00:17:31,050
may seem incomprehensible.

309
00:17:31,050 --> 00:17:33,810
But I hope what I have
demonstrated here

310
00:17:33,810 --> 00:17:36,930
is that, with a few
familiar tools applied

311
00:17:36,930 --> 00:17:40,620
in unconventional ways, you
can completely transform

312
00:17:40,620 --> 00:17:44,300
a conventional process.

313
00:17:44,300 --> 00:17:46,730
There are so many
industries and processes

314
00:17:46,730 --> 00:17:48,860
out there that are
still very manual

315
00:17:48,860 --> 00:17:51,740
and time intensive and
battling to keep up

316
00:17:51,740 --> 00:17:54,780
with our ever-changing world.

317
00:17:54,780 --> 00:17:57,000
They don't know it yet,
but they could really

318
00:17:57,000 --> 00:17:59,560
benefit from your skills.

319
00:17:59,560 --> 00:18:01,990
And from my experience,
they won't necessarily

320
00:18:01,990 --> 00:18:03,790
come knocking at your door.

321
00:18:03,790 --> 00:18:06,520
So sit up and take
notes of opportunities

322
00:18:06,520 --> 00:18:09,050
where you can really add value.

323
00:18:09,050 --> 00:18:12,920
For me, I'm thinking of those
economics students sitting

324
00:18:12,920 --> 00:18:16,370
in their lecture venue at the
start of the academic year.

325
00:18:16,370 --> 00:18:19,410
Not only would they have lived
through the previous year

326
00:18:19,410 --> 00:18:23,090
however bizarre and unusual it
might have been and come out

327
00:18:23,090 --> 00:18:28,590
different for it but now
the textbook can too.

328
00:18:28,590 --> 00:18:31,380
Thank you, I do look forward
to your thoughts and questions

329
00:18:31,380 --> 00:18:33,860
and please do get in touch.
