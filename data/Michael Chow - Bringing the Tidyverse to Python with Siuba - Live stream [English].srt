1
00:00:06,850 --> 00:00:08,600
MICHAEL CHOW: Hi, my
name is Michael Chow.

2
00:00:08,600 --> 00:00:11,203
And thanks for watching
this RStudio conf talk.

3
00:00:11,203 --> 00:00:12,620
I'll be going
through siuba, which

4
00:00:12,620 --> 00:00:15,380
is a port of dplyr to Python.

5
00:00:15,380 --> 00:00:17,270
So you're watching
RStudio conf, I'm guessing

6
00:00:17,270 --> 00:00:21,210
that you're on board with R
and dplyr for data analysis.

7
00:00:21,210 --> 00:00:24,980
And I've got to say, I love
R, but I also love Python.

8
00:00:24,980 --> 00:00:27,050
And depending on
the project or task,

9
00:00:27,050 --> 00:00:30,440
I've often found myself having
to switch between R and Python,

10
00:00:30,440 --> 00:00:33,410
or juggle both at the same time.

11
00:00:33,410 --> 00:00:35,780
And I'm guessing this isn't
a super unusual experience

12
00:00:35,780 --> 00:00:38,840
since Python is just
incredibly popular.

13
00:00:38,840 --> 00:00:42,500
If you look at Stack Overflow
posts, the predominant tool

14
00:00:42,500 --> 00:00:47,330
in Python for data analysis,
pandas accounts for about 3%

15
00:00:47,330 --> 00:00:48,710
of posts a month.

16
00:00:48,710 --> 00:00:51,080
This is just an
incredible amount.

17
00:00:51,080 --> 00:00:53,210
And so a lot of my
interactions have

18
00:00:53,210 --> 00:00:56,600
been with people who use
pandas for data analysis.

19
00:00:56,600 --> 00:00:59,750
But as time has gone on, I found
myself reaching more and more

20
00:00:59,750 --> 00:01:01,010
for dplyr.

21
00:01:01,010 --> 00:01:02,810
And I've really thought
a lot about that

22
00:01:02,810 --> 00:01:05,420
and tried to figure out
what's going on there.

23
00:01:05,420 --> 00:01:10,400
And to set the stage, I thought
I'd just use a dumb analogy.

24
00:01:10,400 --> 00:01:14,810
That pandas is a lot maybe
like a double decker bus.

25
00:01:14,810 --> 00:01:16,610
So this is in Hong Kong.

26
00:01:16,610 --> 00:01:19,170
And this thing's really
built for carrying capacity.

27
00:01:19,170 --> 00:01:21,800
If you have to ship
80 humans somewhere,

28
00:01:21,800 --> 00:01:23,210
this is your tool, right?

29
00:01:23,210 --> 00:01:26,300
You stack them on top of
each other you're golden.

30
00:01:26,300 --> 00:01:29,330
The challenge is that
it's cumbersome, right?

31
00:01:29,330 --> 00:01:30,590
It can't go everywhere.

32
00:01:30,590 --> 00:01:32,630
It's probably scary to back up.

33
00:01:32,630 --> 00:01:35,420
And in contrast, in
Hong Kong, there's

34
00:01:35,420 --> 00:01:40,220
another vehicle, the
mini bus or siuba

35
00:01:40,220 --> 00:01:43,340
that's the opposite
approach, so tiny capacity,

36
00:01:43,340 --> 00:01:46,910
holds like 16 people, and
it's just a terror on wheels.

37
00:01:46,910 --> 00:01:51,260
So the BBC describes it as
Hong Kong's wildest ride.

38
00:01:51,260 --> 00:01:53,450
And these things are just fast.

39
00:01:53,450 --> 00:01:56,600
They can go anywhere
and they can get you--

40
00:01:56,600 --> 00:01:58,770
they're super flexible.

41
00:01:58,770 --> 00:02:01,340
So I think that
really reminds me

42
00:02:01,340 --> 00:02:06,140
of dplyr that dplyr's incredible
for exploratory analysis.

43
00:02:06,140 --> 00:02:10,520
It can just get you to where
you want to go quickly.

44
00:02:10,520 --> 00:02:14,810
Pandas is great at computation
but can be a little bit

45
00:02:14,810 --> 00:02:17,670
cumbersome on the fly.

46
00:02:17,670 --> 00:02:20,870
So siuba aims to
be small but mighty

47
00:02:20,870 --> 00:02:24,380
by leveraging dplyr
like syntax in Python

48
00:02:24,380 --> 00:02:29,270
but doing computation behind
the scenes in pandas or SQL.

49
00:02:29,270 --> 00:02:31,730
And I've tried to live code
with siuba just of battle

50
00:02:31,730 --> 00:02:35,930
test it and make sure it's
ready for the big time.

51
00:02:35,930 --> 00:02:39,020
I think a big question
is what dplyr is really

52
00:02:39,020 --> 00:02:41,695
doing that's so useful?

53
00:02:41,695 --> 00:02:43,070
And to really
understand, we have

54
00:02:43,070 --> 00:02:45,500
to go back to
Hadley's 2014 talk,

55
00:02:45,500 --> 00:02:47,390
where he introduced dplyr.

56
00:02:47,390 --> 00:02:49,850
And he mentions
that analysts have

57
00:02:49,850 --> 00:02:52,730
two bottlenecks, a
cognitive bottleneck

58
00:02:52,730 --> 00:02:54,920
and a computational bottleneck.

59
00:02:54,920 --> 00:02:57,290
The computational one's
the most we think of,

60
00:02:57,290 --> 00:02:59,210
the one we think of
most often, which

61
00:02:59,210 --> 00:03:01,040
is as the data
becomes bigger, it

62
00:03:01,040 --> 00:03:02,720
takes longer to run the code.

63
00:03:02,720 --> 00:03:04,220
But intriguingly,
Hadley mentions,

64
00:03:04,220 --> 00:03:07,040
he thinks a lot about the
cognitive bottleneck, which

65
00:03:07,040 --> 00:03:09,440
is how should we
think about the data

66
00:03:09,440 --> 00:03:13,520
and describe what we want
to do to the data or code.

67
00:03:13,520 --> 00:03:16,760
And dplyr aims at this
cognitive bottleneck

68
00:03:16,760 --> 00:03:19,070
to help people
focus their thoughts

69
00:03:19,070 --> 00:03:22,850
and to give people
strategies for data analysis.

70
00:03:22,850 --> 00:03:26,720
It does this by slimming
down, taking this big space,

71
00:03:26,720 --> 00:03:29,870
and slimming down the
options that people have.

72
00:03:29,870 --> 00:03:33,410
So there are five simple verbs
and all of these critically

73
00:03:33,410 --> 00:03:36,710
can combine with an
operator group_by.

74
00:03:36,710 --> 00:03:40,280
All of these take a data
frame and return a data frame.

75
00:03:40,280 --> 00:03:44,010
And he mentions that overall,
it's a very constrained design,

76
00:03:44,010 --> 00:03:48,920
especially compared to
his previous tool, plyr.

77
00:03:48,920 --> 00:03:53,870
So siuba aims to let people
capture those dplyr-like thoughts

78
00:03:53,870 --> 00:03:58,520
and keep them while writing
dplyr syntax in Python

79
00:03:58,520 --> 00:04:02,450
and then doing the
computation in pandas.

80
00:04:02,450 --> 00:04:04,940
So the gist is siuba
lets you transfer

81
00:04:04,940 --> 00:04:07,280
your thoughts from R to Python.

82
00:04:11,280 --> 00:04:13,950
All right, so I'm going to try
to show three motivating cases,

83
00:04:13,950 --> 00:04:16,399
where it can be
tricky to transfer

84
00:04:16,399 --> 00:04:21,240
dplyr thoughts to pandas through
roadblocks that people hit.

85
00:04:21,240 --> 00:04:23,550
And I know it's
tempting to see dplyr

86
00:04:23,550 --> 00:04:25,390
and pandas is pretty similar.

87
00:04:25,390 --> 00:04:28,530
So in this example, they're
doing roughly the same thing

88
00:04:28,530 --> 00:04:30,580
and they're using
basically the same code.

89
00:04:30,580 --> 00:04:32,910
So it's a group summarize.

90
00:04:32,910 --> 00:04:35,010
We're calculating the
average of a column

91
00:04:35,010 --> 00:04:38,820
and we're renaming
the result average hp.

92
00:04:38,820 --> 00:04:42,390
And we get roughly
the same output.

93
00:04:42,390 --> 00:04:44,250
But it's also
worth noting if you

94
00:04:44,250 --> 00:04:47,080
take to somewhere like,
Twitter, or look around,

95
00:04:47,080 --> 00:04:49,020
you'll see some pretty
scathing reviews.

96
00:04:49,020 --> 00:04:52,710
So dplyr has forever
ruined pandas for me.

97
00:04:52,710 --> 00:04:58,075
Or Chelsea notes, every
picture shows pandas and chaos.

98
00:04:58,075 --> 00:05:00,450
And I think it's worth noting,
these people, I think they

99
00:05:00,450 --> 00:05:03,750
like pandas so this isn't a
straight critique of pandas.

100
00:05:03,750 --> 00:05:06,360
But it can be really
frustrating when

101
00:05:06,360 --> 00:05:09,150
you try to go from
one tool in the way

102
00:05:09,150 --> 00:05:12,590
it structures
thinking to another.

103
00:05:12,590 --> 00:05:14,940
And so I would say,
these three cases

104
00:05:14,940 --> 00:05:18,850
try to bring that to the
surface what's going on.

105
00:05:18,850 --> 00:05:20,700
The first roadblock is select.

106
00:05:20,700 --> 00:05:23,490
So select is really
a very basic action.

107
00:05:23,490 --> 00:05:24,990
You can choose columns.

108
00:05:24,990 --> 00:05:26,460
You can drop columns.

109
00:05:26,460 --> 00:05:29,820
You might match certain
columns or rename a column.

110
00:05:29,820 --> 00:05:33,060
And the trick is that
pandas uses different names

111
00:05:33,060 --> 00:05:34,210
for all these actions.

112
00:05:34,210 --> 00:05:38,640
So there are four different
methods one for each action.

113
00:05:38,640 --> 00:05:40,710
The other thing is
that sometimes they

114
00:05:40,710 --> 00:05:43,510
have funky arguments
you need to pass.

115
00:05:43,510 --> 00:05:45,960
So you might have to say
access equals 1 to say,

116
00:05:45,960 --> 00:05:47,820
oh, I want to do
this to the columns.

117
00:05:47,820 --> 00:05:49,800
Or you might have to
say columns equals.

118
00:05:49,800 --> 00:05:53,580
Those are different ways
of saying the same thing.

119
00:05:53,580 --> 00:05:57,030
The last is that sometimes you
have to use intense programming

120
00:05:57,030 --> 00:05:59,520
constructs like a
Lambda function,

121
00:05:59,520 --> 00:06:03,500
if you want to do things
like match on a string.

122
00:06:03,500 --> 00:06:07,190
In contrast, dplyr uses the
same verb for all these actions,

123
00:06:07,190 --> 00:06:08,810
select.

124
00:06:08,810 --> 00:06:12,140
And it's really easy to
change between what you're

125
00:06:12,140 --> 00:06:15,320
doing to go from keeping a
column to dropping a column,

126
00:06:15,320 --> 00:06:18,480
or even to combine
these actions together.

127
00:06:18,480 --> 00:06:22,190
And so this is a case, I think
of, where changing what you do

128
00:06:22,190 --> 00:06:24,620
requires changing
gears and shifting

129
00:06:24,620 --> 00:06:27,260
between these
different functions

130
00:06:27,260 --> 00:06:29,910
and methods in pandas.

131
00:06:29,910 --> 00:06:33,810
The second example is
I would say, group_by.

132
00:06:33,810 --> 00:06:34,650
And this is really--

133
00:06:34,650 --> 00:06:37,860
I would say grouping is
really a critical activity

134
00:06:37,860 --> 00:06:39,990
in data analysis in dplyr.

135
00:06:39,990 --> 00:06:43,920
And the pandas docs describe
some translations from R

136
00:06:43,920 --> 00:06:45,180
to pandas.

137
00:06:45,180 --> 00:06:46,800
And it looks pretty
straightforward,

138
00:06:46,800 --> 00:06:48,600
at least for these cases.

139
00:06:48,600 --> 00:06:51,660
But actually, I
would say group_by

140
00:06:51,660 --> 00:06:55,230
in dplyr and pandas use
radically different underlying

141
00:06:55,230 --> 00:06:56,590
grammars.

142
00:06:56,590 --> 00:06:58,470
So in this example,
on the left, I'm

143
00:06:58,470 --> 00:07:03,720
showing a filter in
pandas or a mutate.

144
00:07:03,720 --> 00:07:07,050
And note, there are two ways
of doing it or multiple ways,

145
00:07:07,050 --> 00:07:08,340
I should say.

146
00:07:08,340 --> 00:07:10,860
So you can use query,
that's the top left

147
00:07:10,860 --> 00:07:14,790
or eval on the top right,
or an alternative way

148
00:07:14,790 --> 00:07:17,730
to filter on the bottom
left to these blocks,

149
00:07:17,730 --> 00:07:22,680
or to mutate assign
on the bottom right.

150
00:07:22,680 --> 00:07:24,270
Critically, we can
ask what happens

151
00:07:24,270 --> 00:07:29,510
when we try to group_by
before these operations?

152
00:07:29,510 --> 00:07:33,260
And the answer is that
none of them work.

153
00:07:33,260 --> 00:07:38,510
And the trick is a group data
in pandas,a data frame

154
00:07:38,510 --> 00:07:43,670
group_by, actually doesn't have
even any of these methods on it

155
00:07:43,670 --> 00:07:47,750
to perform these operations,
except in one case, where

156
00:07:47,750 --> 00:07:50,360
the operation just fails.

157
00:07:50,360 --> 00:07:52,640
And this is probably
really surprising, I think,

158
00:07:52,640 --> 00:07:54,200
for dplyr users.

159
00:07:54,200 --> 00:07:58,340
The trick ends up being have to
shift the groupby from outside

160
00:07:58,340 --> 00:08:01,032
of the verb to inside it.

161
00:08:01,032 --> 00:08:02,490
So you basically
have to move group

162
00:08:02,490 --> 00:08:05,930
by into your column operations.

163
00:08:05,930 --> 00:08:07,550
And again, this isn't
necessarily bad.

164
00:08:07,550 --> 00:08:11,690
And it means pandas can still do
the same computations as dplyr.

165
00:08:11,690 --> 00:08:14,420
It's just I think
surprising for dplyr users.

166
00:08:14,420 --> 00:08:16,700
And for me, challenging,
to do when I'm

167
00:08:16,700 --> 00:08:19,560
trying to analyze data quickly.

168
00:08:19,560 --> 00:08:21,410
The third roadblock,
I'd say, is SQL.

169
00:08:21,410 --> 00:08:27,890
So dplyr users, if you're
like me, working in industry,

170
00:08:27,890 --> 00:08:32,360
I lean on dplyr and dbplyr being
able to generate SQL heavily.

171
00:08:32,360 --> 00:08:35,750
So you can just swap out
your data source to SQL

172
00:08:35,750 --> 00:08:39,650
and player will generate
the SQL query for you.

173
00:08:39,650 --> 00:08:41,659
In contrast, if
you're using pandas,

174
00:08:41,659 --> 00:08:44,120
you just need to
switch to writing SQL.

175
00:08:44,120 --> 00:08:46,580
And that's what I see happen
quite a bit in industry

176
00:08:46,580 --> 00:08:49,700
is once it hits the
database, people just

177
00:08:49,700 --> 00:08:51,770
switch and start coding SQL.

178
00:08:51,770 --> 00:08:55,100
So your computation
changes and how you code

179
00:08:55,100 --> 00:08:57,540
ends up changing as a result.

180
00:08:57,540 --> 00:09:01,620
So to recap, dplyr
is really powerful.

181
00:09:01,620 --> 00:09:05,450
It uses one verb,
select, for all the cases

182
00:09:05,450 --> 00:09:07,670
for grabbing columns.

183
00:09:07,670 --> 00:09:12,110
For group_by, you have this
really nice expressive syntax,

184
00:09:12,110 --> 00:09:15,080
where you can modify
the full table action.

185
00:09:15,080 --> 00:09:16,820
So you can have a
group to mutate,

186
00:09:16,820 --> 00:09:21,530
or group filter,
or group summarize.

187
00:09:21,530 --> 00:09:24,860
In contrast, pandas is
computationally powerful.

188
00:09:24,860 --> 00:09:26,743
And it's packed with options.

189
00:09:26,743 --> 00:09:28,160
But that means
that you might have

190
00:09:28,160 --> 00:09:31,790
to do a little bit more work
up front during the analysis.

191
00:09:31,790 --> 00:09:34,520
And this makes it great
for engineering but maybe

192
00:09:34,520 --> 00:09:37,700
a big challenge, I think,
for exploratory data analysis

193
00:09:37,700 --> 00:09:39,762
or quick analysis.

194
00:09:39,762 --> 00:09:41,720
All right, so we looked
at some core challenges

195
00:09:41,720 --> 00:09:46,497
in translating dplyr thoughts
about data analysis to pandas.

196
00:09:46,497 --> 00:09:47,955
Now I want to switch
gears and look

197
00:09:47,955 --> 00:09:51,980
how siuba can help you basically
preserve those thoughts

198
00:09:51,980 --> 00:09:54,230
and code them in Python.

199
00:09:54,230 --> 00:09:56,300
And it aims to do
this as faithfully

200
00:09:56,300 --> 00:09:58,440
to dplyr as possible.

201
00:09:58,440 --> 00:10:00,380
So I'm going to show
you an example of going

202
00:10:00,380 --> 00:10:02,660
from dplyr code to siuba.

203
00:10:02,660 --> 00:10:06,350
I apologize, I know I start
with these parentheses

204
00:10:06,350 --> 00:10:08,570
and put the pipe at the
beginning of the line

205
00:10:08,570 --> 00:10:10,370
and some people hate that.

206
00:10:10,370 --> 00:10:12,110
I'm sorry.

207
00:10:12,110 --> 00:10:14,420
My bad.

208
00:10:14,420 --> 00:10:17,000
So let's go ahead and
just start the switch.

209
00:10:17,000 --> 00:10:20,090
So first, we'll
change our imports.

210
00:10:20,090 --> 00:10:24,120
So rather than using library,
we'll do our Python imports.

211
00:10:24,120 --> 00:10:28,790
Then we'll change the pipe to
be greater than greater than.

212
00:10:28,790 --> 00:10:31,115
Next, we'll put
an underscore dot

213
00:10:31,115 --> 00:10:33,110
in front of the variable names.

214
00:10:33,110 --> 00:10:37,400
And this has to happen in order
for it to be Python syntax.

215
00:10:40,070 --> 00:10:43,920
And then the last thing
is a little bit tricky.

216
00:10:43,920 --> 00:10:46,010
We're going to take
this mean function call

217
00:10:46,010 --> 00:10:48,180
and we're going to
change it to a method.

218
00:10:48,180 --> 00:10:53,000
So it's more similar to how
pandas expressions operations.

219
00:10:53,000 --> 00:10:57,500
All right, and so in a sense,
with these few simple changes,

220
00:10:57,500 --> 00:11:02,690
we've gone from dplyr
in R to siuba in Python.

221
00:11:05,360 --> 00:11:07,520
And looking side by
side, hopefully my goal

222
00:11:07,520 --> 00:11:09,590
is that you can squint
your eyes and they just

223
00:11:09,590 --> 00:11:13,160
look like the same code
and you can just figure out

224
00:11:13,160 --> 00:11:16,170
how to swap between them.

225
00:11:16,170 --> 00:11:18,530
So now, I want to go
through the three examples

226
00:11:18,530 --> 00:11:20,810
that I showed before
and just give you

227
00:11:20,810 --> 00:11:23,330
a sense for what they
look like in siuba.

228
00:11:23,330 --> 00:11:26,120
So the first
roadblock was select.

229
00:11:26,120 --> 00:11:30,840
And now looking back at this
example with siuba on the left,

230
00:11:30,840 --> 00:11:33,260
it should be basically
the same thing,

231
00:11:33,260 --> 00:11:38,240
now you just have underscore
dot variable names.

232
00:11:38,240 --> 00:11:40,130
It's worth a read to
the very bottom one

233
00:11:40,130 --> 00:11:42,470
where you select
certain columns.

234
00:11:42,470 --> 00:11:45,530
It's really easy to
do and it matches up

235
00:11:45,530 --> 00:11:46,730
with the pandas code.

236
00:11:46,730 --> 00:11:50,840
So pandas, you can do this,
dot str dot ends with,

237
00:11:50,840 --> 00:11:55,670
and it will return true
whenever a column matches that.

238
00:11:55,670 --> 00:11:58,830
And siuba just lines up with
that way of doing things,

239
00:11:58,830 --> 00:12:00,830
so corresponds to
the pandas way.

240
00:12:03,620 --> 00:12:07,250
The second example is group_by.

241
00:12:07,250 --> 00:12:08,870
So we showed a
few different ways

242
00:12:08,870 --> 00:12:11,390
of doing filter and mutate.

243
00:12:11,390 --> 00:12:16,100
So the filter and mutate now
for pandas are on the right.

244
00:12:16,100 --> 00:12:18,720
And let's show
how siuba does it.

245
00:12:18,720 --> 00:12:23,520
So here's the siuba filter
and mutate on the left.

246
00:12:23,520 --> 00:12:27,590
Notice that they're eerily
similar hopefully to dplyr.

247
00:12:27,590 --> 00:12:32,220
And we can just tuck in the
group_by above the filter

248
00:12:32,220 --> 00:12:36,720
and mutate to make it a
group filter or group mutate.

249
00:12:36,720 --> 00:12:40,530
So it's meant to be easy
to just swap in and out.

250
00:12:40,530 --> 00:12:42,910
The last example was SQL.

251
00:12:42,910 --> 00:12:47,340
So I think this is the biggest,
most useful part of siuba

252
00:12:47,340 --> 00:12:51,120
is you can swap out your data
source from being a pandas data

253
00:12:51,120 --> 00:12:54,030
frame to a SQL alchemy--

254
00:12:54,030 --> 00:12:57,030
essentially a SQL alchemy
connection and siuba

255
00:12:57,030 --> 00:13:00,600
will generate the single
query, or run the query

256
00:13:00,600 --> 00:13:04,590
and return a table of
data just like dplyr.

257
00:13:04,590 --> 00:13:08,010
And right now, it's mostly
Postgrgsql and redshift

258
00:13:08,010 --> 00:13:10,020
that I've worked on
supporting but it can

259
00:13:10,020 --> 00:13:11,580
be extended to more back end.

260
00:13:11,580 --> 00:13:15,420
So there's early support
for my SQL and SQL Lite,

261
00:13:15,420 --> 00:13:18,870
and I'm hoping to build
those out further.

262
00:13:18,870 --> 00:13:20,490
I think one of the
incredible things

263
00:13:20,490 --> 00:13:22,620
is that you get ggplot for free.

264
00:13:22,620 --> 00:13:24,550
And that's not by
any of my work.

265
00:13:24,550 --> 00:13:27,420
But by the work
of a person named

266
00:13:27,420 --> 00:13:30,420
Hassan, who built
a package called

267
00:13:30,420 --> 00:13:35,400
plotnine, which is an incredibly
faithful port of ggplot.

268
00:13:35,400 --> 00:13:41,730
So ideally, you can just do the
full data transformation, data

269
00:13:41,730 --> 00:13:43,230
visualization.

270
00:13:43,230 --> 00:13:48,690
And you can carry over your hard
earned skills from R to Python.

271
00:13:48,690 --> 00:13:53,370
So just to recap, siuba tries
to use a very similar syntax

272
00:13:53,370 --> 00:13:55,350
to dplyr.

273
00:13:55,350 --> 00:13:57,510
There are some cases
where it needed

274
00:13:57,510 --> 00:14:00,150
to be tweaked a little
bit to be Pythonic

275
00:14:00,150 --> 00:14:03,750
or to just be Python syntax.

276
00:14:03,750 --> 00:14:09,330
And incredibly, it aims to
bring you SQL and ggplot.

277
00:14:09,330 --> 00:14:11,400
And I found that
these things really

278
00:14:11,400 --> 00:14:14,310
help me get back up to
speed in data analysis

279
00:14:14,310 --> 00:14:16,890
and have been fun to
just to carry into Python

280
00:14:16,890 --> 00:14:19,590
and to discuss with people.

281
00:14:19,590 --> 00:14:21,750
All right, so we talked
about three roadblocks

282
00:14:21,750 --> 00:14:25,500
you might face when translating
dplyr code and thoughts

283
00:14:25,500 --> 00:14:30,150
to pandas and how siuba you
roll past those by essentially

284
00:14:30,150 --> 00:14:34,440
copying and pasting
dplyr into Python.

285
00:14:34,440 --> 00:14:36,690
Now I want to zoom out
a little bit and ask,

286
00:14:36,690 --> 00:14:39,150
why is siuba worth
in the long term?

287
00:14:39,150 --> 00:14:41,780
Why should you try
out or adopt siuba?

288
00:14:41,780 --> 00:14:43,530
And the first thing I
want to hearken back

289
00:14:43,530 --> 00:14:48,450
to is Hadley's point in 2014
about cognition and computation

290
00:14:48,450 --> 00:14:52,960
that D dplyr as a
cognitive tool has,

291
00:14:52,960 --> 00:14:55,050
if you've used it over
long term, probably

292
00:14:55,050 --> 00:15:00,270
really helped you build skills
to ask important questions

293
00:15:00,270 --> 00:15:01,380
of your data.

294
00:15:01,380 --> 00:15:03,930
And those skills aren't
even maybe that related

295
00:15:03,930 --> 00:15:05,230
to programming.

296
00:15:05,230 --> 00:15:10,290
So why not just bring those
skills with you into Python?

297
00:15:10,290 --> 00:15:14,250
The next point is siuba
uses dplyr's architecture.

298
00:15:14,250 --> 00:15:18,150
And this lets it very
flexibly add new back end.

299
00:15:18,150 --> 00:15:21,870
So whether you run
against SQL or pandas,

300
00:15:21,870 --> 00:15:23,680
siuba can support it.

301
00:15:23,680 --> 00:15:27,330
And I'm hoping to extend
support to Python specific tools

302
00:15:27,330 --> 00:15:29,820
in the future like
dask and tools

303
00:15:29,820 --> 00:15:33,750
like spark as well as
fleshing out mySQL support.

304
00:15:33,750 --> 00:15:35,490
The next thing is
that siuba runs

305
00:15:35,490 --> 00:15:39,330
just an enormous glut of
continuous integration tests.

306
00:15:39,330 --> 00:15:42,150
So it's incredibly
thoroughly tested.

307
00:15:42,150 --> 00:15:44,428
I would say it's
paranoid about ensuring

308
00:15:44,428 --> 00:15:46,470
that you get the same
result back, whether you're

309
00:15:46,470 --> 00:15:49,050
running on SQL or pandas.

310
00:15:49,050 --> 00:15:54,180
And every time I push code,
it runs thousands of tests.

311
00:15:54,180 --> 00:15:58,500
The last thing is
developer docs.

312
00:15:58,500 --> 00:16:01,890
So I've tried to leave a
nice trail of breadcrumbs.

313
00:16:01,890 --> 00:16:04,620
So if you're curious about
the internal workings of siuba

314
00:16:04,620 --> 00:16:08,250
or looking to
patch or extend it,

315
00:16:08,250 --> 00:16:12,450
there are just enormous
resources to do that.

316
00:16:12,450 --> 00:16:14,010
I'd suggest the
programming guide

317
00:16:14,010 --> 00:16:17,760
in the siuba docs, which goes
through all of siuba's parts.

318
00:16:17,760 --> 00:16:22,020
Or I have something called
architectural decision records

319
00:16:22,020 --> 00:16:25,500
and GitHub that document
key decisions I made,

320
00:16:25,500 --> 00:16:31,330
why they were made, and contain
sketches of those decisions.

321
00:16:31,330 --> 00:16:34,950
The last thing is if you're
interested in learning siuba,

322
00:16:34,950 --> 00:16:37,270
there's some nice
alleys you can go down.

323
00:16:37,270 --> 00:16:40,410
So the first thing I'd recommend
is Dave Robinson's Tidy

324
00:16:40,410 --> 00:16:42,270
Tuesday's screencasts.

325
00:16:42,270 --> 00:16:45,060
These are actually an R,
so maybe, not as related,

326
00:16:45,060 --> 00:16:46,860
but they were an
incredible resource

327
00:16:46,860 --> 00:16:49,650
when developing siuba and
actually a big motivation

328
00:16:49,650 --> 00:16:51,180
to work on it.

329
00:16:51,180 --> 00:16:54,360
I think being able to
see a person move quickly

330
00:16:54,360 --> 00:16:57,210
through data analysis
in a holistic setting

331
00:16:57,210 --> 00:16:58,860
is really important.

332
00:16:58,860 --> 00:17:00,720
And Tidy Tuesday
is a project that

333
00:17:00,720 --> 00:17:07,109
releases new data every week,
lets you see things in action.

334
00:17:07,109 --> 00:17:09,930
The other thing is there's
an interactive tutorial

335
00:17:09,930 --> 00:17:12,660
for siuba on learn.siuba.org.

336
00:17:12,660 --> 00:17:15,630
So if you're curious
to just get started,

337
00:17:15,630 --> 00:17:17,190
even if you've
never coded before,

338
00:17:17,190 --> 00:17:20,790
the tutorial's made to make
it easy to get started.

339
00:17:20,790 --> 00:17:23,430
It's something I've tested
on my family, and friends,

340
00:17:23,430 --> 00:17:26,160
and I'm really excited for
the opportunity for siuba

341
00:17:26,160 --> 00:17:28,410
to make it really
easy for learners

342
00:17:28,410 --> 00:17:33,840
to take their first steps
into coding and data analysis.

343
00:17:33,840 --> 00:17:36,150
The last thing is
that I've tried

344
00:17:36,150 --> 00:17:39,930
to put up live analysis on
YouTube of analyzing data

345
00:17:39,930 --> 00:17:41,820
for an hour, whether
it's translating

346
00:17:41,820 --> 00:17:45,930
Dave's analysis from
R into siuba, Python,

347
00:17:45,930 --> 00:17:50,490
or doing Tidy Tuesday
analysis for an hour.

348
00:17:50,490 --> 00:17:52,650
So I highly recommend
watching those,

349
00:17:52,650 --> 00:17:54,480
if you want to see
siuba in action,

350
00:17:54,480 --> 00:17:57,840
and then trying and siuba
out on Tidy Tuesday.

351
00:17:57,840 --> 00:18:01,410
Just take it for a spin
and see what it looks like

352
00:18:01,410 --> 00:18:06,150
and how it compares, say, to
using R or another Python tool.

353
00:18:06,150 --> 00:18:10,020
So just to recap, you
can find siuba on GitHub

354
00:18:10,020 --> 00:18:12,330
at machow/siuba.

355
00:18:12,330 --> 00:18:15,090
You can pip install it.

356
00:18:15,090 --> 00:18:19,680
I can't highly recommend
Tidy Tuesday enough.

357
00:18:19,680 --> 00:18:23,850
It'll let you get a feel for
what data analysis with siuba

358
00:18:23,850 --> 00:18:25,110
looks like.

359
00:18:25,110 --> 00:18:27,270
And there's learn.siuba.org.

360
00:18:27,270 --> 00:18:32,580
If you've never coded, I've
tried to design this for you.

361
00:18:32,580 --> 00:18:37,110
And I'd love to see people take
their first steps into data

362
00:18:37,110 --> 00:18:39,190
analysis through this course.

363
00:18:39,190 --> 00:18:42,960
So thanks to everybody who
helped contribute to siuba.

364
00:18:42,960 --> 00:18:45,900
Thanks to RStudio for
putting this together.

365
00:18:45,900 --> 00:18:49,200
And thanks to the army of people
who gave feedback on this talk

366
00:18:49,200 --> 00:18:53,460
and made it much, much better
than its first version.

367
00:18:53,460 --> 00:18:55,120
So thanks for watching.

368
00:18:55,120 --> 00:18:56,820
I hope you'll try siuba out.

369
00:18:56,820 --> 00:18:58,410
And if you have any
questions, please

370
00:18:58,410 --> 00:19:01,350
feel free to reach
out to me on GitHub

371
00:19:01,350 --> 00:19:04,170
or on Twitter @chowthedog.

372
00:19:04,170 --> 00:19:05,720
Thanks.
