1
00:00:07,770 --> 00:00:09,510
SEAN LOPP: Hi, my
name's Sean, I'm

2
00:00:09,510 --> 00:00:11,970
a product manager of RStudio.

3
00:00:11,970 --> 00:00:13,920
As a product manager,
I get to talk

4
00:00:13,920 --> 00:00:18,090
to data science teams both small
and large, all over the world.

5
00:00:18,090 --> 00:00:21,060
And unfortunately in
interacting with these teams,

6
00:00:21,060 --> 00:00:25,020
we often hear that they're
confronted by a false choice

7
00:00:25,020 --> 00:00:27,720
to either pick R or Python.

8
00:00:27,720 --> 00:00:29,490
This choice might
occur when they're

9
00:00:29,490 --> 00:00:33,100
writing a job description to
hire a new data scientist.

10
00:00:33,100 --> 00:00:35,040
It might occur
when they're trying

11
00:00:35,040 --> 00:00:38,370
to decide what to learn
as individuals who

12
00:00:38,370 --> 00:00:40,860
want to up skill
themselves or it

13
00:00:40,860 --> 00:00:42,360
might occur when
they're interacting

14
00:00:42,360 --> 00:00:46,840
with IT asking for resources
to support a project.

15
00:00:46,840 --> 00:00:49,410
So why do teams face
this false choice?

16
00:00:49,410 --> 00:00:52,590
Do we really need to
pick between one language

17
00:00:52,590 --> 00:00:54,000
or another?

18
00:00:54,000 --> 00:00:56,903
The answer is no and today
we're going to talk about why.

19
00:00:56,903 --> 00:00:59,070
We're going to look at some
of the common myths that

20
00:00:59,070 --> 00:01:00,300
lead to this choice.

21
00:01:00,300 --> 00:01:02,040
How to debunk those myths.

22
00:01:02,040 --> 00:01:03,900
And ultimately, how
data science teams

23
00:01:03,900 --> 00:01:06,300
can be most effective
when they choose

24
00:01:06,300 --> 00:01:09,050
to use R and Python together.

25
00:01:09,050 --> 00:01:12,980
Now to set some context,
imagine you're a craftsman.

26
00:01:12,980 --> 00:01:15,980
Someone who is handy
and builds things.

27
00:01:15,980 --> 00:01:19,035
As a craftsman, you're probably
familiar with screwdrivers,

28
00:01:19,035 --> 00:01:20,660
I mean, who hasn't
used the screwdriver

29
00:01:20,660 --> 00:01:22,803
to put something together.

30
00:01:22,803 --> 00:01:24,470
And you might be aware
that screwdrivers

31
00:01:24,470 --> 00:01:27,060
come in a variety of
different shapes and forms.

32
00:01:27,060 --> 00:01:29,890
You can have a flat
head screwdriver, a star

33
00:01:29,890 --> 00:01:33,680
bit, a Phillips head, and
each of these screwdrivers

34
00:01:33,680 --> 00:01:36,680
is designed to serve
a specific purpose.

35
00:01:36,680 --> 00:01:38,590
Now imagine as a
craftsman, if you

36
00:01:38,590 --> 00:01:40,070
were told that
you have to choose

37
00:01:40,070 --> 00:01:43,760
for the rest of your
career between using one

38
00:01:43,760 --> 00:01:46,240
type of screwdriver or another.

39
00:01:46,240 --> 00:01:49,220
You'd probably look at that
person and say, that's crazy,

40
00:01:49,220 --> 00:01:51,447
there's no way I can
practically make this choice.

41
00:01:51,447 --> 00:01:53,530
For some projects I'm going
to need the flat head,

42
00:01:53,530 --> 00:01:55,700
for other projects
I need the Phillips.

43
00:01:55,700 --> 00:01:58,420
It doesn't make sense for me
to pick one screwdriver to use

44
00:01:58,420 --> 00:02:00,360
for the rest of my career.

45
00:02:00,360 --> 00:02:04,950
Instead what you might do
as a craftsman is to say,

46
00:02:04,950 --> 00:02:08,520
I want to opt in to
using a smarter tool.

47
00:02:08,520 --> 00:02:10,770
A tool that's going
to be more powerful

48
00:02:10,770 --> 00:02:15,090
and allow me to take advantage
of all these different bits

49
00:02:15,090 --> 00:02:16,170
that are out there.

50
00:02:16,170 --> 00:02:19,050
Specifically as a
craftsman, you might

51
00:02:19,050 --> 00:02:21,420
be interested in
something like a drill.

52
00:02:21,420 --> 00:02:23,880
A tool that
regardless of what bit

53
00:02:23,880 --> 00:02:25,470
you're going to
need for a project,

54
00:02:25,470 --> 00:02:29,040
allows you to work faster
and accomplish more.

55
00:02:29,040 --> 00:02:33,060
And allows you to work
in an easier fashion.

56
00:02:33,060 --> 00:02:35,970
So craftsmen have this drill.

57
00:02:35,970 --> 00:02:37,830
What about data science teams?

58
00:02:37,830 --> 00:02:40,530
Well, I believe
as data scientists

59
00:02:40,530 --> 00:02:44,520
we should refuse that same
false choice between R

60
00:02:44,520 --> 00:02:46,680
and Python and
other languages just

61
00:02:46,680 --> 00:02:50,310
as the craftsman refuses to
pick one type of screwdriver.

62
00:02:50,310 --> 00:02:54,450
Instead, we should work
alongside of folks in IT

63
00:02:54,450 --> 00:02:58,470
and the leaders of our teams to
build something like a drill.

64
00:02:58,470 --> 00:03:00,990
Something that regardless
of what language we use

65
00:03:00,990 --> 00:03:03,300
is going to give us
the power to accomplish

66
00:03:03,300 --> 00:03:06,130
our projects faster and easier.

67
00:03:06,130 --> 00:03:09,480
So what is that drill
for data science?

68
00:03:09,480 --> 00:03:11,380
We'll take a look
at that in a second.

69
00:03:11,380 --> 00:03:14,400
But first, I want to address
some of these common objections

70
00:03:14,400 --> 00:03:15,450
that you'll hear.

71
00:03:15,450 --> 00:03:17,220
People that say,
no, no, no, there's

72
00:03:17,220 --> 00:03:19,770
no such thing as a
drill for data science.

73
00:03:19,770 --> 00:03:22,050
We have to pick
a single language

74
00:03:22,050 --> 00:03:24,625
or a single screwdriver.

75
00:03:24,625 --> 00:03:26,250
So where do these
objections come from?

76
00:03:26,250 --> 00:03:29,520
What's the biggest objection
that data science teams face?

77
00:03:29,520 --> 00:03:31,980
Well the first one
is this belief,

78
00:03:31,980 --> 00:03:34,920
that if we are to support
more than one language

79
00:03:34,920 --> 00:03:39,420
we'll end up doing a
lot of duplicative work.

80
00:03:39,420 --> 00:03:43,530
So for example, if I were a team
that wanted to use R &amp; Python

81
00:03:43,530 --> 00:03:47,100
IT might be worried that now I
have 2 times the amount of work

82
00:03:47,100 --> 00:03:47,730
to do.

83
00:03:47,730 --> 00:03:49,440
Instead of supporting
one language,

84
00:03:49,440 --> 00:03:52,110
I now have to support
two, that means

85
00:03:52,110 --> 00:03:54,150
twice the number
of installs, twice

86
00:03:54,150 --> 00:03:56,100
the number of support
tickets, twice

87
00:03:56,100 --> 00:03:59,580
the money spent on IT resources.

88
00:03:59,580 --> 00:04:03,640
And luckily, this line of
thinking simply isn't accurate.

89
00:04:03,640 --> 00:04:06,510
And the reason for that is
because regardless of what

90
00:04:06,510 --> 00:04:11,070
language you use, the core
things that IT needs to support

91
00:04:11,070 --> 00:04:12,150
are the same.

92
00:04:12,150 --> 00:04:17,130
Things like computation, logs,
authentication, security, data

93
00:04:17,130 --> 00:04:20,220
access, these provide
a common core,

94
00:04:20,220 --> 00:04:24,480
that drill, that we can invest in
regardless of which drill bit,

95
00:04:24,480 --> 00:04:27,020
which language we end up using.

96
00:04:27,020 --> 00:04:28,920
And so I want to show
you some of those tools

97
00:04:28,920 --> 00:04:31,470
that we've worked on
in RStudio to make

98
00:04:31,470 --> 00:04:33,450
that type of
underlying investment,

99
00:04:33,450 --> 00:04:38,348
that core of data science
infrastructure accessible.

100
00:04:38,348 --> 00:04:40,140
So the first thing I
want to take a look at

101
00:04:40,140 --> 00:04:41,910
is in the development space.

102
00:04:41,910 --> 00:04:44,070
When we're data
scientists going to write

103
00:04:44,070 --> 00:04:47,520
code either R or Python,
often what we want

104
00:04:47,520 --> 00:04:49,920
is to choose an editor
that's purpose built

105
00:04:49,920 --> 00:04:51,550
for one of those languages.

106
00:04:51,550 --> 00:04:53,910
So in R that might
be the RStudio IDE,

107
00:04:53,910 --> 00:04:56,400
in Python that might be
something like a Jupyter

108
00:04:56,400 --> 00:05:00,180
Notebook or more recently
JupyterLabs or perhaps,

109
00:05:00,180 --> 00:05:01,980
I want to use a
full-fledged development

110
00:05:01,980 --> 00:05:04,290
environment like VS code.

111
00:05:04,290 --> 00:05:06,840
Now IT might be
thinking, Oh, no,

112
00:05:06,840 --> 00:05:09,330
that means we have to support
all these different editors,

113
00:05:09,330 --> 00:05:11,010
all these different
environments.

114
00:05:11,010 --> 00:05:12,720
But luckily, that's not true.

115
00:05:12,720 --> 00:05:14,940
With tools like
RStudio Server Pro

116
00:05:14,940 --> 00:05:19,500
you can install a single
infrastructure that supports

117
00:05:19,500 --> 00:05:20,700
those different editors.

118
00:05:20,700 --> 00:05:22,710
And so what you're
seeing on the screen here

119
00:05:22,710 --> 00:05:24,920
is the home page
of RStudio Server.

120
00:05:24,920 --> 00:05:28,380
When a data scientist enters
through that common front door,

121
00:05:28,380 --> 00:05:30,330
they're able to pick
the different editors

122
00:05:30,330 --> 00:05:32,760
that they might want to
use for a certain project.

123
00:05:32,760 --> 00:05:35,820
So IT only has to stand
up one server environment.

124
00:05:35,820 --> 00:05:38,370
They only have to do one
set of configuration.

125
00:05:38,370 --> 00:05:41,320
They only have to supply data
access to one common entry

126
00:05:41,320 --> 00:05:41,820
point.

127
00:05:41,820 --> 00:05:44,490
But the data scientist
is still able to use

128
00:05:44,490 --> 00:05:47,670
whatever editor makes the
most sense for their project.

129
00:05:47,670 --> 00:05:49,830
You'll also see here that
we're taking advantage

130
00:05:49,830 --> 00:05:52,920
of Cloud native
tools like Kubernetes

131
00:05:52,920 --> 00:05:56,670
to provide elastic scale
in a Docker backend

132
00:05:56,670 --> 00:05:59,610
to provide explicitly
those dependencies

133
00:05:59,610 --> 00:06:01,750
that we might need
for a project.

134
00:06:01,750 --> 00:06:04,140
So what this all amounts to
is that in development we're

135
00:06:04,140 --> 00:06:06,000
able to get to our
first line of code

136
00:06:06,000 --> 00:06:08,970
really quickly regardless of
what language that line of code

137
00:06:08,970 --> 00:06:12,600
is written in without
doubling the IT headaches.

138
00:06:12,600 --> 00:06:14,980
Now that's development,
what about production?

139
00:06:14,980 --> 00:06:17,550
What about when it
comes time to create

140
00:06:17,550 --> 00:06:20,700
these different artifacts
and share those with others.

141
00:06:20,700 --> 00:06:23,490
Well luckily the
same concept applies.

142
00:06:23,490 --> 00:06:25,530
So at RStudio what
that looks like is

143
00:06:25,530 --> 00:06:28,210
a tool like RStudio Connect.

144
00:06:28,210 --> 00:06:32,590
So RStudio Connect allows
you to deploy a wide variety

145
00:06:32,590 --> 00:06:35,530
of data artifacts
regardless of what language

146
00:06:35,530 --> 00:06:36,640
they're written in.

147
00:06:36,640 --> 00:06:39,340
So for web
applications in R that

148
00:06:39,340 --> 00:06:42,820
might be something like Shiny,
for web applications in Python

149
00:06:42,820 --> 00:06:46,300
that might be something like
Dash, Streamlit, or Bokeh.

150
00:06:46,300 --> 00:06:49,870
But regardless of which of
those engines you choose to use,

151
00:06:49,870 --> 00:06:52,870
RStudio Connect allows
you to quickly deploy them

152
00:06:52,870 --> 00:06:55,690
onto a web server so that
you get a URL that you

153
00:06:55,690 --> 00:06:56,950
can share with others.

154
00:06:56,950 --> 00:06:59,420
Connect takes care of
things like authentication,

155
00:06:59,420 --> 00:07:02,500
security, logging, and scale.

156
00:07:02,500 --> 00:07:05,860
Similarly, if you wanted to
create an API so you have

157
00:07:05,860 --> 00:07:09,190
a model that you want to
expose to other services,

158
00:07:09,190 --> 00:07:11,830
well that exposure
might take place in R

159
00:07:11,830 --> 00:07:15,130
through a package like Plumber
or might take place in Python

160
00:07:15,130 --> 00:07:16,780
through a tool like Flask.

161
00:07:16,780 --> 00:07:19,810
But either way, Connect
provides that common core

162
00:07:19,810 --> 00:07:22,270
infrastructure, that drill.

163
00:07:22,270 --> 00:07:26,000
Finally, the same thing applies
for automated reporting.

164
00:07:26,000 --> 00:07:28,600
So in the Python side that
might be Jupyter Notebooks.

165
00:07:28,600 --> 00:07:31,480
On the R side, it might be
something like R Markdown.

166
00:07:31,480 --> 00:07:35,020
Regardless, again, we're able to
deploy those things to Connect.

167
00:07:35,020 --> 00:07:38,200
And Connect can handle things
like scheduling those notebooks

168
00:07:38,200 --> 00:07:40,840
to be re-rendered
on a regular basis,

169
00:07:40,840 --> 00:07:43,660
emailing stakeholders
with the new results,

170
00:07:43,660 --> 00:07:46,210
and even customizing
those emails

171
00:07:46,210 --> 00:07:47,920
so that you can send
exactly what you

172
00:07:47,920 --> 00:07:51,100
need to a stakeholders inbox
regardless of what language

173
00:07:51,100 --> 00:07:52,860
you're using for a project.

174
00:07:52,860 --> 00:07:56,500
Again, IT is only setting
up this infrastructure once.

175
00:07:56,500 --> 00:07:59,410
They're not doubling their
work just because you're

176
00:07:59,410 --> 00:08:03,130
multiplying by 5 or 10-fold
the number of different data

177
00:08:03,130 --> 00:08:04,630
products that you can use.

178
00:08:04,630 --> 00:08:07,750
As a data scientist
that flexibility is key

179
00:08:07,750 --> 00:08:09,610
when it comes to
communicating your work,

180
00:08:09,610 --> 00:08:12,040
getting buy-in to the
modeling that you're doing,

181
00:08:12,040 --> 00:08:15,520
or working alongside of a
domain expert in real time

182
00:08:15,520 --> 00:08:18,370
in a meeting, you need
to have the flexibility

183
00:08:18,370 --> 00:08:22,060
to use all these different tools
to be effective data science

184
00:08:22,060 --> 00:08:23,050
team.

185
00:08:23,050 --> 00:08:26,860
And so that's what we're setting
out to do is to build products,

186
00:08:26,860 --> 00:08:30,400
build those drills that allow
you regardless of drill bit

187
00:08:30,400 --> 00:08:33,159
to effectively
communicate your work.

188
00:08:33,159 --> 00:08:35,020
And so because this
is so important,

189
00:08:35,020 --> 00:08:36,909
because it is the
most common myth,

190
00:08:36,909 --> 00:08:39,880
I want to spend just
a little bit more time

191
00:08:39,880 --> 00:08:42,700
looking at that common core.

192
00:08:42,700 --> 00:08:46,000
And so this diagram
hopefully shows you

193
00:08:46,000 --> 00:08:47,560
what I've been talking about.

194
00:08:47,560 --> 00:08:49,840
Where we have these
layers that are

195
00:08:49,840 --> 00:08:53,020
going to be the same regardless
of what language we're using.

196
00:08:53,020 --> 00:08:57,010
So those layers are things
like common authentication,

197
00:08:57,010 --> 00:09:00,280
things like logging,
things like scaling.

198
00:09:00,280 --> 00:09:04,990
And then the final layer,
the choice of R or Python

199
00:09:04,990 --> 00:09:07,720
is ultimately a
last mile effort.

200
00:09:07,720 --> 00:09:10,330
So we're not multiplying
our work by two,

201
00:09:10,330 --> 00:09:14,290
we're actually only changing
that final top piece.

202
00:09:14,290 --> 00:09:17,290
Now I showed you RStudio Server Pro
and RStudio Connect as one way

203
00:09:17,290 --> 00:09:19,840
to implement this
drill but teams

204
00:09:19,840 --> 00:09:22,500
can implement the drill
in other ways as well.

205
00:09:22,500 --> 00:09:26,180
For example, some organizations
will use a Cloud provider.

206
00:09:26,180 --> 00:09:29,200
Some organizations will
use something like Docker.

207
00:09:29,200 --> 00:09:32,020
Regardless, the key
concept is that you

208
00:09:32,020 --> 00:09:35,650
build those common paradigms
that your data scientist

209
00:09:35,650 --> 00:09:38,440
regardless of
language or package

210
00:09:38,440 --> 00:09:40,820
is going to be able
to take advantage of.

211
00:09:40,820 --> 00:09:44,890
And once you debunk that
myth, that more languages mean

212
00:09:44,890 --> 00:09:48,070
more problems, you're
well on your way

213
00:09:48,070 --> 00:09:52,010
to those multiplicative efforts
to avoiding that false choice

214
00:09:52,010 --> 00:09:54,400
and having a lot more options
to build what you need

215
00:09:54,400 --> 00:09:56,570
to build to get the job done.

216
00:09:56,570 --> 00:09:59,230
So that's that first myth
hopefully now debunked.

217
00:09:59,230 --> 00:10:01,600
Let's talk about a
second one, which

218
00:10:01,600 --> 00:10:04,690
is that multilingual
teams can't collaborate.

219
00:10:04,690 --> 00:10:08,230
Imagine you are a data
science team leader

220
00:10:08,230 --> 00:10:11,590
and you have three or four
data scientists on your team

221
00:10:11,590 --> 00:10:14,770
that have built out something
really awesome in Python.

222
00:10:14,770 --> 00:10:18,400
In fact, I was speaking
to a data science team

223
00:10:18,400 --> 00:10:22,180
leader named Wayne recently who
was exactly in this situation.

224
00:10:22,180 --> 00:10:24,820
But he needed to
hire someone new,

225
00:10:24,820 --> 00:10:27,670
in his context was
a marketing project,

226
00:10:27,670 --> 00:10:30,430
he really wanted to hire
someone with marketing domain

227
00:10:30,430 --> 00:10:31,390
knowledge.

228
00:10:31,390 --> 00:10:34,150
But unfortunately, he
couldn't find that candidate

229
00:10:34,150 --> 00:10:37,240
who had both the Python
expertise and the marketing

230
00:10:37,240 --> 00:10:38,230
background.

231
00:10:38,230 --> 00:10:41,140
But he did know a few people
who had strong marketing chops

232
00:10:41,140 --> 00:10:43,150
and knew a little bit of R.

233
00:10:43,150 --> 00:10:45,520
Is he presented with
a false choice here?

234
00:10:45,520 --> 00:10:49,630
I think so, because it turns out
that even if your code base is

235
00:10:49,630 --> 00:10:52,720
mostly in Python you
can bring someone

236
00:10:52,720 --> 00:10:56,050
who has a background in R
up to speed really quickly.

237
00:10:56,050 --> 00:10:57,850
And again, it comes
down to having

238
00:10:57,850 --> 00:11:00,340
those right tools
a common drill bit

239
00:11:00,340 --> 00:11:04,185
to allow for that type of
inter team collaboration.

240
00:11:04,185 --> 00:11:05,560
And so I want to
quickly show you

241
00:11:05,560 --> 00:11:07,870
what investments
we've made in RStudio

242
00:11:07,870 --> 00:11:11,340
to make that type of
collaboration possible.

243
00:11:11,340 --> 00:11:15,030
So what we're looking at
here is the RStudio IDE.

244
00:11:15,030 --> 00:11:17,220
In the new version of the
IDE has a what you see

245
00:11:17,220 --> 00:11:20,000
is what you mean
editor for R Markdown.

246
00:11:20,000 --> 00:11:22,500
Inside of that editor,
you're able to incorporate

247
00:11:22,500 --> 00:11:25,020
both R and Python code chunks.

248
00:11:25,020 --> 00:11:27,270
So here, you're
looking at Python code

249
00:11:27,270 --> 00:11:29,310
that we're able to
run but that code

250
00:11:29,310 --> 00:11:31,380
takes advantage
of objects coming

251
00:11:31,380 --> 00:11:35,410
from R. See the r.cars object.

252
00:11:35,410 --> 00:11:38,190
So once we have that
Python code executed,

253
00:11:38,190 --> 00:11:39,930
it's actually going
to write objects back

254
00:11:39,930 --> 00:11:42,270
into the environment that
we can see in the IDE.

255
00:11:42,270 --> 00:11:44,790
So in the environment
pane in objects explorer,

256
00:11:44,790 --> 00:11:47,880
we can view that panda's
data frame we created.

257
00:11:47,880 --> 00:11:50,520
Once we're happy with the
result that we have in Python,

258
00:11:50,520 --> 00:11:52,830
we can use the what you
see is what you mean editor

259
00:11:52,830 --> 00:11:57,030
to insert an R code chunk that
takes advantage of that Python

260
00:11:57,030 --> 00:11:58,030
data frame.

261
00:11:58,030 --> 00:12:01,290
So just like we used
the R object in Python,

262
00:12:01,290 --> 00:12:03,540
we can use the
Python object in R

263
00:12:03,540 --> 00:12:07,380
and create a plot with
ggplot2 of that Python data.

264
00:12:07,380 --> 00:12:10,530
Now this interoperability
extends beyond R Markdown

265
00:12:10,530 --> 00:12:12,310
through the reticulate package.

266
00:12:12,310 --> 00:12:14,490
So here, we have a
Shiny application

267
00:12:14,490 --> 00:12:16,860
that's going to take
a Python function

268
00:12:16,860 --> 00:12:19,740
and actually source it and
make it available to the R

269
00:12:19,740 --> 00:12:22,110
engine without any conversion.

270
00:12:22,110 --> 00:12:23,550
It's pretty magical.

271
00:12:23,550 --> 00:12:26,370
We can then call that Python
function inside of our Shiny

272
00:12:26,370 --> 00:12:30,120
app that allows us to build
something like this, which

273
00:12:30,120 --> 00:12:33,360
is a shiny application where
the front end of the input

274
00:12:33,360 --> 00:12:37,680
and controls are driven by Shiny
but the back end simulation

275
00:12:37,680 --> 00:12:40,330
is occurring in those
Python functions.

276
00:12:40,330 --> 00:12:43,380
So we're able, as a
multilingual team to really glue

277
00:12:43,380 --> 00:12:45,090
these two things together.

278
00:12:45,090 --> 00:12:46,950
Whether we're
bilingual or not, we

279
00:12:46,950 --> 00:12:50,550
can take advantage of a code
base written in either language

280
00:12:50,550 --> 00:12:53,080
to achieve a really
unique outcome.

281
00:12:53,080 --> 00:12:56,470
And that's what debunking these
false choices is all about.

282
00:12:56,470 --> 00:12:59,310
It's finding ways to
combine the strengths,

283
00:12:59,310 --> 00:13:03,330
the best of both languages as
well as the best of our team

284
00:13:03,330 --> 00:13:06,390
to come together to create
something faster and easier

285
00:13:06,390 --> 00:13:08,070
than we could if
we were in isolated

286
00:13:08,070 --> 00:13:10,170
silos with either language.

287
00:13:10,170 --> 00:13:12,910
And that leads me
to my final point,

288
00:13:12,910 --> 00:13:16,740
which is that we need as
data scientists to optimize

289
00:13:16,740 --> 00:13:19,470
for people not for tools.

290
00:13:19,470 --> 00:13:20,860
Well what do I mean by that.

291
00:13:20,860 --> 00:13:22,980
Let's think about the
story of Wayne trying

292
00:13:22,980 --> 00:13:24,510
to hire as it
turned out her name

293
00:13:24,510 --> 00:13:28,020
was Vicky, a data scientist
coming from the R space instead

294
00:13:28,020 --> 00:13:30,500
of the Python background.

295
00:13:30,500 --> 00:13:34,700
Because Wayne was able to set
aside the distinction in tools,

296
00:13:34,700 --> 00:13:37,400
he could come up with a data
science team that together

297
00:13:37,400 --> 00:13:40,610
was more effective than
if he had limited his job

298
00:13:40,610 --> 00:13:43,370
criteria to only people
that knew Python.

299
00:13:43,370 --> 00:13:46,550
And so we see that story play
out time and time again.

300
00:13:46,550 --> 00:13:48,890
At the end of the day when
we talk to data science team

301
00:13:48,890 --> 00:13:53,150
leaders, their most important
asset and their most expensive

302
00:13:53,150 --> 00:13:55,500
isn't a particular
tool or platform,

303
00:13:55,500 --> 00:13:57,710
it's the data scientist
that they're hiring

304
00:13:57,710 --> 00:14:00,010
to solve complex problems.

305
00:14:00,010 --> 00:14:03,350
In another way, one of the
big reasons organizations

306
00:14:03,350 --> 00:14:05,390
invest in data science
in the first place

307
00:14:05,390 --> 00:14:09,110
is because Blackbox solutions
like Tableau or PowerBI

308
00:14:09,110 --> 00:14:13,520
simply don't meet the needs
of the Rich complex real world

309
00:14:13,520 --> 00:14:15,680
problems that they're facing.

310
00:14:15,680 --> 00:14:18,920
So why would it make any sense
for those same data science

311
00:14:18,920 --> 00:14:21,860
teams that have recognized
they need the flexibility

312
00:14:21,860 --> 00:14:25,490
and power of code to achieve
outcomes to then sabotage

313
00:14:25,490 --> 00:14:27,020
themselves by
limiting themselves

314
00:14:27,020 --> 00:14:28,400
to only one language.

315
00:14:28,400 --> 00:14:31,260
It simply doesn't,
it's a false choice.

316
00:14:31,260 --> 00:14:35,750
And so today, my final plea
is to pick the people that

317
00:14:35,750 --> 00:14:37,730
will make your data
science team effective

318
00:14:37,730 --> 00:14:40,110
and then supply them
with what they need.

319
00:14:40,110 --> 00:14:42,660
Don't make people
subservient to tools,

320
00:14:42,660 --> 00:14:44,120
it should be the
other way around.

321
00:14:44,120 --> 00:14:46,430
Allow data science teams
to pick whatever language

322
00:14:46,430 --> 00:14:48,290
or tools can be most effective.

323
00:14:48,290 --> 00:14:51,110
And help you do that
at RStudio, we've

324
00:14:51,110 --> 00:14:54,170
invested in building out
drills so that regardless

325
00:14:54,170 --> 00:14:57,110
of what drillbit you need you
can effectively build something

326
00:14:57,110 --> 00:14:59,107
faster and easier.

327
00:14:59,107 --> 00:15:01,190
Thank you so much for your
time and I look forward

328
00:15:01,190 --> 00:15:03,310
to your questions.
